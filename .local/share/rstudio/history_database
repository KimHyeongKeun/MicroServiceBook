1647832773833:help(help)
1647832936904:help("install.package")
1647832981401:install.packages("ggplot2",depedencies = T)
1647833221942:a<-1
1647833293418:b<-2
1647833304072:c<-dfske
1647833314018:a+b
1647833326400:c<-1.2
1647833343921:a<-2
1647833346689:a+b
1647833357990:a+b
1647833395100:d <- 'hyungkeun'
1647833408063:d <- 'hyungkeun1'
1647833415244:d <- 'hyungkeun'+1
1647833451227:b <- c(1,2,3,4,5)
1647833498181:c <- c(1:6)
1647833505360:c <- c(1:10)
1647833610341:b<-c("my", "name","is","hyungkeun")
1647834172178:class(b)
1647834285818:b<-factor(c("my", "name","is","hyungkeun"))
1647834300382:level(b)
1647834306347:levels(b)
1647834428603:x2<-as.numeric(x2)
1647834433360:x2<-as.numeric(x2);
1647834461723:b <- (c(1,2,3,4,5))
1647834469767:mean(b)
1647834494481:b<-as.numeric(b)
1647835039508:a <- c(1,2,3), mean(a)
1647835054316:a <- c(1,2,3), mean(x)
1647835059048:a <- c(1,2,3)
1647835175381:b<-c("my", "name", "is", "hyungken")
1647835182379:b
1647835196350:b<-c("my", "name", "is", "iljo")
1647835199247:b
1647835230046:paste(b,c,collapse = " ,")
1647835244024:paste(b,collapse = " ,")
1647835308940:library(ggplot2)
1647835341883:install.packages("ggplot2")
1647835350121:library(ggplot2)
1647835461567:english = c(90,85,75,98,60)
1647835521405:science<-c(85,43,68,78,54)
1647835532256:english
1647835538858:science
1647835566813:df_score <- data.frame(english, science)
1647835585949:df_scores
1647835617015:df_scores
1647835654686:df_scores <- data.frame(english, science)
1647835663129:df_scores
1647835717970:df_scores <- data.frame(english, science,classroom)
1647835724678:classroom <- c(1,2,1,1,2)
1647835726710:df_scores <- data.frame(english, science,classroom)
1647835728268:df_scores
1647836002673:install.packages("readxl")
1647836037921:library(readxl)
1647836324582:df_exam <- read_excel("exam_score")
1647836338814:df_exam <- read_excel("exam_score.xlsx")
1648132615706:b<- c(1,2,3,4,5)
1648132621071:seq <-c(1,5)
1648132641458:clear
1648132727680:b<- c(1,2,3,4,5)
1648132731439:seq <-c(1,5)
1648132783784:c <- seq(1,5)
1648132802452:c <- seq(1,5)
1648132821340:c <- seq(1,10, by==3)
1648132831613:c <- seq(1,10, by=3)
1648132946991:mean(c)
1648132964290:max(c)
1648133012414:install.packages("ggplot2")
1648133142484:library(ggplot2)
1648133538450:install.packages("readxl")
1648133552762:install.packages("readxl")
1648133693054:install.packages("readxl")
1648133761766:df_exam <-read_excel("exam_score.xlsx")
1648133793870:library(readxl)
1648133800129:df_exam <-read_excel("exam_score.xlsx")
1648133811576:install.packages("readxl")
1648133820962:install.packages("readxl")
1648133831904:install.packages("readxl")
1648133838615:library(readxl)
1648133840674:df_exam <-read_excel("exam_score.xlsx")
1648133915717:install.packages("ggplot2")
1648133921015:install.packages("readxl")
1648133930195:install.packages("readxl")
1648133940926:library(readxl)
1648133944277:df_exam <-read_excel("exam_score.xlsx")
1648133947618:View(df_exam)
1648134017190:install.packages("readxl")
1648134020455:install.packages("readxl")
1648134025004:library(readxl)
1648134027044:df_exam <-read_excel("exam_score.xlsx")
1648134030219:View(df_exam)
1648134031415:View(df_exam)
1648134084738:install.packages("readxl")
1648134088104:install.packages("readxl")
1648134104434:library(readxl)
1648134110114:df_exam <-read_excel("exam_score.xlsx")
1648134183856:install.packages("readxl")
1648134186163:install.packages("readxl")
1648134190414:library(readxl)
1648134192258:df_exam <-read_excel("exam_score.xlsx")
1648134215137:df_exam
1648134493917:df_exam <-read_excel("exam_score.xlsx", sheet = 3)
1648134500043:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134533290:df_exam
1648134538788:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134558746:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134591920:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134593967:df_exam
1648134782353:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134783330:df_exam
1648134787720:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134809942:df_exam <-read_excel("exam_score.xlsx", sheet = 1)
1648134812845:df_exam
1648134816561:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134853680:df_exam <-read_excel("exam_score.xlsx", sheet = 2)
1648134856297:df_exam
1648134889089:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1648134889857:df_exam
1648134997962:df_exam2 <- read.csv("exam_score.csv")
1648135023698:df_exam2 <- read.csv("exam_score(1).csv")
1648135066599:df_exam2 <- read.csv("exam_score(1).csv")
1648135107139:df_exam2
1648135127793:df_exam2 <- read.csv("exam_score(1).csv")
1648135184502:df_exam2 <- read.csv("exam_score.csv")
1648135192837:df_exam2
1648135253475:df_exam2 <- read.csv("exam_score.csv", encoding = 'utf.8')
1648136087761:view(df_exam)
1648136106602:View(df_exam)
1648136189536:head(df_exam,10)
1648136256250:dim(df_exam)
1648136291672:dim(df_exam) //먼저 나오는게 행, 뒤가 열
1648136291673:str(df_exam)
1648136381362:dim(df_exam) //먼저 나오는게 행, 뒤가 열
1648136381363:str(df_exam)  //구조: 이루어져 잇는것
1648136381363:summary(df_exam)
1648137009826:mpg <- as.data.frame(ggplot2::mpg)
1648137016835:mpg
1648137037371:view(mpg)
1648137041636:View(mpg)
1648137064396:dim(mpg)
1648137081265:head(mpg)
1648137384998:class(drv)
1648137412547:class(mpg$drv)
1648137506962:mpg$drv <- as.factor(mpg.drv)
1648137538339:mpg$drv <- as.factor(mpg$drv)
1648137542328:class(mpg$drv) #변수의 타입인데 mpg안에 drv타입 궁금할때 $사용
1648137583068:levels(mpg$drv)
1648137713470:#빈도 막대 그래프
1648137713470:qplot(data = mpg.x - hwy)
1648137741347:#빈도 막대 그래프
1648137741348:qplot(data = mpg, x = hwy)
1648137776248:#빈도 막대 그래프
1648137776249:qplot(data = mpg, x = hyw)
1648137916252:#빈도 막대 그래프
1648137916254:qplot(data = mpg, x = hwy)
1648137968595:mpg <- as.data.frame(ggplot2::mpg)
1648137971724:#빈도 막대 그래프
1648137971724:qplot(data = mpg, x = hwy)
1648137976620:mpg
1648138041001:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1648138044928:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1648138061625:class(drv) #변수의 타입 :class
1648138064873:mpg <- as.data.frame(ggplot2::mpg)
1648138068538:mpg <- as.data.frame(ggplot2::mpg)
1648138070209:mpg
1648138073838:View(mpg)
1648138077833:head(mpg)
1648138079722:class(drv) #변수의 타입 :class
1648138093421:View(mpg)
1648138102769:class(mpg$drv) #변수의 타입인데 mpg안에 drv타입 궁금할때 $사용
1648138106220:mpg$drv <- as.factor(mpg$drv)
1648138108503:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1648138110776:#빈도 막대 그래프
1648138110776:qplot(data = mpg, x = hwy)
1648138131448:#빈도 막대 그래프
1648138131449:gplot(data = mpg, x = hwy)
1648138194220:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648138213876:#빈도 막대 그래프
1648138213877:qplot(data = mpg, x = hwy)
1648138413376:mpg <- as.data.frame(ggplot2::mpg)
1648138416162:#빈도 막대 그래프
1648138416162:qplot(data = mpg, x = hwy)
1648138422599:install.packages("ggplot2")
1648138427480:install.packages("ggplot2")
1648138434240:mpg <- as.data.frame(ggplot2::mpg)
1648138436399:#빈도 막대 그래프
1648138436399:qplot(data = mpg, x = hwy)
1648138437602:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648138444621:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648436523372:mpg <- as.data.frame(ggplot2::mpg)
1648436527483:#빈도 막대 그래프
1648436527483:qplot(data = mpg, x = hwy)
1648436528466:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648436530879:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648612223292:#빈도 막대 그래프
1648612223293:qplot(data = mpg, x = hwy)
1648612237575:mpg$drv <- as.factor(mpg$drv)
1648612241535:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1648612294182:install.packages("ggplot2")
1648612304650:library(ggplot2)
1648612446878:mpg <- as.data.frame(ggplot2::mpg)
1648612451458:#빈도 막대 그래프
1648612451459:qplot(data = mpg, x = hwy)
1648612461078:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1648613742287:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1648613767203:levels(mpg$drv)
1648613805441:#빈도 막대 그래프
1648613805442:qplot(data = mpg, x = hwy)
1648613852519:qplot(data = mpg, x= drv, y= hwy, geom = "boxplot",colour = drv)
1648613940278:summary(hwy)
1648613949417:summary(mpg$hwy)
1648614006271:str(mpg)
1648614093221:#변수 바꿈
1648614093223:install.packagex("dplr")
1648614101086:library(dplyr)
1648614120484:#변수 바꿈
1648614120484:install.packagex("dplyr")
1648614122815:library(dplyr)
1648614130064:#변수 바꿈
1648614130064:install.packages("dplyr")
1648614135316:library(dplyr)
1648614177764:df_example <- data.frame(var1 = c(30,40,50, var2 = c(70,60,50)))
1648614184372:df_example
1648614370979:df_example <- rename(df_example, variable1 = var1)
1648614389792:df_example
1648614415614:df_example <- rename(df_example, var1 = variabler1)
1648614418263:df_example
1648614482546:df_example <- data.frame(var1 = c(30,40,50, var2 = c(70,60,50)))
1648614484623:df_example
1648614542834:df_example_sum<- df_example$var1+de_example$var2
1648614566054:df_example$sum<- df_example$var1+ de_example$var2
1648614598085:df_example <- data.frame(var1 = c(30,40,50, var2 = c(70,60,50)))
1648614600852:df_example
1648614830068:mpg$avg <- (mpg$cty +mpg$hwy)/2
1648614837521:head(mpg)
1648615004815:mpg$eval <-ifelse(mpg$avg >= 20, "pass", "fail")
1648615011285:head(mpg,20)
1648615163769:mpg$grad <- ifelse(mpg$avg >= 30, "A", ifelse(mpg$avg>=20, "B", "C"))
1648615170227:head(mpg,20)
1648885582371:install.packages("ggplot2")
1648885605550:library(ggplot2)
1648885655015:install.packages("readxl")
1648885663180:library(readxl)
1648885816480:Mindwest <- as.data.frame(ggplot2:Mindwest)
1648885840810:Mindwest <- as.data.frame(ggplot2::Mindwest)
1648885869827:mindwest <- as.data.frame(ggplot2::mindwest)
1648885886905:midwest <- as.data.frame(ggplot2::midwest)
1648885901165:midwest
1648885944854:view(midwest)
1648885951913:View(midwest)
1648885966469:head(midwest,10)
1648885980068:head(midwest)
1648886063284:class(popasian)
1648886128258:class(popasian)
1648886157147:class(country)
1648886169128:class(state)
1648886175285:class(area)
1648886191393:class(midwest$area)
1648886204002:class(midwest$country)
1648886224909:class(midwest$poptotal)
1648886378663:midwest$poptotal <-as.factor(midwest$poptotal)
1648886421961:levels(midwest$poptotal)
1648886473908:summary(midwest$state)
1648886508607:str(midwest)
1648886567159:qplot(data = midwest, x=state)
1648886694272:install.packages("dplyr")
1648886712697:install.packages("dplyr")
1648886731021:install.packages("dplyr")
1648886734321:install.packages("dplyr")
1648886737685:install.packages("dplyr")
1648886740431:install.packages("dplyr")
1648886775407:#변수 바꿈
1648886775408:library(dplyr)
1648887136081:midwest <- rename(midwest, poptotal = total)
1648887172682:midwest <- rename(midwest,total = poptotal)
1648887238172:midwest <- rename(midwest, asian = popasian)
1648887478199:#3-3번 문제
1648887478200:hist(midset$total)
1648887493083:#3-3번 문제
1648887493084:mindwest <- hist(midset$total)
1648887605523:head(state)
1648887618546:head(state,3)
1648887624512:head(prac,3)
1648887673119:#3-2번 문제
1648887673119:midwest <- rename(midwest,total = poptotal,asian = popasian)
1648887715088:#3-2번 문제
1648887715089:midwest <- rename(midwest,total = poptotal,asian = popasian)
1648887715998:#3-3번 문제
1648887715998:mindwest <- hist(midset$total)
1648887716404:str(midwest)
1648887717011:qplot(data = midwest, x=state)
1648887718264:#표로 나타내기
1648887942424:#3-3번 문제
1648887942427:midwest$percentage <- midwest$asian / midwest$total *100
1648887954025:#3-3번 문제
1648887954026:midwest$percentage <- midwest$asian / midwest$total *100
1648887969342:#3-1번 문제
1648887969342:install.packages("ggplot2")
1648887974465:install.packages("ggplot2")
1648887976722:install.packages("ggplot2")
1648887978825:library(ggplot2)
1648887981603:midwest <- as.data.frame(ggplot2::midwest)
1648887984954:midwest
1648887991302:head(midwest,3)
1648887997579:install.packages("dplyr")
1648888000964:install.packages("dplyr")
1648888003143:install.packages("dplyr")
1648888005253:#변수 이름바꿈
1648888005254:library(dplyr)
1648888007873:#3-2번 문제
1648888007874:midwest <- rename(midwest,total = poptotal,asian = popasian)
1648888011770:#3-3번 문제
1648888011770:midwest$percentage <- midwest$asian / midwest$total *100
1648888031238:hist(midwest$percentage)
1648888123064:#3-4번 문제
1648888123066:mean(midwest$percentage)
1648888279213:midwest$size <-ifelse(midwest$percentage > mean(midwest$percentage), "large","small")
1648888292909:head(midwest,5)
1648888369448:#3-5번 문제
1648888369449:table(mid$size)
1648888377187:#3-5번 문제
1648888377187:table(midwest$size)
1648888390978:qplot(midwest$size)
1648888404620:#3-1번 문제
1648888404621:install.packages("ggplot2")
1648888408110:install.packages("ggplot2")
1648888411178:library(ggplot2)
1648888414644:qplot(midwest$size)
1648888537488:library(ggplot2)
1649049157295:library(dplyr)
1649049215135:exam <- read.csv("csv_exam.csv")
1649049314770:exam <- read.csv("csv_exam.csv")
1649049374898:exam <- read.csv("csv_exam.csv")
1649049388618:exam
1649049398220:View(exam)
1649049434134:dim(exam)
1649049442347:head(exam)
1649049447877:head(exam,10)
1649049507251:exam %>%filter(class == 1)
1649049670378:exam %>filter(class!=2)
1649049675770:exam %>filter(class!==2)
1649049684122:exam %>%filter(class!=2)
1649049744756:exam %>% filter(science >= 70 | math > 80)
1649049828207:exam %>% filter (class ==1 | class ==2 |class ==3)
1649050034296:class1 <- exam %>% filter(class ==1)
1649050039498:class1
1649050111654:class2 <- exam% >%filter(class ==2)
1649050116375:class2
1649050142727:class2 <- exam %>% filter(class ==2)
1649050147102:class2
1649050160709:mean(class1)
1649050179704:mean(class1$matth)
1649050186728:mean(class1$math)
1649050200659:mean(class2$math)
1649050387536:exam %>% select(math)
1649050415318:exam %>% select(science)
1649050431131:exam %>% select(-math)
1649050670885:exam %>% filter(class ==1)
1649050702809:exam %>% filter(class ==1 %>% select(math)
1649050724888:exam %>% filter(class ==1 %>% select(id,math)
1649050747199:exam %>% filter(class ==1) %>% select(math)
1649050753398:exam %>% filter(class ==1) %>% select(id,math)
1649050999477:exam %>%
1649050999477:select(id,math) %>%
1649051008807:exam %>%
1649051008808:select(id,math) %>%
1649051008808:head
1649051051574:exam %>%
1649051051575:select(id,math) %>%
1649051051576:head
1649051114826:exam %>%
1649051114827:arrange(math)
1649051182295:#정렬(내림차순)
1649051182297:exam %>%
1649051182297:arrange(desc(math))
1649051242072:#정렬(두개의 조건)
1649051242072:exam %>%
1649051242073:arrange(desc(class),math)
1649051259221:#정렬(두개의 조건)
1649051259223:exam %>%
1649051259223:arrange(class,desc(math))
1649051561952:#변수 추가
1649051561954:exam %>%
1649051561954:mutate(total - math + english + science)
1649051635237:#변수 추가
1649051635238:exam %>%
1649051635238:mutate(total - math+english+science) %>%
1649051635239:head(10)
1649051650549:#변수 추가
1649051650549:exam %>%
1649051650549:mutate(total - math+english+science) %>%
1649051650550:head(10)
1649051681467:#변수 추가
1649051681468:exam %>%
1649051681468:mutate(avg)
1649051693507:library(dplyr)
1649051698133:exam <- read.csv("csv_exam.csv")
1649051701235:#변수 추가
1649051701235:exam %>%
1649051701235:mutate(avg)
1649051736203:#변수 추가
1649051736204:exam %>%
1649051736204:mutate(total - math +  english +science)
1649051812216:#정렬(두개의 조건)
1649051812217:exam %>%
1649051812218:arrange(class,desc(math))
1649051838099:#변수 추가
1649051838100:exam %>%
1649051838100:mutate(total - math + english + science)
1649051859603:#변수 추가
1649051859604:exam %>%
1649051859604:mutate(total = math + english + science)
1649051873693:#변수 추가
1649051873693:exam %>%
1649051873694:mutate(total = math + english + science) %>%
1649051873694:head(10)
1649051976649:exam %>%
1649051976649:mutate(total = math + english +science, mean - (math + english + science) /3) %>%
1649051976650:head(10)
1649052002639:exam %>%
1649052002641:mutate(total = math + english +science, mean = (math + english + science) /3) %>%
1649052002641:head(10)
1649052111675:exam %>%
1649052111675:mutate(test = ifelse(math >= 70, "pass", "fail")) %>%
1649052111676:head(10)
1649052234566:#변수 추가
1649052234567:# 학생 성적 탑 10
1649052234567:exam %>%
1649052234568:mutate(total = math + english + science) %>%
1649052234568:arrange(desc(total)) %>%
1649052234568:head(10)
1649052432445:exam %>%
1649052432447:summarise(mean(math))
1649052449995:exam %>%
1649052449995:summarise(math_mean =mean(math))
1649052588798:exam %>%
1649052588799:group-by(class) %>%
1649052588799:summarise(math_mean =mean(math))
1649052593481:exam %>%
1649052593481:group_by(class) %>%
1649052593482:summarise(math_mean =mean(math))
1649053076707:exam %>%
1649053076709:group_by(class) %>%
1649053076710:summarise(mean_math = mean(math),
1649053076710:sum_math = sum(math),
1649053076710:median_math = median(math),
1649053076710:n=n())
1649053370660:mpg <- as.data.frame(ggplot2::mpg)
1649053423515:Vu=iew(mpg)
1649053432079:View(mpg)
1649053498188:mpg %>%
1649053498189:group_by(manufacturer) %>%
1649053498189:summarize(city_mean = mean(city)) %>%
1649053498190:head(10)
1649053512431:mpg %>%
1649053512432:group_by(manufacturer) %>%
1649053512432:summarize(cty_mean = mean(cty)) %>%
1649053512433:head(10)
1649053563264:mpg %>%
1649053563265:group_by(manufacturer) %>%
1649053563265:summarize(cty_mean = mean(cty)) %>%
1649053563266:arrange(desc(cty_mean)) %>%
1649053563266:head(10)
1649053740729:mpg %>%
1649053740731:group_by(manufacturer,drv) %>%
1649053740731:summarize(cty_mean = mean(cty)) %>%
1649053740731:arrange(desc(cty_mean)) %>%
1649053740732:head(10)
1649053747827:mpg %>%
1649053747828:group_by(manufacturer,drv) %>%
1649053747828:summarize(cty_mean = mean(cty)) %>%
1649053747828:head(10)
1649053933871:mpg %>%
1649053933873:group-by(manufacturer) %>%
1649053933873:filter(class == "suv") %>%
1649053933873:mutate(avg = (cty +hyw) /2)
1649053939028:mpg %>%
1649053939028:group_by(manufacturer) %>%
1649053939028:filter(class == "suv") %>%
1649053939029:mutate(avg = (cty +hyw) /2)
1649053945907:mpg %>%
1649053945907:group_by(manufacturer) %>%
1649053945907:filter(class == "suv") %>%
1649053945907:mutate(avg = (cty +hwy) /2)
1649053957886:mpg %>%
1649053957888:group_by(manufacturer) %>%
1649053957888:filter(class == "suv") %>%
1649053957888:mutate(avg = (cty +hwy) /2)  %>%
1649053957888:head(10)
1649053967790:mpg %>%
1649053967791:group_by(manufacturer) %>%
1649053967791:filter(class == "suv") %>%
1649053967791:mutate(avg = (cty +hwy) /2)  %>%
1649053967792:head(30)
1649054009235:mpg %>%
1649054009237:group_by(manufacturer) %>%
1649054009237:filter(class == "suv") %>%
1649054009237:mutate(avg = (cty +hwy) /2)  %>%
1649054009238:summarise(mean_avg = mean(avg))
1649054044138:mpg %>%
1649054044139:group_by(manufacturer) %>%
1649054044139:filter(class == "suv") %>%
1649054044139:mutate(avg = (cty +hwy) /2)  %>%
1649054044140:summarise(mean_avg = mean(avg)) %>%
1649054044140:arrange(desc(mean_avg))
1649054586037:math_data <- data.frame(id - c(1,2,3,4,5), math -c(80,70,90,45))
1649054593195:math_data <- data.frame(id - c(1,2,3,4,5), math =c(80,70,90,45))
1649054600460:math_data <- data.frame(id = c(1,2,3,4,5), math =c(80,70,90,45))
1649054639442:math_data <- data.frame(id = c(1,2,3,4,5), math -c(80,70,90,45))
1649054685082:math_data <- data.frame(id = c(1,2,3,4,5), math =c(80, 70, 60, 90, 45))
1649054695043:math_data
1649054751747:science_data <- data.frame(id = c(1,2,3,4,5), sience =c(89, 80, 80, 70, 55))
1649054757468:science_data
1649054783819:total_score <- left_join(math_data, science_data, by = "id")
1649054849075:total_score
1649316207429:#변수 바꿈
1649316207430:install.packages("dplyr")
1649316216372:library(dplyr)
1649316296596:tex1 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1649316300544:test1
1649316307606:test11 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1649316309940:test1
1649316317632:test1 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1649316319183:test1
1649316355336:test2 <- data.frame(id = c(1,2,3,4,5), science = c(80,70,60,90,45))
1649316359530:test2
1649316386979:test2 <- data.frame(id = c(1,2,3,4,5), science = c(78),54,68,98,75))
1649316387468:test2
1649316397434:test2 <- data.frame(id = c(1,2,3,4,5), science = c(78,54,68,98,75))
1649316398131:test2
1649316472160:scores <- left_join(test1,test2,by"id")
1649316478761:scores <- left_join(test1,test2,by="id")
1649316486647:scores
1649316627712:class <- data.frame(id = c(1,2,3,4,5),science = c(1,1,2,2,3))
1649316643771:scorese <- left_join(scores,class,by = "id")
1649316667696:class <- data.frame(id = c(1,2,3,4,5),class = c(1,1,2,2,3))
1649316671768:scores <- left_join(scores,class,by = "id")
1649316672357:scores
1649316783328:teacher <- data.frame (class = c(1,2,3,4,5), teacher = c("iljo kim", "seongwon choi", "jungho kim", "byungsoo kim", "kangseon lee"))
1649316785950:teacher
1649316908524:score_teacher
1649316928152:scores
1649316929913:teacher
1649316952365:score_teacher <- left_join(scores, teacher, by = "class")
1649316952932:score_teacher
1649317819931:test1
1649317872994:test2 <- data.frame(id <- (6,7,8,9,10), math = c(80,78,68,98,75))
1649317890086:test2 <- data.frame(id <- c(6,7,8,9,10), math = c(80,78,68,98,75))
1649317892722:test2
1649317909023:test2 <- data.frame(id = c(6,7,8,9,10), math = c(80,78,68,98,75))
1649317910651:test2
1649317944255:all_score <- bindrow(test1, test2)
1649317972802:all_score <- bind_row(test1, test2)
1649317978726:all_score <- bind_rows(test1, test2)
1649317983843:all_score
1649318072991:test3
1649318096926:test3 <- data.frame(id = c(10,11,12,13,14,15), mathematics = c(80,78,68,98,75))
1649318109983:test3 <- data.frame(id = c(11,12,13,14,15), mathematics = c(80,78,68,98,75))
1649318110684:test3
1649318207464:test3 <- data.frame(id = c(11,12,13,14,15), mathmatics = c(80,78,68,98,75))
1649318208655:test3
1649318209535:test3 <-rename(test3,mathmatics)
1649318212442:test3
1649318225460:test3 <-rename(test3,math = mathmatics)
1649318225929:test3
1649318263801:all_score <- bind_rows(test1,test2,test3)
1649318268190:all_score
1649319363197:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1649319381555:dim(housing.df)
1649320435808:head(housing.df)
1649321723072:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1649321750822:housing.df[5,1:10]
1649321780457:housing.df[5,c(1:2,4,8:10)]
1649321796791:housing.df$TOTAL.VALUE
1649321816423:mean(hosing.df$TOTAL.VALUE)
1649321821593:mean(housing.df$TOTAL.VALUE)
1649321832294:summary(housing.df)
1649494899434:#3-3번 문제
1649494899435:midwest$percentage <- midwest$asian / midwest$total *100
1649494900943:hist(midwest$percentage)
1649494946710:#3-5번 문제
1649494946711:table(midwest$size)
1649494947360:qplot(midwest$size)
1649494953945:library(ggplot2)
1649494955808:#3-1번 문제
1649494955808:install.packages("ggplot2")
1649494959401:install.packages("ggplot2")
1649494964521:library(ggplot2)
1649494967368:qplot(midwest$size)
1649495107162:midwest$poptotal <-as.factor(midwest$poptotal)
1649495107622:levels(midwest$poptotal)
1649495114868:install.packages("dplyr")
1649495118757:#변수 이름바꿈
1649495118758:library(dplyr)
1649495118766:install.packages("dplyr")
1649495122215:install.packages("dplyr")
1649495125273:install.packages("dplyr")
1649495128259:#3-2번 문제
1649495128259:midwest <- rename(midwest,total = poptotal,asian = popasian)
1649495130864:#3-3번 문제
1649495130865:midwest$percentage <- midwest$asian / midwest$total *100
1649495132284:hist(midwest$percentage)
1649503834129:View(midwest)
1649503848249:str(midwest)
1649503943273:#3-3번 문제
1649503943274:midwest$percentage <- midwest$asian / midwest$total *100
1649503943745:hist(midwest$percentage)
1649504000947:install.packages("dplyr")
1649504006489:#변수 이름바꿈
1649504006489:library(dplyr)
1649504006757:install.packages("dplyr")
1649504009296:install.packages("dplyr")
1649504014785:#3-3번 문제
1649504014786:midwest$percentage <- midwest$asian / midwest$total *100
1649504016307:hist(midwest$percentage)
1649504063139:#3-4번 문제
1649504063140:mean(midwest$percentage)
1649504063604:midwest$size <-ifelse(midwest$percentage > mean(midwest$percentage), "large","small")
1649504064152:head(midwest,5)
1649504136009:summary(midwest)
1649504176967:str(midwest)
1649504283456:#3-5번 문제
1649504283458:table(midwest$size)
1649504284050:qplot(midwest$size)
1649504286968:#3-1번 문제
1649504286969:install.packages("ggplot2")
1649504291116:library(ggplot2)
1649504294209:qplot(midwest$size)
1649504462325:#3-4번 문제
1649504462326:asian_mean(midwest$percentage) #평균값 파생변수에 저장
1649504477426:install.packages("dplyr")
1649504481151:library(dplyr)
1649504481244:install.packages("dplyr")
1649504485244:install.packages("dplyr")
1649504488421:install.packages("dplyr")
1649504490129:install.packages("dplyr")
1649504492134:#3-4번 문제
1649504492135:asian_mean(midwest$percentage) #평균값 파생변수에 저장
1649504497008:#3-4번 문제
1649504497008:mean(midwest$percentage) #평균값 파생변수에 저장
1649504503490:midwest$size <-ifelse(midwest$percentage > mean(midwest$percentage), "large","small")
1649504504637:head(midwest,5)
1649504571523:head(midwest,3)
1649504578812:clear
1649504634724:head(midwest,3)
1649504692430:View(midwest)
1649504819039:str(midwest)
1649504887145:head(midwest,3) #상위3개로는
1649504969551:dim(midwest)
1649647259800:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1649647262529:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1649647271303:head(housing.df)
1649647272227:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1649647273433:housing.df[5,1:10]
1649647273823:housing.df[5,c(1:2,4,8:10)]
1649647274278:housing.df$TOTAL.VALUE
1649647274721:mean(housing.df$TOTAL.VALUE)
1649647959708:summary(housing.df)
1649649037183:s< - sample(row.names(holusing.df),  5)#row.names는 일련번호
1649649048320:s<- sample(row.names(holusing.df),  5)#row.names는 일련번호
1649649061889:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1649649077128:s
1649649098555:housing.df[s,]
1649649265358:#전체값 나타내기
1649649265360:#prob=확률
1649649265360:s <- sample(row.names(hosuing.df), 5 , prob = ifelse(housing.df $ROOM >10, 0.9, 0.01))
1649649283315:#전체값 나타내기
1649649283315:#prob=확률
1649649283316:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOM >10, 0.9, 0.01))
1649649319741:#전체값 나타내기
1649649319742:#prob=확률
1649649319742:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOMS >10, 0.9, 0.01))
1649649335095:s
1649649351655:housing.df[s,]
1649649840143:names(housing.df)
1649649879465:#어떠어떠한 함수들이 있는지 확인
1649649879467:t(t(names(housing.df)))
1649649973421:#transpose: 1부터 14번까지 뒤집어서 보여주기
1649649973423:#colnames: 변수이름을 바꿀 때
1649649973424:#class는 데이터의 데이터 타입 보고싶을 때
1649649973424:class(housing.df$REMODEL)
1649650029088:levels(housing.df[,14])
1649650116713:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1649650116715:levels(as.factor(housing.df[,14]))
1649650138762:class(housing.df[,1])
1649650311274:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1649775407715:install.packages("ggplot2")
1649775429674:library(ggplot2)
1649775470947:midwest <- as.data.frame(ggplot2::midwest)
1649775478546:midwest
1649775613294:install.packages("dplyr")
1649775617210:install.packages("dplyr")
1649775628013:library(dplyr)
1649811973512:midwest <- midwest %>%
1649811973514:mutate(total = ((poptotal- popadults)/poptotal*100))
1649811995998:mutate(total = ((poptotal- popadults)/poptotal*100)
1649812020520:midwest <- midwest %>%
1649812034492:midwest <- midwest %>%
1649812037606:mutate( = ((popchild = padults)/poptotal*100)
1649812042086:midwest <- midwest %>%
1649812051962:midwest <- midwest %>%
1649812054444:mutate( = ((popchild = padults)/poptotal*100)
1649812071210:midwest <- midwest %>%
1649812071212:mutate((popchild = padults)/poptotal*100)
1649812083863:midwest <- midwest %>%
1649812083864:mutate((popchild = popdults)/poptotal*100)
1649812126029:midwest <- midwest %>%
1649812126031:mutate(popchild =(poptotal- popdults)/poptotal*100)
1649812135159:midwest <- midwest %>%
1649812135160:mutate(popchild =(poptotal- popadults)/poptotal*100)
1649824732281:midwest %>%
1649824732283:arrange(desc(popchild)) %>%
1649824732283:head(5)
1649824755991:midwest %>%
1649824755992:arrange(desc(popchild))
1649824758856:midwest %>%
1649824758857:arrange(desc(popchild))
1649824759325:head(5)
1649825019762:midwest %>%
1649825019763:arrange(desc(popchild)) %>% #내림차순
1649825019763:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825035935:midwest %>%
1649825035937:arrange(desc(popchild)) %>% #내림차순
1649825035937:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825035938:head(5)
1649825126878:midwest %>%
1649825126879:arrange(desc(popchild)) %>% #내림차순
1649825126880:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825126880:head(5)
1649825131983:midwest %>%
1649825131984:arrange(desc(popchild)) %>% #내림차순
1649825131984:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825131984:head(5)
1649825212987:midwest %>%
1649825212988:arrange(desc(popchild)) %>% #내림차순
1649825212988:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825284252:midwest <- midwest %>%
1649825284253:mutate(popchild =(poptotal- popadults)/poptotal*100)
1649825291731:install.packages("dplyr")
1649825296916:library(dplyr)
1649825299861:midwest %>%
1649825299862:arrange(desc(popchild)) %>% #내림차순
1649825299862:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825311659:midwest %>%
1649825311659:arrange(desc(popchild)) %>% #내림차순
1649825311660:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825311660:head(5)
1649825323762:install.packages("ggplot2")
1649825327598:library(ggplot2)
1649825330229:midwest <- as.data.frame(ggplot2::midwest)
1649825332642:midwest
1649825336429:midwest %>%
1649825336429:arrange(desc(popchild)) %>% #내림차순
1649825336430:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825336430:head(5)
1649825490011:midwest <- midwest %>%
1649825490013:mutate(popchild =(poptotal- popadults)/poptotal*100)
1649825493324:midwest %>%
1649825493324:arrange(desc(popchild)) %>% #내림차순
1649825493325:select(county,popchild) %>% #country와   popchild컬럼 확인
1649825493325:head(5)
1649826373472:midwest %>%
1649826373472:arrange(desc(popchild)) %>% #내림차순
1649826373473:head(5)
1649826592107:midwest %>%
1649826592109:arrange(desc(popchild)) %>% #내림차순
1649826592109:select(county,popchild) %>% #country와   popchild컬럼 확인
1649826592109:head(5)
1649826711848:midwest <- midwest %>%
1649826711850:mutate(popchild =(poptotal- popadults)/poptotal*100)
1649826931514:midwest %>%
1649826931516:arrange(desc(popchild)) %>% #내림차순
1649826931516:# select(county,popchild) %>% #country와   popchild컬럼 확인
1649826931517:head(5)
1649827995309:mutate(grade =ifelse(popchild> 40,'large',ifelse(popchild>30),'middle',Small)
1649828110437:midwest <- midwest %>%
1649828110440:mutate(grade =ifelse(popchild> 40,'large',ifelse(popchild>30,'middle',Small)))
1649828140782:midwest <- midwest %>%
1649828140783:mutate(grade =ifelse(popchild>= 40,'large',ifelse(popchild>=30,'middle',Small)))
1649828157758:midwest %>%
1649828157759:arrange(desc(popchild)) %>% #내림차순
1649828157759:select(county,popchild) %>% #country와   popchild컬럼 확인
1649828157759:head(5)
1649828159712:midwest <- midwest %>%
1649828159713:mutate(grade =ifelse(popchild>= 40,'large',ifelse(popchild>=30,'middle',Small)))
1649828184963:midwest <- midwest %>%
1649828184964:mutate(grade =ifelse(popchild>= 40,'large',ifelse(popchild>=30,'middle','small')))
1649828942152:midwest <- midwest %>%
1649828942154:mutate(popasian_ratio=(popasian/poptotal)*100)
1649828943012:midwest %>%
1649828943012:arrange(popasian_ratio) %>%
1649828943012:select(state, county, popasian_ratio) %>%
1649828943013:head(10)
1650079021831:install.packages("ggplot2")
1650079024414:library(ggplot2)
1650079028023:library(ggplot2)
1650079030198:midwest <- as.data.frame(ggplot2::midwest)
1650079032047:midwest
1650079033158:install.packages("dplyr")
1650079037787:install.packages("dplyr")
1650079042964:library(dplyr)
1650079047352:midwest <- midwest %>%
1650079047353:mutate(popchild =(poptotal- popadults)/poptotal*100)
1650079066177:midwest %>%
1650079066177:arrange(desc(popchild)) %>% #내림차순
1650079066177:select(county,popchild) %>% #country와   popchild컬럼 확인
1650079066178:head(5)
1650079071000:midwest <- midwest %>%
1650079071001:mutate(grade =ifelse(popchild>= 40,'large',ifelse(popchild>=30,'middle','small')))
1650079079435:midwest <- midwest %>%
1650079079436:mutate(popasian_ratio=(popasian/poptotal)*100)
1650079119660:midwest %>%
1650079119660:arrange(popasian_ratio) %>%
1650079119660:select(state, county, popasian_ratio) %>%
1650079119660:head(10)
1650251930746:xtotoal
1650251938837:install.packages("ggplot2")
1650251941899:library(ggplot2)
1650251946191:install.packages("readxl")
1650251949744:library(readxl)
1650251954148:#변수 바꿈
1650251954149:install.packages("dplyr")
1650251958234:install.packages("dplyr")
1650251960819:library(dplyr)
1650251969960:mpg <- as.data.frame(ggplot2::mpg)
1650251984946:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650251987608:xtotoal
1650251996634:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650252021409:total_score <- left_join(math_data, science_data, by = "id")
1650252022261:total_score
1650252022865:test1 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1650252023377:test1
1650252023852:test2 <- data.frame(id = c(1,2,3,4,5), science = c(78,54,68,98,75))
1650252024296:test2
1650252024762:scores <- left_join(test1,test2,by="id")
1650252025132:scores
1650252025506:class <- data.frame(id = c(1,2,3,4,5),class = c(1,1,2,2,3))
1650252025956:scores <- left_join(scores,class,by = "id")
1650252026320:scores
1650252026779:teacher <- data.frame (class = c(1,2,3,4,5), teacher = c("iljo kim", "seongwon choi", "jungho kim", "byungsoo kim", "kangseon lee"))
1650252027235:teacher
1650252027628:score_teacher <- left_join(scores, teacher, by = "class")
1650252028125:score_teacher
1650252028728:scores
1650252029500:teacher
1650252029979:test1
1650252030355:test2 <- data.frame(id = c(6,7,8,9,10), math = c(80,78,68,98,75))
1650252030635:test2
1650252030958:all_score <- bind_rows(test1, test2)
1650252031381:all_score
1650252031734:test3 <- data.frame(id = c(11,12,13,14,15), mathmatics = c(80,78,68,98,75))
1650252032038:test3
1650252032369:# 변수 이름바꾸기
1650252032369:test3 <-rename(test3,math = mathmatics)
1650252032688:test3
1650252033016:all_score <- bind_rows(test1,test2,test3)
1650252033297:all_score
1650252033632:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650252033996:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1650252034348:head(housing.df)
1650252034733:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1650252035055:housing.df[5,1:10]
1650252035407:housing.df[5,c(1:2,4,8:10)]
1650252035734:housing.df$TOTAL.VALUE
1650252036066:mean(housing.df$TOTAL.VALUE)
1650252036417:summary(housing.df)
1650252036815:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1650252037191:s
1650252037557:housing.df[s,]
1650252037908:#전체값 나타내기
1650252037909:#prob=확률
1650252037909:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOMS >10, 0.9, 0.01))
1650252038274:s
1650252038662:housing.df[s,]
1650252039023:names(housing.df)
1650252039402:#어떠어떠한 함수들이 있는지 확인
1650252039402:t(t(names(housing.df)))
1650252039774:#transpose: 1부터 14번까지 뒤집어서 보여주기
1650252039775:#colnames: 변수이름을 바꿀 때
1650252039775:#class는 데이터의 데이터 타입 보고싶을 때
1650252039775:class(housing.df$REMODEL)
1650252040115:levels(housing.df[,14])
1650252040454:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1650252040454:levels(as.factor(housing.df[,14]))
1650252040821:class(housing.df[,1])
1650252041404:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252086612:xtotoal
1650252089448:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252109412:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650252111918:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1650252127679:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252128290:xtotoal
1650252158163:mpg <- as.data.frame(ggplot2::mpg)
1650252160884:View(mpg)
1650252170560:mpg %>%
1650252170562:group_by(manufacturer) %>%
1650252170562:filter(class == "suv") %>%
1650252170562:mutate(avg = (cty +hwy) /2)  %>%
1650252170562:summarise(mean_avg = mean(avg)) %>%
1650252170563:arrange(desc(mean_avg))
1650252171233:# 데이터 프레임에 수학 1,2,3,4,5 성적만들기
1650252171233:math_data <- data.frame(id = c(1,2,3,4,5), math =c(80, 70, 60, 90, 45))
1650252171695:math_data
1650252172060:#데이터 프레임에 과학 1,2,3,4,5 성적만들기
1650252172060:science_data <- data.frame(id = c(1,2,3,4,5), sience =c(89, 80, 80, 70, 55))
1650252172431:science_data
1650252172794:total_score <- left_join(math_data, science_data, by = "id")
1650252173148:total_score
1650252173490:test1 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1650252173844:test1
1650252174155:test2 <- data.frame(id = c(1,2,3,4,5), science = c(78,54,68,98,75))
1650252174376:test2
1650252174593:scores <- left_join(test1,test2,by="id")
1650252174846:scores
1650252175049:class <- data.frame(id = c(1,2,3,4,5),class = c(1,1,2,2,3))
1650252175353:scores <- left_join(scores,class,by = "id")
1650252175633:scores
1650252175921:teacher <- data.frame (class = c(1,2,3,4,5), teacher = c("iljo kim", "seongwon choi", "jungho kim", "byungsoo kim", "kangseon lee"))
1650252176184:teacher
1650252177570:score_teacher <- left_join(scores, teacher, by = "class")
1650252178051:score_teacher
1650252179015:scores
1650252179182:teacher
1650252179367:test1
1650252179765:test2 <- data.frame(id = c(6,7,8,9,10), math = c(80,78,68,98,75))
1650252179921:test2
1650252180099:all_score <- bind_rows(test1, test2)
1650252180245:all_score
1650252180411:test3 <- data.frame(id = c(11,12,13,14,15), mathmatics = c(80,78,68,98,75))
1650252180528:test3
1650252180835:# 변수 이름바꾸기
1650252180836:test3 <-rename(test3,math = mathmatics)
1650252180984:test3
1650252181156:all_score <- bind_rows(test1,test2,test3)
1650252181329:all_score
1650252181609:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650252182019:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1650252182216:head(housing.df)
1650252182553:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1650252182779:housing.df[5,1:10]
1650252183032:housing.df[5,c(1:2,4,8:10)]
1650252183249:housing.df$TOTAL.VALUE
1650252183349:mean(housing.df$TOTAL.VALUE)
1650252183777:summary(housing.df)
1650252183941:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1650252184097:s
1650252184234:housing.df[s,]
1650252184411:#전체값 나타내기
1650252184411:#prob=확률
1650252184412:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOMS >10, 0.9, 0.01))
1650252184565:s
1650252185002:housing.df[s,]
1650252185173:names(housing.df)
1650252185473:#어떠어떠한 함수들이 있는지 확인
1650252185474:t(t(names(housing.df)))
1650252185854:#transpose: 1부터 14번까지 뒤집어서 보여주기
1650252185855:#colnames: 변수이름을 바꿀 때
1650252185855:#class는 데이터의 데이터 타입 보고싶을 때
1650252185855:class(housing.df$REMODEL)
1650252186066:levels(housing.df[,14])
1650252186462:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1650252186462:levels(as.factor(housing.df[,14]))
1650252186894:class(housing.df[,1])
1650252187264:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252260930:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252283401:install.packages("ggplot2")
1650252286029:install.packages("ggplot2")
1650252289650:library(ggplot2)
1650252290562:install.packages("readxl")
1650252292715:library(readxl)
1650252292789:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1650252292804:df_exam
1650252294073:df_exam2 <- read.csv("exam_score.csv")
1650252298932:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1650252299997:df_exam
1650252300864:df_exam2 <- read.csv("exam_score.csv")
1650252314499:df_exam2
1650252315322:View(df_exam)
1650252315976:head(df_exam,10) #앞에서 부터 데이터 확인
1650252316333:tail(df_exam)
1650252316674:dim(df_exam) #먼저 나오는게 행, 뒤가 열
1650252316937:str(df_exam)  #구조: 이루어져 잇는것
1650252317084:summary(df_exam)
1650252317253:mpg <- as.data.frame(ggplot2::mpg)
1650252317379:mpg
1650252317499:View(mpg)
1650252317745:dim(mpg)
1650252317884:head(mpg)
1650252318085:class(drv) #변수의 타입 :class
1650252318314:class(mpg$drv) #변수의 타입인데 mpg안에 drv타입 궁금할때 $사용
1650252318424:mpg$drv <- as.factor(mpg$drv)
1650252318547:levels(mpg$drv) #levels: 어떤 범주로 이루어져 있는지
1650252318659:summary(mpg$hwy)
1650252318790:levels(mpg$drv)
1650252318894:str(mpg)
1650252319021:#빈도 막대 그래프
1650252319021:qplot(data = mpg, x = hwy)
1650252319709:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1650252319865:qplot(data = mpg, x= drv, y= hwy, geom = "boxplot",colour = drv)
1650252320168:#변수 바꿈
1650252320168:install.packages("dplyr")
1650252324474:install.packages("dplyr")
1650252327824:install.packages("dplyr")
1650252330380:install.packages("dplyr")
1650252332292:library(dplyr)
1650252332302:df_example <- data.frame(var1 = c(30,40,50, var2 = c(70,60,50)))
1650252332303:df_example
1650252332313:df_example <- rename(df_example, var1 = variabler1)
1650252333678:df_example
1650252334956:df_example$sum<- df_example$var1+ de_example$var2
1650252335623:mpg$avg <- (mpg$cty +mpg$hwy)/2
1650252336040:head(mpg)
1650252336558:mpg$eval <-ifelse(mpg$avg >= 20, "pass", "fail")
1650252337376:head(mpg,20)
1650252337599:mpg$grad <- ifelse(mpg$avg >= 30, "A", ifelse(mpg$avg>=20, "B", "C"))
1650252338039:head(mpg,20)
1650252338213:library(dplyr)
1650252338431:exam <- read.csv("csv_exam.csv")
1650252338772:exam
1650252338924:View(exam)
1650252346160:dim(exam)
1650252346567:head(exam,10)
1650252347173:#exam데이터에서 필터로 걸러내 1반 클래스만 선택
1650252347174:exam %>%filter(class == 1)
1650252347500:exam %>%filter(class!=2)
1650252347688:#science가 70이상이거나 math가 80이상인 것들
1650252347688:exam %>% filter(science >= 70 | math > 80)
1650252347884:exam %>% filter (class ==1 | class ==2 |class ==3)
1650252348190:#class중 1반, 3반, 5반 모두 골라낸다.
1650252348191:exam %>% filter(class %in% c(1,3,5))
1650252348389:#class1에 전체 exam에서 1반만 골라서 지정
1650252348390:class1 <- exam %>% filter(class ==1)
1650252348746:class1
1650252348922:class2 <- exam %>% filter(class ==2)
1650252349006:class2
1650252349158:mean(class1$math)
1650252349405:mean(class2$math)
1650252349570:#수학만 고르기
1650252349570:exam %>% select(math)
1650252349827:exam %>% select(science)
1650252350166:#수학, 영어 빼고 나머지 과목들
1650252350167:exam %>% select(-math,-english)
1650252350350:#함수들 이어붙이기
1650252350350:exam %>%
1650252350351:filter(class ==1) %>%
1650252350351:select(id,math)
1650252350736:exam %>%
1650252350737:select(id,math) %>%
1650252350737:head
1650252351149:#정렬(오름차순)
1650252351149:exam %>%
1650252351150:arrange(math)
1650252351508:#정렬(내림차순)
1650252351509:exam %>%
1650252351509:arrange(desc(math))
1650252351961:#정렬(두개의 조건)
1650252351961:exam %>%
1650252351962:arrange(class,desc(math))
1650252352344:#변수 추가
1650252352344:# 학생 성적 탑 10
1650252352345:exam %>%
1650252352345:mutate(total = math + english + science) %>%
1650252352345:arrange(desc(total)) %>%
1650252352346:head(10)
1650252352488:#국영수 평균 구하기
1650252352489:exam %>%
1650252352489:mutate(total = math + english +science, mean = (math + english + science) /3) %>%
1650252352489:head(10)
1650252352799:exam %>%
1650252352800:mutate(test = ifelse(math >= 70, "pass", "fail")) %>%
1650252352800:head(10)
1650252352923:#집단별 요약하기
1650252352923:exam %>%
1650252352923:summarise(math_mean =mean(math))
1650252353195:#집단별 요약하기인데 업그레이드 버전
1650252353195:#각 반별 평균
1650252353195:exam %>%
1650252353196:group_by(class) %>%
1650252353196:summarise(math_mean =mean(math))
1650252353678:exam %>%
1650252353679:group_by(class) %>%
1650252353679:summarise(mean_math = mean(math),
1650252353680:sum_math = sum(math),
1650252353680:median_math = median(math),
1650252353680:n=n())
1650252353984:mpg <- as.data.frame(ggplot2::mpg)
1650252354153:View(mpg)
1650252354445:mpg %>%
1650252354445:group_by(manufacturer,drv) %>%
1650252354446:summarize(cty_mean = mean(cty)) %>%
1650252354446:head(10)
1650252354709:mpg %>%
1650252354709:group_by(manufacturer) %>%
1650252354710:filter(class == "suv") %>%
1650252354710:mutate(avg = (cty +hwy) /2)  %>%
1650252354710:summarise(mean_avg = mean(avg)) %>%
1650252354710:arrange(desc(mean_avg))
1650252354970:# 데이터 프레임에 수학 1,2,3,4,5 성적만들기
1650252354971:math_data <- data.frame(id = c(1,2,3,4,5), math =c(80, 70, 60, 90, 45))
1650252355216:math_data
1650252355328:#데이터 프레임에 과학 1,2,3,4,5 성적만들기
1650252355328:science_data <- data.frame(id = c(1,2,3,4,5), sience =c(89, 80, 80, 70, 55))
1650252355454:science_data
1650252355578:total_score <- left_join(math_data, science_data, by = "id")
1650252355712:total_score
1650252355829:test1 <- data.frame(id = c(1,2,3,4,5), math = c(80,70,60,90,45))
1650252355959:test1
1650252356070:test2 <- data.frame(id = c(1,2,3,4,5), science = c(78,54,68,98,75))
1650252356214:test2
1650252356329:scores <- left_join(test1,test2,by="id")
1650252356450:scores
1650252356670:class <- data.frame(id = c(1,2,3,4,5),class = c(1,1,2,2,3))
1650252356947:scores <- left_join(scores,class,by = "id")
1650252357093:scores
1650252357252:teacher <- data.frame (class = c(1,2,3,4,5), teacher = c("iljo kim", "seongwon choi", "jungho kim", "byungsoo kim", "kangseon lee"))
1650252357414:teacher
1650252357568:score_teacher <- left_join(scores, teacher, by = "class")
1650252357733:score_teacher
1650252357870:scores
1650252358050:teacher
1650252358348:test1
1650252358524:test2 <- data.frame(id = c(6,7,8,9,10), math = c(80,78,68,98,75))
1650252358768:test2
1650252358920:all_score <- bind_rows(test1, test2)
1650252359018:all_score
1650252359150:test3 <- data.frame(id = c(11,12,13,14,15), mathmatics = c(80,78,68,98,75))
1650252359272:test3
1650252359405:# 변수 이름바꾸기
1650252359406:test3 <-rename(test3,math = mathmatics)
1650252359652:test3
1650252359970:all_score <- bind_rows(test1,test2,test3)
1650252360133:all_score
1650252360299:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650252360431:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1650252360609:head(housing.df)
1650252360752:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1650252360887:housing.df[5,1:10]
1650252361007:housing.df[5,c(1:2,4,8:10)]
1650252361136:housing.df$TOTAL.VALUE
1650252361280:mean(housing.df$TOTAL.VALUE)
1650252361517:summary(housing.df)
1650252361616:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1650252361733:s
1650252361860:housing.df[s,]
1650252362002:#전체값 나타내기
1650252362002:#prob=확률
1650252362002:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOMS >10, 0.9, 0.01))
1650252362084:s
1650252362230:housing.df[s,]
1650252362573:names(housing.df)
1650252362786:#어떠어떠한 함수들이 있는지 확인
1650252362786:t(t(names(housing.df)))
1650252362953:#transpose: 1부터 14번까지 뒤집어서 보여주기
1650252362953:#colnames: 변수이름을 바꿀 때
1650252362954:#class는 데이터의 데이터 타입 보고싶을 때
1650252362954:class(housing.df$REMODEL)
1650252363182:levels(housing.df[,14])
1650252363446:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1650252363447:levels(as.factor(housing.df[,14]))
1650252363570:class(housing.df[,1])
1650252363723:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650252363944:xtotoal(xtotal,10)
1650252364084:xtotql$BeDROOMS[1:5]
1650253897863:row.to missing <- sample(row.names(housing.df),10)
1650253912386:rows.to missing <- sample(row.names(housing.df),10)
1650253943898:row.to.missing
1650253955468:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1650253958215:rows.to missing <- sample(row.names(housing.df),10)
1650253969610:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650253973710:rows.to missing <- sample(row.names(housing.df),10)
1650254019208:housing.df[row.to.missing]$BEDROOMS <-NA
1650254025497:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1650254025498:levels(as.factor(housing.df[,14]))
1650254028398:class(housing.df[,1])
1650254028872:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650254102156:housing.df[5043,]
1650254117724:xtotal$BEDROOMS[1:5]
1650254123050:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650254140424:summary(housing.df$BEDROOMS)
1650254229182:housing.df[rows.to.missing,]$BEDROOMS <-median(housing.df$BEDROOMS)
1650254245010:housing.df[5043,]
1650254246528:summary(housing.df$BEDROOMS)
1650254248219:housing.df[rows.to.missing,]$BEDROOMS <-median(housing.df$BEDROOMS)
1650254264277:medain(housing.df$BEDROOMS)
1650254277311:median(housing.df$BEDROOMS)
1650254283802:housing.df[row.to.missing]$BEDROOMS <-NA
1650254288429:row.to.missing
1650254290031:housing.df[row.to.missing]$BEDROOMS <-NA
1650254292327:housing.df[5043,]
1650254313283:housing.df[rows.to.missing,]$BEDROOMS <-median(housing.df$BEDROOMS,na.rm =TRUE)
1650254314121:median(housing.df$BEDROOMS)
1650254353845:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1650254354688:xtotal(xtotal,10)
1650254355125:xtotal$BEDROOMS[1:5]
1650254355587:xtotal <- as.data.frame(xtotal)
1650254356359:total <- xtotal[,-4]
1650254356803:head(xtotal)
1650254357163:rows.to missing <- sample(row.names(housing.df),10)
1650254357565:row.to.missing
1650254357980:housing.df[row.to.missing]$BEDROOMS <-NA
1650254358507:housing.df[5043,]
1650254359012:summary(housing.df$BEDROOMS)
1650254359472:housing.df[rows.to.missing,]$BEDROOMS <-median(housing.df$BEDROOMS,na.rm =TRUE)
1650254359858:median(housing.df$BEDROOMS)
1650254442133:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650254462542:housing.df
1650254490872:View(housing.df)
1650254869109:rows.to missing <- sample(row.names(housing.df),10)
1650254877459:rows.to.missing <- sample(row.names(housing.df),10)
1650254879692:row.to.missing
1650254892891:rows.to.missing <- sample(row.names(housing.df),10)
1650254893539:row.to.missing
1650254894222:housing.df[row.to.missing]$BEDROOMS <-NA
1650426580747:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426625101:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1650426629296:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1650426631240:head(housing.df)
1650426632141:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1650426634568:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426665681:housing.df
1650426668158:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426676924:housing.df
1650426679955:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426790049:valid.rows <- setdiff(rownames(housing.df),train.rows)
1650426793388:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426795089:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1650426802199:housing.df[s,]
1650426875126:housing.df <- as.data.frame(ggplot2::housing.df)
1650427286740:pred <- predict (reg, newdata = valid.data)
1650427338956:housing.df
1652940391139:install.packages("AppliacnceShipments")
1652940440657:library(ApplianceShipments)
1652940616013:ApplianceShipments.df <-read.csv("ApplianceShipments.csv")
1653008333416:ApplianceShipments.df <-read.csv("ApplianceShipments.csv")
1653009404278:Amtrak.df <- read.csv("Amtrak.csv")
1653009427663:Amtrak.df <- read.csv("Amtrak.csv")
1653009463558:View(Amtrak.df)
1653009466289:Amtrak.df <- read.csv("Amtrak.csv")
1653009466939:View(Amtrak.df)
1653009750510:Amtrak.df <- read.csv("Amtrak.csv")
1653009752188:View(Amtrak.df)
1653009906038:Amtrak.df <- read.csv("Amtrak.csv")
1653009906879:View(Amtrak.df)
1653010145964:Amtrak.df <- read.csv("Amtrak.csv")
1653010146981:View(Amtrak.df)
1653010224672:install.packages("forecast")
1653010313396:library(forecast)
1653010385982:ridership.ts <-ts(Amtrak.df$ridership, start = c(1991,1), end = c(2004,3), freq =12)
1653010411194:ridership.ts <-ts(Amtrak.df$Ridership, start = c(1991,1), end = c(2004,3), freq =12)
1653010424618:ridership.ts
1653010496723:plot(ridership.ts, xlab ="year", ylab = "ridership(in 000s)", ylim =c(1300,2300))
1653010664177:housing.df <- read.csv("BostonHousing.csv")
1653010673157:view(housing.df)
1653010679943:Vxiew(housing.df)
1653010682868:View(housing.df)
1653010786771:plot(housing.df$MEDV ~ housing.df$LSTAT, clab ="MEDV", ylab = "LAST")
1653010850964:plot(housing.df$MEDV ~ housing.df$LSTAT, xlab ="MEDV", ylab = "LAST")
1653010858993:plot(housing.df$MEDV ~ housing.df$LSTAT, xlab ="MEDV", ylab = "LAST")
1653010897358:plot(housing.df$MEDV ~ housing.df$LSTAT, xlab ="LSTAT", ylab = "MEDV")
1653010937509:library(ggplot2)
1653010987811:ggplot(housing.df) + geom_point(aes(x = LAST, y = MEDV),colour = "navy", alpha = 0.7)
1653011032842:ggplot(housing.df) + geom_point(aes(x = LSTAT, y = MEDV),colour = "navy", alpha = 0.7)
1653011227169:data.for.plot <- aggregate(housing.df$MEDV, by = list(housing.df$CHAS), FUN = mean)
1653011228638:data.for.plot
1653011377752:library(ggplot2)
1653011378463:ggplot(data = mpg, aes(x=city, y=hwy)) + geom_point()
1653011561074:ggplot(housing.df) + geom_point(aes(x=city,y=hwy), colour ="navy")
1653011568603:library(ggplot2)
1653011614067:ggplot(mpg.df) + geom_point(aes(x=city,y=hwy), colour ="navy")
1653011724871:ggplot(data=mpg, aes(x=cty, y=hwy)) + geom_point()
1653011768655:ggplot(data=mpg) +geom_point(aes(x=cty, y=hwy))
1653011779946:ggplot(data=mpg) +geom_point(aes(x=cty, y=hwy),colour = "navy")
1653011872592:ggplot(data = midwest), aes(x=poptotal, y=popasian)) + geom_point()+xlim(0,500000)+ylim(0,10000)
1653011882741:ggplot(data = midwest, aes(x=poptotal, y=popasian)) + geom_point()+xlim(0,500000)+ylim(0,10000)
1653011972597:library(dplyr)
1653011979496:mpg %>% filter(class == "suv") %>% group_by(manufacturer) %>% summarise(cty_mean = mean(cty)) %>% arrange(desc(cty_mean)) %>% head(5) ->df
1653011981481:ggplot(data = df, aes(x= reorder(manufacturer,-cty_mean),y=cty_mean))+geom_col()
1653012010716:ggplot(data = mpg, aes(class)) + geom_bar()
1653012208814:ApplianceShipments.df <- read.csv("ApplianceShipments.csv")
1653012272726:ApplianceShipments.df <- read.csv("ApplianceShipments.csv")
1653012290705:plot(ridership.ts, xlab ="year", ylab = "ridership(in 000s)", ylim =c(1300,2300))
1653012466808:plot(appliance_ts, main ="ApplianceShipments", xlab = "Year", ylab = "Shipments", ylim = c(3800,5100))
1653012481897:appliance_ts = ts(appliance_data$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653012537312:library("forcast")
1653012542927:library("forecast")
1653012545250:ApplianceShipments.df <- read.csv("ApplianceShipments.csv")
1653012546734:appliance_ts = ts(appliance_data$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653012631548:appliance_ts = ts(appliance.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653012651509:appliance_ts = ts(applianceShipments.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653012677038:appliance_ts = ts(ApplianceShipments.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653012681240:plot(appliance_ts, main ="ApplianceShipments", xlab = "Year", ylab = "Shipments", ylim = c(3800,5100))
1653012777055:plot(appliance_ts, main = "Appliance Shipments", xlab = "Year", ylab = "Shipments", ylim = c(3500,5000))
1653027418937:library("forecast")
1653027420048:ApplianceShipments.df <- read.csv("ApplianceShipments.csv")
1653027420626:appliance_ts = ts(ApplianceShipments.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653027423413:plot(appliance_ts, main = "Appliance Shipments", xlab = "Year", ylab = "Shipments", ylim = c(3500,5000))
1653027425251:library(ggplot2)
1653027429695:appliance_ts = ts(ApplianceShipments.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653027431554:plot(appliance_ts, main = "Appliance Shipments", xlab = "Year", ylab = "Shipments", ylim = c(3500,5000))
1653027434882:appliance_ts = ts(ApplianceShipments.df$Shipments, start = c(1985,1), end = c(1989,4), freq= 4)
1653027437633:plot(appliance_ts, main = "Appliance Shipments", xlab = "Year", ylab = "Shipments", ylim = c(3500,5000))
1653027442127:library(ggplot2)
1653027444057:ggplot(mpg.df) + geom_point(aes(x=city,y=hwy), colour ="navy")
1653027463174:ggplot(data=mpg) +geom_point(aes(x=cty, y=hwy),colour = "navy")
1653027467908:ggplot(mpg.df) + geom_point(aes(x=city,y=hwy), colour ="navy")
1653027476745:ggplot(data = midwest, aes(x=poptotal, y=popasian)) + geom_point()+xlim(0,500000)+ylim(0,10000)
1653027480078:library(dplyr)
1653027482801:mpg %>% filter(class == "suv") %>% group_by(manufacturer) %>% summarise(cty_mean = mean(cty)) %>% arrange(desc(cty_mean)) %>% head(5) ->df
1653027483998:ggplot(data = df, aes(x= reorder(manufacturer,-cty_mean),y=cty_mean))+geom_col()
1653027485389:ggplot(data = mpg, aes(class)) + geom_bar()
1654395250051:View(Cereals)
1654396031480:cereals.df<-read.csv("Cereals.csv")
1654396057673:View(cereals.df)
1654396128008:pcs <- prcomp(data.frame(cereals.df$calories, cereals.df$rating))
1654396141319:summary(pcs)
1654412669060:pcs$rot
1654412727294:scores <-pcs$x
1654412747456:head(scores, $)
1654412781552:head(scores, $)
1654412810470:head(scores,$)
1654412832965:scores <-pcs$x
1654412834389:head(scores, $)
1654412871158:#rot값은 회전행렬, 원자료를 두 개의 새로운 방향으로 투영하는데 가중치 제공
1654412871159:pcs$rot
1654412872125:scores <-pcs$x
1654412872709:head(scores, $)
1654412895615:head(scores, $)
1654413028762:head(scores, 5)
1654684991350:#1
1654684991367:Cerals <-read.csv("Cearl.csv")
1654694075353:#1
1654694075385:Cerals <-read.csv("Cereal.csv")
1654694105957:#1
1654694105958:Cereal<-read.csv("Cereal.csv")
1654694237104:#1
1654694237105:Cereal.df<-read.csv("Cereal.csv")
1654694384558:#1
1654694384561:Cereal<-read.csv("Cereals.csv")
1654694391854:head(Cereals)
1654694399698:head(Cereals)
1654694409725:head(Cereals)
1654694412551:#1
1654694412552:Cereals<-read.csv("Cereals.csv")
1654694413066:head(Cereals)
1654694415874:#1-2
1654694415875:CSUM <- data.frame(mean = sapply(Cerals[,4:16],mean,na.rm=TRUE), median = sapply(Cereals[,4:16], median,na.rm = TRUE),max = sapply(Cereals[.4:16], max,na.rm = TRUE), sd = sapply(Cereals[,4:16], sd,na.rm = TRUE) )
1654694427874:#1-2
1654694427874:CSUM <- data.frame(mean = sapply(Cereals[,4:16],mean,na.rm=TRUE), median = sapply(Cereals[,4:16], median,na.rm = TRUE),max = sapply(Cereals[.4:16], max,na.rm = TRUE), sd = sapply(Cereals[,4:16], sd,na.rm = TRUE) )
1654694491336:#1-2
1654694491339:CSUM<-data.frame(mean=sapply(Cereals[,4:16], mean,na.rm=TRUE), median=sapply(Cereals[,4:16], median,na.rm=TRUE), min=sapply(Cereals[,4:16],min,na.rm=TRUE)
1654694491340:,max=sapply(Cereals[,4:16], max,na.rm=TRUE) ,sd=sapply(Cereals[,4:16], sd,na.rm=TRUE))
1654694493136:colnames(CSUM)=c("mean","Median","Min","Max","Standard Deviation")
1654694493968:CSUM
1654694500121:#1-3
1654694500122:library(tidyr)
1654694529549:#1-3
1654694529550:library(tidyr)
1654694530690:library(ggplot2)
1654694540624:Cereals %>% gather() %>% head()
1654694740414:Cereals %>% gather() %>% head()
1654694740948:ggplot(gather(Cerals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654694821652:#1-3
1654694821653:library(tidyr)
1654694833415:boxplot(calories~type,data=Cereals,main="Cold (C) vs. Hot (H) cereals",
1654694833415:xlab="Type of cereals",ylab="# of calories",
1654694833416:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654694833416:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1654694836112:#1-5
1654694836112:boxplot(rating~shelf,data=Cereals,main="Impact of Shelf Size on Customer Ratings",
1654694836113:xlab="Ratings",ylab="Shelf",horizontal=TRUE,
1654694836113:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654694836113:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1654694837517:cmCereal=cor(Cereals[,4:16],use="complete.obs")
1654694839311:round(cmCereal,2)
1654694898666:#1-3
1654694898666:library(tidyr)
1654694900471:library(ggplot2)
1654694901079:Cereals %>% gather() %>% head()
1654694901663:ggplot(gather(Cerals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654694919871:ggplot(gather(Cereals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654695507895:head(Cereals)
1654695604436:#1-2
1654695604437:CSUM<-data.frame(mean=sapply(Cereals[,4:16], mean,na.rm=TRUE), median=sapply(Cereals[,4:16], median,na.rm=TRUE), min=sapply(Cereals[,4:16],min,na.rm=TRUE)
1654695604438:,max=sapply(Cereals[,4:16], max,na.rm=TRUE) ,sd=sapply(Cereals[,4:16], sd,na.rm=TRUE))
1654695606395:colnames(CSUM)=c("mean","Median","Min","Max","Standard Deviation")
1654695607870:CSUM
1654695638685:#1-3
1654695638685:library(tidyr)
1654695640497:library(ggplot2)
1654695641079:Cereals %>% gather() %>% head()
1654695645154:ggplot(gather(Cereals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654696424401:#1-5
1654696424403:boxplot(rating~shelf,data=Cereals,main="Impact of Shelf Size on Customer Ratings",
1654696424403:xlab="Ratings",ylab="Shelf",horizontal=TRUE,
1654696424403:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654696424404:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1654696427469:cmCereal=cor(Cereals[,4:16],use="complete.obs")
1654696428634:round(cmCereal,2)
1654696482235:#1-2
1654696482236:CSUM<-data.frame(mean=sapply(Cereals[,4:16], mean,na.rm=TRUE), median=sapply(Cereals[,4:16], median,na.rm=TRUE), min=sapply(Cereals[,4:16],min,na.rm=TRUE)
1654696482236:,max=sapply(Cereals[,4:16], max,na.rm=TRUE) ,sd=sapply(Cereals[,4:16], sd,na.rm=TRUE))
1654696483157:colnames(CSUM)=c("mean","Median","Min","Max","Standard Deviation")
1654696484972:CSUM
1654696492501:#1-3
1654696492501:library(tidyr)
1654696493930:library(ggplot2)
1654696495011:Cereals %>% gather() %>% head()
1654696497522:ggplot(gather(Cereals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654696570843:boxplot(calories~type,data=Cereals,main="Cold (C) vs. Hot (H) cereals",
1654696570844:xlab="Type of cereals",ylab="# of calories",
1654696570844:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654696570845:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1654696691392:#1-5
1654696691393:boxplot(rating~shelf,data=Cereals,main="Impact of Shelf Size on Customer Ratings",
1654696691393:xlab="Ratings",ylab="Shelf",horizontal=TRUE,
1654696691393:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654696691394:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1654696832883:cmCereal=cor(Cereals[,4:16],use="complete.obs")
1654696833838:round(cmCereal,2)
1654697091095:ggplot(gather(Cereals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654697567814:#1
1654697567815:Cereals<-read.csv("Cereals.csv")
1654697569315:head(Cereals)
1654697569849:#1-2
1654697569849:CSUM<-data.frame(mean=sapply(Cereals[,4:16], mean,na.rm=TRUE), median=sapply(Cereals[,4:16], median,na.rm=TRUE), min=sapply(Cereals[,4:16],min,na.rm=TRUE)
1654697569851:,max=sapply(Cereals[,4:16], max,na.rm=TRUE) ,sd=sapply(Cereals[,4:16], sd,na.rm=TRUE))
1654697570523:colnames(CSUM)=c("mean","Median","Min","Max","Standard Deviation")
1654697570909:CSUM
1654697571241:#1-3
1654697571241:library(tidyr)
1654697571586:library(ggplot2)
1654697571813:Cereals %>% gather() %>% head()
1654697572064:ggplot(gather(Cereals[,4:16]),aes(value))+ geom_histogram(bin =10)+facet_wrap(~key,scales = "free_x")
1654697576006:boxplot(calories~type,data=Cereals,main="Cold (C) vs. Hot (H) cereals",
1654697576006:xlab="Type of cereals",ylab="# of calories",
1654697576007:col="blueviolet",medcol="darkgoldenrod1",boxlty=0,border="black",
1654697576007:whisklty=1,staplelwd=4,outpch=13,outcex=1,outcol="darkslateblue")
1655220042930:install.packages(ggplot2)
1655220052721:install.packages("ggplot2"")
1655220069339:install.packages("ggplot2"")
1655220069341:library(ggplot2)
1655220083347:install.packages("ggplot2)
1655220083348:library(ggplot2)
1655220091344:install.packages("ggplot2")
1655220094506:library(ggplot2)
1655220121203:install.packages("readxl")
1655220129400:install.packages("ggplot2")
1655220134804:install.packages("ggplot2")
1655220137652:library(ggplot2)
1655220139541:install.packages("readxl")
1655220147768:library(readxl)
1655220183476:msg$drv<-as.factor(msg$drv)
1655220220338:mpg <-as.data.frame(ggplot2::mpg)
1655220221984:mpg$drv<-as.factor(mpg$drv)
1655220249916:summary(mpg$hwy)
1655221620077:housing.df <- read.csv("WestRoxbury.csv", header = TRUE)
1655221656051:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1655221677060:mpg <- as.data.frame(ggplot2::mpg)
1655221684108:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1655221704783:dim(housing.df)
1655221724130:install.packages("readxl")
1655221728140:install.packages("readxl")
1655221746446:library(readxl)
1655221750122:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1655221808446:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1655221812494:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1655221816404:tail(df_exam)
1655221819015:install.packages("ggplot2")
1655221822139:library(ggplot2)
1655221824027:install.packages("readxl")
1655221827615:install.packages("readxl")
1655221830227:library(readxl)
1655221832087:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1655221841304:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1655221851855:install.packages("ggplot2")
1655221856922:library(ggplot2)
1655221859906:install.packages("readxl")
1655221865736:install.packages("readxl")
1655221870743:library(readxl)
1655221881086:df_exam <-read_excel("exam_score.xlsx", sheet = "exam_score")
1655221911708:df_exam <-read_excel("exam_score(1).csv", sheet = "exam_score")
1655222180440:Amtrak.df <- read.csv("Amtrak.csv")
1655222258325:library(readr)
1655222258334:Amtrak <- read_csv("businessRproject/Amtrak.csv")
1655222258548:View(Amtrak)
1655222263543:Amtrak.df <- read.csv("Amtrak.csv")
1655222278200:library(forecast)
1655222344646:housing.df <- read.csv("BostonHousing.csv")
1655222387200:#3-1번 문제
1655222387202:install.packages("ggplot2")
1655222391647:install.packages("ggplot2")
1655222397725:library(ggplot2)
1655222402551:install.packages("readxl")
1655222407734:library(readxl)
1655222409645:midwest <- as.data.frame(ggplot2::midwest)
1655222411311:midwest
1655222412021:head(midwest,3) #상위3개로는 PID론는 561,562,563이 있다.
1655222412610:View(midwest)#횡으로는 pid, county,state, popewhite, popblack등이 있다
1655246952036:class(drv)
1655246955467:install.packages("ggplot2")
1655246960665:library(ggplot2)
1655246964535:install.packages("readxl")
1655246969477:library(readxl)
1655246971441:class(drv)
1655246999985:mpg <-data.frame(ggplot2::mpg)
1655247007453:dim(drv)
1655247018668:mpg
1655247029727:class(drvx)
1655247033306:class(drv)
1655247125994:df_exam2<-reaad.csv("exam_score.csv")
1655247133047:df_exam2<-read.csv("exam_score.csv")
1655247160518:df_exam2<-read.csv("exam_score(1).csv")
1655247171190:df_exam2 <- read.csv("exam_score.csv")
1655247232165:qplot(data = mpg, -hwy)
1655247300639:qplot(data = mpg, x = drv, y = hwy, geom = "line")
1655247325164:install.packages("dplyr")
1655247331293:install.packages("dplyr")
1655247336007:install.packages("dplyr")
1655247338951:install.packages("dplyr")
1655247360869:library(dplyr)
1655247413388:df_example <- data.frame(var1 = c(30,40,50,var2 = c(70,60,50)))
1655247424823:df_example
1655247470265:df_example$sum = df_example$var1+df_exmaple$var2
1655247481363:df_example$sum = df_example$var1+df_example$var2
1655247496893:df_example$sum <- df_example$var1+df_example$var2
1655247522333:df_example$sum<- df_example$var1+ de_example$var2
1655247532937:df_example$sum<- df_example$var1+ df_example$var2
1655247585188:df_example
1655247622022:df_example$sum <-df_example$var1+df_example$var2
1655247641031:df_example <- data.frame(var1 = c(30,40,50,var2 = c(70,60,50)))
1655247642237:df_example
1655247644972:df_example <-rename(df_example, var1= variabler1)
1655247661292:df_example
1655247662075:df_example$sum <-df_example$var1+df_example$var2
1655247719259:mpg$avg <- (mpg$cty +mpg$hwy)/2
1655247722427:head(mpg)
1655248060118:exam %>%filter(class == 1)
1655248072926:exam <- read.csv("csv_exam.csv")
1655248110094:library(dplyr)
1655248111294:exam <- read.csv("csv_exam.csv")
1655248118221:exam %>%filter(class == 1)
1655248129439:exam <- read.csv("csv_exam.csv")
1655248178140:exam <- read.csv("csv_exam.csv")
1655248190594:library(dplyr)
1655248191631:exam <- read.csv("csv_exam.csv")
1655248980508:housing.df <-read.csv("WestRoxbury.csv", header = TRUE)
1655248982662:dim(housing.df) #record:5802개(주택), coloum이 14개인 데이터 셋
1655248983831:head(housing.df)
1655248984545:housing.df[1:10,1] #처음이 행 다음이 열  -> 1붜 10행까지 첫번째 varaible만 확인
1655248985099:housing.df[5,1:10]
1655248985799:housing.df[5,c(1:2,4,8:10)]
1655248986070:housing.df$TOTAL.VALUE
1655248986372:mean(housing.df$TOTAL.VALUE)
1655248986919:summary(housing.df)
1655248988296:s<- sample(row.names(housing.df),  5)#row.names는 일련번호
1655248989121:s
1655248989921:housing.df[s,]
1655248990607:#전체값 나타내기
1655248990608:#prob=확률
1655248990608:s <- sample(row.names(housing.df), 5 , prob = ifelse(housing.df $ROOMS >10, 0.9, 0.01))
1655248992237:s
1655248993030:housing.df[s,]
1655248994114:names(housing.df)
1655248994840:#어떠어떠한 함수들이 있는지 확인
1655248994841:t(t(names(housing.df)))
1655248995261:#transpose: 1부터 14번까지 뒤집어서 보여주기
1655248995261:#colnames: 변수이름을 바꿀 때
1655248995262:#class는 데이터의 데이터 타입 보고싶을 때
1655248995262:class(housing.df$REMODEL)
1655248995350:levels(housing.df[,14])
1655248996038:#null로 뜨는 이유는 character 변수일 경우 categorical로 인식되어지지 않기 때문에 오류가 발생한다. r에서는 character가 factor이다.
1655248996038:levels(as.factor(housing.df[,14]))
1655248996516:class(housing.df[,1])
1655248996838:xtotal <- model.matrix(-0 + BEDROOMS + REMODEL, data = housing.df)
1655248997171:xtotal(xtotal,10)
1655248997498:xtotal$BEDROOMS[1:5]
1655248997821:xtotal <- as.data.frame(xtotal)
1655248998135:total <- xtotal[,-4]
1655248998587:head(xtotal)
1655248998861:rows.to.missing <- sample(row.names(housing.df),10)
1655248999241:row.to.missing
1655248999486:housing.df[row.to.missing]$BEDROOMS <-NA
1655248999805:housing.df[5043,]
1655249000051:summary(housing.df$BEDROOMS)
1655249000162:housing.df[rows.to.missing,]$BEDROOMS <-median(housing.df$BEDROOMS,na.rm =TRUE)
1655249000283:median(housing.df$BEDROOMS)
1655249000405:housing.df
1655249000495:train.rows <- sample(rownames(housinig.df), dim(housing.df)[1]*0.6)
1655249000649:housing.df
1655249000774:valid.rows <- setdiff(rownames(housing.df),train.rows)
1655249000902:housing.df <- as.data.frame(ggplot2::housing.df)
1655249001016:pred <- predict (reg, newdata = valid.data)
1655249001130:housing.df
1655249001259:#수업 내용
1655249001260:Amtrak.df <- read.csv("Amtrak.csv")
1655260142537:install.packages("ggplot2")
1655260155342:library(ggplot2)
1655260829978:install.packages("read.xl")
1655260837967:library(read.xl)
1655260847340:install.packages("readxl")
1655260851411:library(read.xl)
1655260855133:library(readxl)
1655260875668:midswest <- data.frams(ggplot2::midwest)
1655260889209:midswest <- as.data.frame(ggplot2::midwest)
1655260908642:install.packages("dplyr")
1655260911390:install.packages("dplyr")
1655260922105:library(dplyr)
1655263559779:install.packages("ggplot2")
1655263597370:library(ggplot2)
1655263599571:mpg <- as.data.frame(ggplot2:: mpg)
1655263634457:install.packages("readxl")
1655263657642:library(readxl)
1655263714690:view(mpg)
1655263719753:View(mpg)
1655263909371:head(mpg)
1655264016555:install.packages("dplyr")
1655264020153:install.packages("dplyr")
1655264040248:library(dplyr)
1655264120238:mpg <- mutate(total=cty+hwy)
1655264122805:mpg <- avg(total/2)
1655264152556:mpg <- mutate(total <- cty+hwy)
1655264169379:mpg <- mutate(total$mpg <- cty+hwy)
1655264171418:mpg <- avg(total/2)
1655264195130:mpg <- mutate(total$mpg <- cty + hwy)
1655264196025:mpg <- avg(total/2)
1655264223256:mpg <- dplyr(average)
1655264238085:mpg <- dplyr::
1655264409495:mpg <- mutate(total <- cty$mpg + hwy$mpg)
1655264412311:mpg <- avg(total/2)
1655264770980:mpg <- (hwy$mpg(head))
1655264831025:mpg <- mutate(total <- (cty$mpg) + (hwy$mpg))
1655264868428:mpg <-
1655264868429:#2-2 고속도로 연비가 높은것
1655264868430:mpg <- (mpg$model)
1655264869882:head(mpg)
1655264905097:mpg <-
1655264905098:#2-2 고속도로 연비가 높은것
1655264905098:mpg <- (mpg$manufacturer)
1655264913329:mpg <-
1655264913330:#2-2 고속도로 연비가 높은것
1655264913330:mpg <- (mpg$manufacturer)
1655264924914:mpg <-
1655264924915:#2-2 고속도로 연비가 높은것
1655264924915:mpg <- (mpg$model)
1655264935533:model
1655264938837:mpg <-
1655264938838:#2-2 고속도로 연비가 높은것
1655264938838:mpg <- (mpg$model)
1655264940775:head(mpg)
1655264961827:mpg <-
1655264961827:#2-2 고속도로 연비가 높은것
1655264961828:mpg <- (mpg$model)
1655264980072:mpg <-
1655264980074:#2-2 고속도로 연비가 높은것
1655264980075:mpg <- (mpg$model)
1655264986814:mpg <-
1655264986815:#2-2 고속도로 연비가 높은것
1655264986815:mpg <- (mpg $ model)
1655265015782:mpg <-
1655265015783:#2-2 고속도로 연비가 높은것
1655265015783:mpg <- (mpg$model)
1655265036755:mpg <-
1655265036757:#2-2 고속도로 연비가 높은것
1655265036757:mpg <- (model$mpg)
1655265060099:mpg <-
1655265060099:#2-2 고속도로 연비가 높은것
1655265060100:mpg <- (mpg$model)
1655265109257:mpg <- data.frame(ggplot2::mpg)
1655265119302:mpg <-
1655265119302:#2-2 고속도로 연비가 높은것
1655265119302:mpg <- (mpg$model)
1655265127730:head(mpg)
1655265185082:mpg <-
1655265185083:#2-2 고속도로 연비가 높은것
1655265185083:mpg <- (mpg$model > hwy)
1655265317301:mpg <- arrange(descend(compact$mpg))
1655265323600:mpg <- arrange(desc(compact$mpg))
1655265332899:mpg <- arrange(desc(compact))
1655265342838:mpg <- arrange(desc(class))
1655265354823:mpg <- arrange(desc(class$mpg))
1655265557288:mpg <- boxplot(model$suv> cty,5)
1655265569969:mpg <- boxplot(model> cty,5)
1655265736207:mpg <- (mpg$model> hwy)
1655265737728:head(mpg)
1655266055675:mpg <- mutate(avg(total/2))
1655266071701:avg<-total/2
1655266084068:total<- cty_hwy
1655266088102:total<- cty+hwy
1655266114635:mpg <- total(cty+hwy)
1655266122916:mpg <- mutate(total <- (cty$mpg) + (hwy$mpg))
1655342092892:library(haven)
1655342092899:Koweps_hpc10_2015_beta1_1_ <- read_sav("businessRproject/Koweps_hpc10_2015_beta1 (1).sav")
1655342095997:View(Koweps_hpc10_2015_beta1_1_)
1655342248099:library(readxl)
1655342289991:list_job<- read_excel("koweps_Codebook.xlsx",col_names = T, sheet =2)
1655342303841:list_job<- read_excel("koweps_Codebook.xlsx(1)",col_names = T, sheet =2)
1655342406883:list_job <- read_excel("koweps_Codebook (1).xlsx",col_names = T, sheet = 2)
1655342418052:list_job <- read_excel("koweps_Codebook(1).xlsx",col_names = T, sheet = 2)
1655342452741:list_job <- read_excel("Koweps_Codebook.xlsx",col_names = T, sheet = 2)
1655342477398:list_job
1655342481249:library(readxl)
1655342481784:list_job <- read_excel("Koweps_Codebook.xlsx",col_names = T, sheet = 2)
1655342667964:library(readxl)
1655342705437:list_job <- read_excel("koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655342722212:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655342769166:list_job
1655342826518:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655342836105:list_job
1655342883651:welfare <- left_join(welfare, list_job, id = "code_job")
1655342979693:welfare <- left_join(welfare, list_job, id = "code_job")
1655343056794:welfare %>%
1655343056796:filter(!is.na(code_job))%>%
1655343056796:select((code_job,job))%>%
1655343056796:head(6)
1655343064117:welfare %>%
1655343064117:filter(!is.na(code_job))%>%
1655343064118:select((code_job,job))%>%
1655343064119:head(6)
1655343081853:welfare <- left_join(welfare, list_job, id = "code_job")
1655345641540:job_income <-welfare%>%
1655345641541:filter(!is.na(job)&!is.na(income))%>%>
1655345641541:group_by(job)%>%
1655345641541:summarise(mean_income = mean(income))
1655345650171:job_income <-welfare%>%
1655345650172:filter(!is.na(job)&!is.na(income))%>%
1655345650172:group_by(job)%>%
1655345650173:summarise(mean_income = mean(income))
1655345676860:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655345677643:list_job
1655345679305:welfare <- left_join(welfare, list_job, id = "code_job")
1655345682697:welfare %>%
1655345682698:filter(!is.na(code_job))%>%
1655345682698:select((code_job,job))%>%
1655345682699:head(6)
1655345684495:job_income <-welfare%>%
1655345684495:filter(!is.na(job)&!is.na(income))%>%
1655345684496:group_by(job)%>%
1655345684496:summarise(mean_income = mean(income))
1655345699089:job_income <-welfare %>%
1655345699089:filter(!is.na(job)&!is.na(income)) %>%
1655345699090:group_by(job) %>%
1655345699090:summarise(mean_income = mean(income))
1655345712788:job_income
1655345946627:welfare <- left_join(welfare, list_job, id = "code_job")
1655345987847:install.packages("foreign")
1655346001462:library(foreign)
1655346013368:library(ggplot2)
1655346019652:welfare <- left_join(welfare, list_job, id = "code_job")
1655346688604:raw_welfare <- read.spss(file ="Koweps_hpc10_2015_beta1.sav",to data.frame = T)
1655346723968:welfare <- raw_welfare
1655346726984:raw_welfare <- read.spss(file ="Koweps_hpc10_2015_beta1.sav",to data.frame = T)
1655346743300:install.packages("foreign")
1655346746920:library(foreign)
1655346746993:install.packages("foreign")
1655346749070:install.packages("foreign")
1655346751575:library(ggplot2)
1655346753023:library(readxl)
1655346756764:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655346759640:list_job
1655346760852:raw_welfare <- read.spss(file ="Koweps_hpc10_2015_beta1.sav",to data.frame = T)
1655346781451:raw_welfare <- read.spss(file ="Koweps_hpc10_2015_betal.sav",to data.frame = T)
1655346812882:raw_welfare <- read.spss(file ="Koweps_hpc10_2015_beta1.sav",to data.frame = T)
1655346921591:View(welfare)
1655347381448:install.packages("foreign")
1655347387832:library(foreign)
1655347443655:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655347463760:welfare<- raw_welfare
1655347474753:View(welfare)
1655347481824:head(welfare)
1655347486121:dim(welfare)
1655347594563:welfare <- rename(welfare,
1655347594563:sex = h10_g3,
1655347594564:birth = h10_g4,
1655347594564:marriage = h10_g10,
1655347594564:religion = h10_g11,
1655347594564:income = p1002_8aq1,
1655347594564:code_job = h10_eco9,
1655347594564:code_region = h1-_reg7)
1655347607140:welfare <- rename(welfare,
1655347607140:sex = h10_g3,
1655347607141:birth = h10_g4,
1655347607141:marriage = h10_g10,
1655347607141:religion = h10_g11,
1655347607141:income = p1002_8aq1,
1655347607142:code_job = h10_eco9,
1655347607142:code_region = h10-_reg7)
1655347609998:welfare <- rename(welfare,
1655347609998:sex = h10_g3,
1655347609998:birth = h10_g4,
1655347609999:marriage = h10_g10,
1655347609999:religion = h10_g11,
1655347609999:income = p1002_8aq1,
1655347610000:code_job = h10_eco9,
1655347610000:code_region = h10-_reg7)
1655363990054:welfare <- rename(welfare,
1655363990055:sex = h10_g3,
1655363990056:birth = h10_g4,
1655363990056:marriage = h10_g10,
1655363990056:religion = h10_g11,
1655363990056:income = p1002_8aq1,
1655363990056:code_job = h10_eco9,
1655363990057:code_region = h10-_reg7)
1655364072361:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655364073836:welfare<- raw_welfare
1655364077000:welfare <- rename(welfare,
1655364077001:sex = h10_g3,
1655364077001:birth = h10_g4,
1655364077002:marriage = h10_g10,
1655364077002:religion = h10_g11,
1655364077002:income = p1002_8aq1,
1655364077002:code_job = h10_eco9,
1655364077003:code_region = h10-_reg7)
1655364179249:welfare <- rename(welfare,
1655364179250:sex = h10_g3,
1655364179250:birth = h10_g4,
1655364179251:marriage = h10_g10,
1655364179251:religion = h10_g11,
1655364179251:income = p1002_8aq1,
1655364179251:code_job = h10_eco9,
1655364179251:code_region = h10-_reg7)
1655364183995:install.packages("foreign")
1655364190536:install.packages("foreign")
1655364195664:library(foreign)
1655364199471:library(ggplot2)
1655364203498:library(readxl)
1655364207352:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655364210721:welfare<- raw_welfare
1655364211969:View(welfare)
1655364214798:head(welfare)
1655364216349:dim(welfare)
1655364217939:welfare <- rename(welfare,
1655364217940:sex = h10_g3,
1655364217940:birth = h10_g4,
1655364217941:marriage = h10_g10,
1655364217941:religion = h10_g11,
1655364217941:income = p1002_8aq1,
1655364217941:code_job = h10_eco9,
1655364217942:code_region = h10-_reg7)
1655364227554:welfare <- rename(welfare,
1655364227555:sex = h10_g3,
1655364227555:birth = h10_g4,
1655364227555:marriage = h10_g10,
1655364227555:religion = h10_g11,
1655364227556:income = p1002_8aq1,
1655364227556:)
1655364244256:welfare <- rename(welfare,
1655364244258:sex = h10_g3,
1655364244258:birth = h10_g4,
1655364244259:marriage = h10_g10,
1655364244259:religion = h10_g11,
1655364244259:income = p1002_8aq1)
1655364304504:welfare <- rename(welfare,
1655364304506:sex = h10_g3,
1655364304506:birth = h10_g4,
1655364304507:marriage = h10_g10,
1655364304507:religion = h10_g11,
1655364304507:income = p1002_8aq1
1655364304507:code_job = h1-_eco9,
1655364304508:code_region = h10_reg7)
1655364319167:welfare <- rename(welfare,
1655364319167:sex = h10_g3,
1655364319167:birth = h10_g4,
1655364319168:marriage = h10_g10,
1655364319168:religion = h10_g11,
1655364319168:income = p1002_8aq1,
1655364319169:code_job = h1-_eco9,
1655364319169:code_region = h10_reg7)
1655364323850:dim(welfare)
1655364325587:welfare <- rename(welfare,
1655364325588:sex = h10_g3,
1655364325588:birth = h10_g4,
1655364325588:marriage = h10_g10,
1655364325589:religion = h10_g11,
1655364325589:income = p1002_8aq1,
1655364325589:code_job = h1-_eco9,
1655364325589:code_region = h10_reg7)
1655364339930:clear
1655364343394:library(foreign)
1655364343868:library(dplyr)
1655364344278:library(ggplot2)
1655364346548:library(readxl)
1655364347715:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655364348580:welfare<- raw_welfare
1655364352366:welfare <- rename(welfare,
1655364352366:sex = h10_g3,
1655364352367:birth = h10_g4,
1655364352367:marriage = h10_g10,
1655364352367:religion = h10_g11,
1655364352367:income = p1002_8aq1,
1655364352367:code_job = h1-_eco9,
1655364352368:code_region = h10_reg7)
1655364360881:welfare <- rename(welfare,
1655364360881:sex = h10_g3,
1655364360882:birth = h10_g4,
1655364360882:marriage = h10_g10,
1655364360882:religion = h10_g11,
1655364360882:income = p1002_8aq1,
1655364360883:code_job = h1_eco9,
1655364360883:code_region = h10_reg7)
1655364374668:welfare <- rename(welfare,
1655364374669:sex = h10_g3,
1655364374669:birth = h10_g4,
1655364374670:marriage = h10_g10,
1655364374670:religion = h10_g11,
1655364374670:income = p1002_8aq1,
1655364374670:code_job = h10_eco9,
1655364374670:code_region = h10_reg7)
1655364387148:head(welfare,3)
1655364657183:class(wlefare$sex)
1655364663143:class(welfare$sex)
1655364665225:class(welfare$income)
1655364666670:table(welfare$sex)  #빈도테이블
1655364668660:welfare$sex <- ifelse(welfare$sex ==9, NA, welfare$sex)
1655364683787:table(is.na(welfare$sex))
1655364708358:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655364717275:table(welfare$sex)
1655364738147:qplot(welfare$sex)
1655364786492:ggplot(data = welfare, aes(x=sex))+geom_bar()
1655365582727:table(welfare$sex)
1655365604204:table(welfare$sex)
1655365639991:class(welfare$income)
1655365641110:summary(wlefare$income)
1655365647260:summary(welfare$income)
1655365669899:qplot(welfare$income) + xlim(0,1000)
1655365871650:#값이 0인 것이 존재한다는 것은 이상치가 존재한다는 것이기 때문에 결측치로 바꾸어 줘야한다.모름 9999도 결측치로 바꿔줘야한다.
1655365871651:welfare$income <- ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
1655365888090:table(is.na(welfare$income))
1655366248696:sex_income <- welfare %>%
1655366248697:filter(!is.na(income))%>%
1655366248697:group_by(sex)%>%
1655366248698:summarise(mean_income = mean(income))
1655366290345:sex_income
1655366332614:ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
1655366442760:class(welfare$birth)
1655366449767:summary(welfare$birth)
1655366496944:qplot(welfare$birth)
1655366552594:table(is.na(welfare$birth))
1655366577974:welffare$birth <- ifelse(welfare$birth == 9999)
1655366638846:welfare$birth <- ifelse(welfare$birth == 9999)
1655366655338:welfare$birth <- ifelse(welfare$birth == 9999, NA,welfare$birth)
1655366751482:welfare$age <- 2015 - welfare$birth +1
1655366758528:summary(welfare$age)
1655366837919:qplot(welfare$age)
1655366961376:age_income <- welfare %>%
1655366961379:filter(!is.na(income)) %>%
1655366961379:group_by(age) %>%
1655366961380:summarise(mean_income = mean(income))
1655366964814:age_income
1655367014416:ggplot(data = age_income, aes(x =age, y = mean_income)+geom_line())
1655367035673:ggplot(data = age_income, aes(x =age, y = mean_income)+geom_line()
1655367045414:ggplot(data = age_income, aes(x =age, y = mean_income)+geom_line()
1655367071305:ggplot(data = age_income, aes(x =age, y = mean_income))+geom_line()
1655367220270:welfare$age <- 2015 - welfare$birth +1
1655367226367:head(welfare,3)
1655367233557:summary(welfare$age)
1655367249865:qplot(welfare$age)
1655367302457:welfaer <- welfare%>%
1655367302459:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655367312920:summary(welfare$ageg)
1655367324831:table(welfare$ageg)
1655367346459:table(welfare$ageg)f
1655367357654:qplot(welfare$ageg)
1655367382148:welfare <- welfare%>%
1655367382148:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655367383815:summary(welfare$ageg)
1655367387868:table(welfare$ageg)
1655367388616:qplot(welfare$ageg)
1655367424114:class(welfare$income)
1655367434200:summary(welfare$income)
1655367477495:welfare$income <- ifelse(welfare$income %in% c(0,999), NA,welfare$income)
1655367496264:table(!is.na(welfare$income))
1655367512306:table(is.na(welfare$income))
1655367592607:ageg_income <- welfare %>%
1655367592611:filter(!is.na(income)) %>%
1655367592611:group_by(ageg) %>%
1655367592611:summarize(mean_income = mean(income))
1655367607452:age_income
1655367618295:ageg_income
1655367635070:qplot(ageg_income)
1655367661867:qplot(data = ageg_income, aex(x = ageg, y = mean_income) + geom_col())
1655367674294:qplot(data = ageg_income, aex(x = ageg, y = mean_income)) + geom_col()
1655367680864:qplot(data = ageg_income, aes(x = ageg, y = mean_income)) + geom_col()
1655367694250:ggplot(data = ageg_income, aes(x = ageg, y = mean_income)) + geom_col()
1655432555355:ggplot(data = ageg_income, aes(x = ageg, y = mean_income)) + geom_col()+
1655432555369:scale_x_discrete(limits = c("young", "middle", "old"))
1655432595448:ggplot(data = ageg_income, aes(x = reorder(ageg, mean_income), y = mean_income)) + geom_col()+
1655432595448:scale_x_discrete(limits = c("young", "middle", "old"))
1655432622766:ggplot(data = ageg_income, aes(x = reorder(ageg, mean_income), y = mean_income)) + geom_col()+
1655432658170:ggplot(data = ageg_income, aes(x = ageg, , y = mean_income)) + geom_col()+
1655432658171:scale_x_discrete(limits = c("young", "middle", "old"))
1655432663524:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655432663524:scale_x_discrete(limits = c("young", "middle", "old"))
1655432736345:sex_income <- welfare%>%
1655432736346:filter(!is.na(income))%>%
1655432761591:sex_income <- welfare%>%
1655432761591:filter(!is.na(income))%>%
1655432761591:groupt_by(ageg,sex)%>%
1655432761592:summarise(mean_income = mean(income))
1655432781150:sex_income <- welfare%>%
1655432781151:filter(!is.na(income))%>%
1655432781151:group_by(ageg,sex)%>%
1655432781151:summarise(mean_income = mean(income))
1655433257067:class(welfare$sex)
1655433267903:table(welfare$sex)
1655433292595:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655433319809:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655433328757:table(welfare$sex)
1655433435402:sex_income <-welfare%>%
1655433435405:filter(!is.na(income))%>%
1655433435405:group_by(ageg,sex)%>>%
1655433435405:summarise(mean_income = mean(income))
1655433447808:sex_income <-welfare %>%
1655433447808:filter(!is.na(income)) %>%
1655433447808:group_by(ageg,sex) %>>%
1655433447809:summarise(mean_income = mean(income))
1655433482442:sex_income <-welfare %>%
1655433482443:filter(!is.na(income)) %>%
1655433482443:group_by(ageg,sex) %>%
1655433482443:summarise(mean_income = mean(income))
1655433499299:sex_income
1655433649122:scale_x_dixcrete(limits = c("young", "middle","old"))
1655433693958:scale_x_discrete(limits = c("young", "middle","old"))
1655433745237:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()+
1655433745239:scale_x_discrete(limits = c("young", "middle","old"))
1655433848572:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655433849222:table(welfare$sex)
1655433850387:sex_income <-welfare %>%
1655433850387:filter(!is.na(income)) %>%
1655433850388:group_by(ageg,sex) %>%
1655433850388:summarise(mean_income = mean(income))
1655433862964:sex_income
1655433864176:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()+
1655433864176:scale_x_discrete(limits = c("young", "middle","old"))
1655433903070:sex_income <- welfare%>%
1655433903070:filter(!is.na(income))%>%
1655433903071:group_by(ageg,sex)%>%
1655433903071:summarise(mean_income = mean(income))
1655433941169:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655433951957:table(is.na(welfare$income))
1655433959427:ageg_income <- welfare %>%
1655433959427:filter(!is.na(income)) %>%
1655433959428:group_by(ageg) %>%
1655433959428:summarize(mean_income = mean(income))
1655433965038:ageg_income
1655433982698:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655433982699:scale_x_discrete(limits = c("young", "middle", "old"))
1655433988035:sex_income <- welfare%>%
1655433988037:filter(!is.na(income))%>%
1655433988037:group_by(ageg,sex)%>%
1655433988038:summarise(mean_income = mean(income))
1655433991344:sex_income <- welfare%>%
1655433991346:filter(!is.na(income))%>%
1655433991346:group_by(ageg,sex)%>%
1655433991346:summarise(mean_income = mean(income))
1655434037485:class(welfare$sex)
1655434037966:table(welfare$sex)
1655434039445:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655434040892:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655434041621:table(welfare$sex)
1655434042659:sex_income <-welfare %>%
1655434042659:filter(!is.na(income)) %>%
1655434042660:group_by(ageg,sex) %>%
1655434042660:summarise(mean_income = mean(income))
1655434050847:sex_income
1655434105858:sex_income <-welfare %>%
1655434105860:filter(!is.na(income)) %>%
1655434105860:group_by(ageg,sex) %>%
1655434105861:summarise(mean_income = mean(income))
1655434107383:sex_income
1655434113476:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col()+
1655434113476:scale_x_discrete(limits = c("young", "middle","old"))
1655434157794:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655434157796:scale_x_discrete(limits = c("young", "middle","old"))
1655434217209:sex_age <- welfare %>%
1655434217212:filter(!is.na(income)) %>%
1655434217212:group_by(age,sex) %>%
1655434217212:summarise(mean_income = mean(income))
1655434223077:sex_age
1655434255989:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))
1655434360582:welfare$age <-2015 - welfare$birth+1
1655434377181:head(welfare,3)
1655434387745:summary(welafre$age)
1655434393477:summary(welfare$age)
1655434404055:qplot(welfare$age)
1655434415850:qplot(welfare$age)
1655434417147:class(welfare$sex)
1655434418656:class(welfare$income)
1655434497908:ageg_income <- welfare %>%
1655434497909:filter(!is.na(income)) %>%
1655434497909:group_by(ageg) %>%
1655434497909:summarize(mean_income = mean(income))
1655434499387:ageg_income
1655434513990:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655434513991:scale_x_discrete(limits = c("young", "middle", "old"))
1655434531113:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655434531114:scale_x_discrete(limits = c("young", "middle", "old"))
1655434585001:sex_income <- welfare%>%
1655434585003:filter(!is.na(income))%>%
1655434585004:group_by(ageg,sex)%>%
1655434585004:summarise(mean_income = mean(income))
1655434615934:sex_income <- welfare%>%
1655434615934:filter(!is.na(income))%>%
1655434615935:group_by(ageg,sex)%>%
1655434615935:summarise(mean_income = mean(income))
1655434617480:class(welfare$sex)
1655434637985:table(welfare$sex)
1655434653938:class(welfare$sex)
1655434657889:class(welfare$income)
1655434659938:table(welfare$sex)  #빈도테이블
1655434669712:View(welfare)
1655434675376:head(welfare)
1655434677108:dim(welfare)
1655434679363:welfare <- rename(welfare,
1655434679365:sex = h10_g3,  #성별
1655434679365:birth = h10_g4,  # 태어난 연도
1655434679365:marriage = h10_g10,  # 혼인상태
1655434679366:religion = h10_g11,  #종교
1655434679366:income = p1002_8aq1,  #월급
1655434679366:code_job = h10_eco9,   #직업 코드
1655434679366:code_region = h10_reg7)  #지역 코드
1655434723560:welfare <- rename(welfare,
1655434723563:sex = h10_g3,  #성별
1655434723564:birth = h10_g4,  # 태어난 연도
1655434723564:marriage = h10_g10,  # 혼인상태
1655434723564:religion = h10_g11,  #종교
1655434723564:income = p1002_8aq1,  #월급
1655434723564:code_job = h10_eco9,   #직업 코드
1655434723565:code_region = h10_reg7)  #지역 코드
1655434793493:welfare <- rename(welfare,
1655434793494:sex = h10_g3,  #성별
1655434793494:birth = h10_g4,  # 태어난 연도
1655434793494:marriage = h10_g10,  # 혼인상태
1655434793494:religion = h10_g11,  #종교
1655434793494:income = p1002_8aq1,  #월급
1655434793494:code_job = h10_eco9,   #직업 코드
1655434793494:code_region = h10_reg7)  #지역 코드
1655434799346:install.packages("foreign")
1655434804770:library(foreign)
1655434806920:library(dplyr)
1655434809156:library(ggplot2)
1655434810715:library(readxl)
1655434812720:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655434815460:welfare<- raw_welfare
1655434819493:welfare <- rename(welfare,
1655434819493:sex = h10_g3,  #성별
1655434819494:birth = h10_g4,  # 태어난 연도
1655434819494:marriage = h10_g10,  # 혼인상태
1655434819494:religion = h10_g11,  #종교
1655434819494:income = p1002_8aq1,  #월급
1655434819495:code_job = h10_eco9,   #직업 코드
1655434819495:code_region = h10_reg7)  #지역 코드
1655434841536:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655434841539:scale_x_discrete(limits = c("young", "middle","old"))
1655434854996:class(welfare$sex)
1655434856147:class(welfare$income)
1655434856795:table(welfare$sex)  #빈도테이블
1655434857556:welfare$sex <- ifelse(welfare$sex ==9, NA, welfare$sex)
1655434858060:table(is.na(welfare$sex))
1655434858484:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655434858919:table(welfare$sex)
1655434859380:qplot(welfare$sex)  #여자의 비율이 남자의 비율보다 높다.
1655434860049:#변수 검토및 전처리
1655434860049:ggplot(data = welfare, aes(x=sex))+geom_bar()
1655434860424:table(welfare$sex)
1655434861417:class(welfare$income)
1655434862059:summary(welfare$income)
1655434863118:#연봉이 얼마나 쏠려있는지
1655434863119:qplot(welfare$income) + xlim(0,1000)
1655434866154:#값이 0인 것이 존재한다는 것은 이상치가 존재한다는 것이기 때문에 결측치로 바꾸어 줘야한다.모름 9999도 결측치로 바꿔줘야한다.
1655434866155:welfare$income <- ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
1655434867543:table(is.na(welfare$income))
1655434868406:sex_income <- welfare %>%
1655434868407:filter(!is.na(income))%>%
1655434868407:group_by(sex)%>%
1655434868408:summarise(mean_income = mean(income))
1655434869554:sex_income
1655434870525:#geom_bar()
1655434870526:ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
1655434871804:class(welfare$birth)
1655434872785:#가장 어린 사람 2014년생 가장 나이 많은 사람 1907년생
1655434872785:summary(welfare$birth)
1655434874089:qplot(welfare$birth)
1655434875226:table(is.na(welfare$birth))
1655434876380:welfare$birth <- ifelse(welfare$birth == 9999, NA,welfare$birth)
1655434877658:welfare$age <- 2015 - welfare$birth +1
1655434878463:summary(welfare$age)
1655434879440:qplot(welfare$age)
1655434880334:age_income <- welfare %>%
1655434880334:filter(!is.na(income)) %>%
1655434880334:group_by(age) %>%
1655434880334:summarise(mean_income = mean(income))
1655434881225:age_income
1655434882155:ggplot(data = age_income, aes(x =age, y = mean_income))+geom_line()
1655434883444:welfare$age <- 2015 - welfare$birth +1
1655434884700:head(welfare,3)
1655434885470:summary(welfare$age)
1655434886044:qplot(welfare$age)
1655434888123:#연령대에 따른 임금
1655434888123:welfare <- welfare%>%
1655434888123:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655434889404:summary(welfare$ageg)
1655434890714:table(welfare$ageg)
1655434891601:qplot(welfare$ageg)
1655434892381:class(welfare$income)
1655434893302:summary(welfare$income)
1655434894315:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655434895233:table(is.na(welfare$income))
1655434896005:ageg_income <- welfare %>%
1655434896005:filter(!is.na(income)) %>%
1655434896006:group_by(ageg) %>%
1655434896006:summarize(mean_income = mean(income))
1655434896676:ageg_income
1655434897261:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655434897261:scale_x_discrete(limits = c("young", "middle", "old"))
1655434900351:sex_income <- welfare%>%
1655434900352:filter(!is.na(income))%>%
1655434900352:group_by(ageg,sex)%>%
1655434900352:summarise(mean_income = mean(income))
1655434901941:class(welfare$sex)
1655434921269:table(welfare$sex)
1655434922878:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655434924714:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655434926148:table(welfare$sex)
1655434936768:sex_income <-welfare %>%
1655434936769:filter(!is.na(income)) %>%
1655434936769:group_by(ageg,sex) %>%
1655434936769:summarise(mean_income = mean(income))
1655434937735:sex_income
1655434938307:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655434938307:scale_x_discrete(limits = c("young", "middle","old"))
1655435013095:class(welfare$sex)
1655435057515:class(welfare$sex)
1655435060309:table(welfare$sex)
1655435216106:sex_income <- welfare%>%
1655435216107:filter(!is.na(income))%>%
1655435216107:group_by(ageg,sex)%>%
1655435216108:summarise(mean_income = mean(income))
1655435223556:class(welfare$sex)
1655435227218:ageg_income <- welfare %>%
1655435227218:filter(!is.na(income)) %>%
1655435227219:group_by(ageg) %>%
1655435227219:summarize(mean_income = mean(income))
1655435228605:ageg_income
1655435312762:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655435329273:welfare <- rename(welfare,
1655435329274:sex = h10_g3,  #성별
1655435329275:birth = h10_g4,  # 태어난 연도
1655435329275:marriage = h10_g10,  # 혼인상태
1655435329275:religion = h10_g11,  #종교
1655435329275:income = p1002_8aq1,  #월급
1655435329276:code_job = h10_eco9,   #직업 코드
1655435329276:code_region = h10_reg7)  #지역 코드
1655435342576:welfare$age <-2015 - welfare$birth +1
1655435510048:#연령대에 따른 임금
1655435510050:welfare <- welfare%>%
1655435510051:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655435533193:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655435605203:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655435614221:ageg_income <- welfare %>%
1655435614222:filter(!is.na(income)) %>%
1655435614222:group_by(ageg) %>%
1655435614223:summarize(mean_income = mean(income))
1655435615963:ageg_income
1655435632530:sex_income <- welfare%>%
1655435632531:filter(!is.na(income))%>%
1655435632531:group_by(ageg,sex)%>%
1655435632531:summarise(mean_income = mean(income))
1655435694756:welfare<- raw_welfare
1655435702041:welfare <- rename(welfare,
1655435702041:sex = h10_g3,  #성별
1655435702042:birth = h10_g4,  # 태어난 연도
1655435702042:marriage = h10_g10,  # 혼인상태
1655435702042:religion = h10_g11,  #종교
1655435702042:income = p1002_8aq1,  #월급
1655435702042:code_job = h10_eco9,   #직업 코드
1655435702043:code_region = h10_reg7)  #지역 코드
1655435705246:welfare$age <-2015 - welfare$birth +1
1655435735869:#연령대에 따른 임금
1655435735871:welfare <- welfare%>%
1655435735871:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655435744700:table(welfare$ageg)
1655435782044:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655435789306:table(is.na(welfare$income))
1655435793895:ageg_income <- welfare %>%
1655435793895:filter(!is.na(income)) %>%
1655435793895:group_by(ageg) %>%
1655435793896:summarize(mean_income = mean(income))
1655435802117:ageg_income
1655435806370:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655435806371:scale_x_discrete(limits = c("young", "middle", "old"))
1655435814129:sex_income <- welfare%>%
1655435814130:filter(!is.na(income))%>%
1655435814130:group_by(ageg,sex)%>%
1655435814130:summarise(mean_income = mean(income))
1655435821792:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655435830078:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655435831185:table(welfare$sex)
1655435890950:sex_income <-welfare %>%
1655435890952:filter(!is.na(income)) %>%
1655435890952:group_by(ageg,sex) %>%
1655435890952:summarise(mean_income = mean(income))
1655435924305:sex_income
1655435934753:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655435934754:scale_x_discrete(limits = c("young", "middle","old"))
1655435978875:sex_age <- welfare %>%
1655435978876:filter(!is.na(income)) %>%
1655435978877:group_by(age,sex) %>%
1655435978877:summarise(mean_income = mean(income))
1655435980408:sex_age
1655435982245:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))
1655436006029:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
1655436027372:#직업별 월급 차이
1655436027373:class(welfare$code_job)
1655436039544:table(welfare$code_job)
1655436325593:library(readxl)
1655436362257:list_job <- read_excel("Koewps_Codebook.xlcs", col_names = T, sheet = 2)
1655436368827:list_job <- read_excel("Koewps_Codebook.xlsx", col_names = T, sheet = 2)
1655436382459:list_job <- read_excel("koewps_Codebook.xlsx", col_names = T, sheet = 2)
1655436408217:list_job <- read_excel("Koewps_Codebook.xlsx", col_names = T, sheet = 2)
1655436431390:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655436438673:list_job
1655437414842:welfare <- left_join(welfare, list_job, id = "code_job")
1655437501709:welfare %>%
1655437501710:filter(!is.na(code_job)) %>%
1655437501711:select(code_job, job) %>%
1655437501711:head(6)
1655437567825:summarise(mean_income = mean(income)
1655437570937:income
1655437577174:job_income
1655437583800:filter(!is.na(job)& !is.na(income)) %>%
1655437645903:job_income <- welfare %>%
1655437645904:filter (!is.na(job) & !is.na(income)) %>%
1655437645904:group_by(job) %>%
1655437645904:summarise(mean_income = mean(income))
1655437656222:welfare %>%
1655437656223:filter(!is.na(code_job)) %>%
1655437656223:select(code_job, job) %>%
1655437656223:head(6)
1655437659006:job_income <- welfare %>%
1655437659007:filter (!is.na(job) & !is.na(income)) %>%
1655437659007:group_by(job) %>%
1655437659007:summarise(mean_income = mean(income))
1655437663582:job_income
1655437732115:top10 <- job_income %>%
1655437732117:arrange(desc(mean_income)) %>%
1655437732118:head(6)
1655437741477:top10
1655437795004:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()
1655437828623:top10 <- job_income %>%
1655437828624:arrange(desc(mean_income)) %>%
1655437828624:head(10)
1655437829257:top10
1655437829847:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()
1655437857336:coord_clip()
1655437864366:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()+
1655437864366:coord_clip()
1655437869977:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()+
1655437869977:coord_flip()
1655437916409:#하위 10개
1655437916409:bottom10 <- job_income %>%
1655437916410:arrange(mean_income) %>%
1655437916410:head(10)
1655437917003:bottom10
1655437970643:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))
1655437981439:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))+geom_col()
1655438095934:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))+geom_col()+
1655438095937:coord_flip() +ylim(0,850)
1655438325172:job_male <- welfare %>%
1655438325174:filter(!is.na(job) & sex =="male") %.%
1655438325174:group_by(job) %>%
1655438325174:summarise(n = n()) %>%
1655438325174:arrange(desc(n)) %>%
1655438325175:head(10)
1655438329830:job_male <- welfare %>%
1655438329831:filter(!is.na(job) & sex =="male") %>%
1655438329833:group_by(job) %>%
1655438329833:summarise(n = n()) %>%
1655438329834:arrange(desc(n)) %>%
1655438329834:head(10)
1655438336776:job_male
1655438385661:job_male <- welfare %>%
1655438385664:filter(!is.na(job) & sex =="female") %>%
1655438385664:group_by(job) %>%
1655438385664:summarise(n = n()) %>%
1655438385664:arrange(desc(n)) %>%
1655438385665:head(10)
1655438386772:job_male
1655438474701:ggplot(data = job_male, aes(x = reorder(job,n),y = n)) +geom_col() + coor_flip()
1655438480590:ggplot(data = job_male, aes(x = reorder(job,n),y = n)) +geom_col() + coord_flip()
1655439330686:class(welfare$code_job)
1655439340778:table(welfare$codee_job)
1655439345241:table(welfare$code_job)
1655439381116:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655439390560:head(list_job)
1655439420487:welfare <- left_join(welfare,list_job, id = "code_job")
1655439449025:welfare %>%
1655439449027:filter(!is.na(code_job)) %>%
1655439449027:select(code_job,job) %>%
1655439449027:head(10)
1655439511650:job_income <- welfare %>%
1655439511652:filter(!is.na(job) & !is.na(income)) %>%
1655439511653:group_by(job) %>%
1655439511653:summarise(mean_income = mean(income))
1655439523089:head(job_income)
1655439548080:top10<-job_income %>%
1655439548082:arrange(desc(mean_income)) %>%
1655439548082:head(10)
1655439554041:top10
1655439596457:ggplot(data = tp10, aes(x = reorder(job, mean_income), y = mean_income)) + geom_col()+coord_flip()
1655439601071:ggplot(data = top10, aes(x = reorder(job, mean_income), y = mean_income)) + geom_col()+coord_flip()
1655439632548:bottom10 <- job_income %>%
1655439632551:arrange(mean_income) %>%
1655439632551:head(10)
1655439636796:bottom(10)
1655439640264:bottom10
1655439691682:ggplot(data = botton10, aes(x = reorder(job, -mean_income), y = mean_income))+
1655439691684:geom_col()+
1655439691684:coord_flip()+
1655439691684:ylim(0,850)
1655439697406:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))+
1655439697407:geom_col()+
1655439697407:coord_flip()+
1655439697407:ylim(0,850)
1655440775787:class(welfare$ageg)
1655440793801:class(welfare$marrige)
1655440844237:class(welfare$marriage)
1655440905238:class(welfare$birth)
1655440928522:qplot(wellfare$marriage)
1655440932566:qplot(welfare$marriage)
1655441004561:welfare$group_marraige <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441017400:welfare$group_marraige
1655441028595:table(welfare$group_marriage)
1655441042472:table(welfare$group_marriage)
1655441044073:welfare$group_marraige
1655441126945:table(welfare$group_marriage)
1655441149711:table(is.na(welfare$group_marraige))
1655441167472:qplot(welfare$group-marraige)
1655441172237:qplot(welfare$group-marriage)
1655441186450:qplot(welfare$group_marriage)
1655441197358:class(welfare$marriage)
1655441198344:qplot(welfare$marriage)
1655441216125:table(welfare$group_marraige)
1655441220623:qplot(welfare$group_marriage)
1655441228704:table(welfare$group_marraige)
1655441229873:welfare$group_marraige <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441231227:welfare$group_marraige
1655441232379:table(welfare$group_marriage)
1655441245244:table(welfare$group_marraige)
1655441249261:welfare$group_marraige <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441252773:table(welfare$group_marriage)
1655441256841:table(is.na(welfare$group_marraige))
1655441258579:qplot(welfare$group_marriage)
1655441269824:welfare$group_marraige
1655441271366:table(welfare$group_marriage)
1655441280512:table(welfare$group_marraige)
1655441282662:qplot(welfare$group_marriage)
1655441300631:table(welfare$group_marraige)
1655441301621:table(welfare$group_marriage)
1655441319920:table(welfare$group_marraige)
1655441320793:table(is.na(welfare$group_marraige))
1655441321529:qplot(welfare$group_marriage)
1655441336216:welfare$group_marriage
1655441338955:table(is.na(welfare$group_marraige))
1655441339599:qplot(welfare$group_marriage)
1655441341552:welfare$group_marriage
1655441343237:class(welfare$birth)
1655441343731:class(welfare$marriage)
1655441344556:qplot(welfare$marriage)
1655441347753:table(welfare$group_marraige)
1655441349218:welfare$group_marraige <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441350777:table(welfare$group_marraige)
1655441351649:welfare$group_marriage
1655441393049:table(welfare$group_marraige)
1655441394008:welfare$group_marraige <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441395027:table(welfare$group_marraige)
1655441397015:welfare$group_marraige
1655441398531:table(is.na(welfare$group_marraige))
1655441399138:qplot(welfare$group_marraige)
1655441479168:class(welfare$marriage)
1655441479641:qplot(welfare$marriage)
1655441480765:table(welfare$group_marriage)
1655441481428:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655441482422:table(welfare$group_marriage)
1655441483168:welfare$group_marriage
1655441483752:table(is.na(welfare$group_marriage))
1655441484574:qplot(welfare$group_marriage)
1655441544281:birth_marriage <- welfare %>%
1655441544282:filter(!is.na(group_marriage)) %>%
1655441544282:group_by(birth,group_marriage) %>%
1655441544282:summarise(n = n()) %>%
1655441544282:mutate(tot_group= sum(n)) %>%
1655441628166:birth_marriage <- welfare %>%
1655441628168:filter(!is.na(group_marriage)) %>%
1655441628168:group_by(birth,group_marriage) %>%
1655441628168:summarise(n = n()) %>%
1655441628169:mutate(tot_group= sum(n)) %>%
1655441628169:mutate(pct = round(n/tot_group*100,1))
1655441678809:birth_marriage <- welfare %>%
1655441678812:filter(!is.na(group_marriage)) %>%
1655441678812:group_by(birth,group_marriage) %>%
1655441678812:summarise(n = n()) %>%
1655441678812:mutate(tot_group= sum(n)) %>%
1655441678813:mutate(pct = round(n/tot_group*100,1))
1655441681740:birth_marriage
1655441722087:divorce <- birth_marriage %>%
1655441722087:filter(froup_marriage == "divorce") %>%
1655441722088:select(birth,pct)
1655441745674:divorce <- birth_marriage %>%
1655441745675:filter(group_marriage == "divorce") %>%
1655441745676:select(birth,pct)
1655441749259:divorce
1655441776548:ggplot(data = divorce, aes(x = religion, y = pct)) + geom_col()
1655441782369:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655441817045:divorce <- birth_marriage %>%
1655441817047:filter(group_marriage == "diverce") %>%
1655441817047:select(birth,pct)
1655441817907:divorce
1655441819373:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655441927189:divorce <- birth_marriage %>%
1655441927191:filter(group_marriage == "divorce") %>%
1655441927191:select(birth,pct)
1655441928384:divorce
1655441929230:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655442062270:class(welfare$code_region)
1655442073388:table(welfare$code_region)
1655442181227:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655442189778:list_region
1655442267629:welfare <-left_join(welfare, list_region, id = "code_region")
1655442297967:welfare %>%
1655442297967:select(code_region, region) %>%
1655442297968:head
1655442431794:region_sex <- welfare %>%
1655442431796:group_by(region,ageg) %>%
1655442431796:summarise(n = n()) %>%
1655442431797:mutate(tot_group_sum(n)) %>%
1655442431797:mutate(pct = round(n/tot_group*100,2))
1655442556729:region_sex <- welfare %>%
1655442556731:group_by(region,ageg) %>%
1655442556731:summarise(n = n()) %>%
1655442556732:mutate(tot_group_sum(n)) %>%
1655442556732:mutate(pct = round(n/tot_group*100,2))
1655442572474:region_sex <- welfare %>%
1655442572476:group_by(region,ageg) %>%
1655442572477:summarise(n = n()) %>%
1655442572477:mutate(tot_group = sum(n)) %>%
1655442572477:mutate(pct = round(n/tot_group*100,2))
1655442586520:region_sex
1655442610613:region_sex <- welfare %>%
1655442610615:group_by(region,sex) %>%
1655442610615:summarise(n = n()) %>%
1655442610615:mutate(tot_group = sum(n)) %>%
1655442610615:mutate(pct = round(n/tot_group*100,2))
1655442612091:region_sex
1655442655957:ggplot(data = region_ageg, aes(x= region, y = pct, fill = sex)) +geom_col()
1655442663001:ggplot(data = region_sex, aes(x= region, y = pct, fill = sex)) +geom_col()
1655442696271:ggplot(data = region_sex, aes(x= region, y = pct, fill = sex)) +geom_col()+coord_flip()
1655442931625:welfare %>%
1655442931628:select(code_region, region) %>%
1655442931628:head
1655442965640:region_income <- welfare %>%
1655442965641:group_by(region,income) %>%
1655442965641:summarise(n = n()) %>%
1655442965641:mutate(tot_group = sum(n)) %>%
1655442965641:mutate(pct = round(n/tot_group*100,2))
1655442966977:region_income
1655442975865:ggplot(data = region_income, aes(x= region, y = pct, fill = income)) +geom_col()+coord_flip()
1655443003983:list_order_income
1655443115631:#직업별 월급 차이
1655443115633:class(welfare$code_job)
1655443116004:table(welfare$code_job)
1655443116743:library(readxl)
1655443117155:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655443117545:list_job
1655443117970:welfare <- left_join(welfare, list_job, id = "code_job")
1655443119060:welfare %>%
1655443119061:filter(!is.na(code_job)) %>%
1655443119062:select(code_job, job) %>%
1655443119062:head(6)
1655443120201:job_income <- welfare %>%
1655443120201:filter (!is.na(job) & !is.na(income)) %>%
1655443120202:group_by(job) %>%
1655443120202:summarise(mean_income = mean(income))
1655443121284:job_income
1655443124932:top10 <- job_income %>%
1655443124933:arrange(desc(mean_income)) %>%
1655443124933:head(10)
1655443125723:top10
1655443126669:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()+
1655443126669:coord_flip()
1655443467667:birth_marriage <- welfare %>%
1655443467669:filter(!is.na(group_marriage)) %>%
1655443467669:group_by(birth,group_marriage) %>%
1655443467669:summarise(n = n()) %>%
1655443467670:mutate(tot_group= sum(n)) %>%
1655443467670:mutate(pct = round(n/tot_group*100,1))
1655443468505:birth_marriage
1655443469163:divorce <- birth_marriage %>%
1655443469164:filter(group_marriage == "divorce") %>%
1655443469164:select(birth,pct)
1655443469639:divorce
1655447204943:class(welfare$religion)
1655447251329:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655447384990:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655447546451:religion_marriage <-welfare %>%
1655447546451:filter(!is.na(marriage)) %>%
1655447546452:group_by(sex,religion) %>%
1655447546452:summarise(mean_marriage = mean(marriage))
1655447548038:religion_marriage
1655447629860:ggplot(data = religion_marraige, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655447629861:scale_x_discrete(limits = c("male", "female"))
1655447647970:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655447647971:scale_x_discrete(limits = c("male", "female"))
1655447749760:ggplot(data = religion_sex, aes(x = sex, y = mean_marriage, col = religion))+geom_line()
1655447761372:religion_sex <- welfare %>%
1655447761373:filter(!is.na(marriage)) %>%
1655447761373:group_by(sex,religion) %>%
1655447761374:summarise(mean_marriage = mean(marriage))
1655447762673:religion_sex
1655447764984:ggplot(data = religion_sex, aes(x = sex, y = mean_marriage, col = religion))+geom_line()
1655447780657:yes
1655447880023:religion_marriage <-welfare %>%
1655447880027:filter(!is.na(marriage)) %>%
1655447880027:group_by(sex,religion) %>%
1655447880028:summarise(mean_marriage = mean(marriage))
1655447880920:religion_marriage
1655447882356:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655447882357:scale_x_discrete(limits = c("male", "female"))
1655448207643:welfare <- rename(welfare,
1655448207644:sex = h10_g3,  #성별
1655448207645:birth = h10_g4,  # 태어난 연도
1655448207645:marriage = h10_g10,  # 혼인상태
1655448207645:religion = h10_g11,  #종교
1655448207645:income = p1002_8aq1,  #월급
1655448207646:code_job = h10_eco9,   #직업 코드
1655448207646:code_region = h10_reg7)  #지역 코드
1655448208551:head(welfare,3)
1655448211281:welfare <- rename(welfare,
1655448211281:sex = h10_g3,  #성별
1655448211282:birth = h10_g4,  # 태어난 연도
1655448211282:marriage = h10_g10,  # 혼인상태
1655448211282:religion = h10_g11,  #종교
1655448211283:income = p1002_8aq1,  #월급
1655448211283:code_job = h10_eco9,   #직업 코드
1655448211283:code_region = h10_reg7)  #지역 코드
1655448226711:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655448232302:install.packages("foreign")
1655448241176:install.packages("foreign")
1655448290487:library(foreign)
1655448291717:library(dplyr)
1655448293236:library(ggplot2)
1655448294293:library(readxl)
1655448295505:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655448300412:welfare<- raw_welfare
1655448301988:welfare <- rename(welfare,
1655448301989:sex = h10_g3,  #성별
1655448301989:birth = h10_g4,  # 태어난 연도
1655448301989:marriage = h10_g10,  # 혼인상태
1655448301990:religion = h10_g11,  #종교
1655448301990:income = p1002_8aq1,  #월급
1655448301990:code_job = h10_eco9,   #직업 코드
1655448301990:code_region = h10_reg7)  #지역 코드
1655448303797:head(welfare,3)
1655448304861:welfare$age <-2015 - welfare$birth +1
1655448305878:head(welfare,3)
1655448306773:summary(welfare$age)
1655448307544:qplot(welfare$age)
1655448309081:class(welfare$birth)
1655448310240:class(welfare$marriage)
1655448310809:qplot(welfare$marriage)
1655448315355:table(welfare$group_marriage)
1655448316137:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655448324179:table(welfare$group_marriage)
1655448325098:welfare$group_marriage
1655448325943:table(is.na(welfare$group_marriage))
1655448326847:qplot(welfare$group_marriage)
1655448331802:birth_marriage <- welfare %>%
1655448331803:filter(!is.na(group_marriage)) %>%
1655448331803:group_by(birth,group_marriage) %>%
1655448331804:summarise(n = n()) %>%
1655448331804:mutate(tot_group= sum(n)) %>%
1655448331804:mutate(pct = round(n/tot_group*100,1))
1655448332739:birth_marriage
1655448333473:divorce <- birth_marriage %>%
1655448333473:filter(group_marriage == "divorce") %>%
1655448333474:select(birth,pct)
1655448334302:divorce
1655448335048:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655448621879:class(welfare$code_region)
1655448622203:table(welfare$code_region)
1655448622729:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655448623692:list_region
1655448624260:welfare <-left_join(welfare, list_region, id = "code_region")
1655448624666:welfare %>%
1655448624666:select(code_region, region) %>%
1655448624667:head
1655448625330:region_sex <- welfare %>%
1655448625330:group_by(region,sex) %>%
1655448625331:summarise(n = n()) %>%
1655448625331:mutate(tot_group = sum(n)) %>%
1655448625331:mutate(pct = round(n/tot_group*100,2))
1655448626189:region_sex
1655448626755:ggplot(data = region_sex, aes(x= region, y = pct, fill = sex)) +geom_col()+coord_flip()
1655448692426:ggplot(data = region_sex, aes(x= region, y = "male","female", fill = sex)) +geom_col()+coord_flip()
1655448716205:ggplot(data = region_sex, aes(x= region, y = "male","female", fill = sex)) +geom_col()+coord_flip()
1655448783062:class(welfare$sex)
1655448783405:class(welfare$income)
1655448783776:table(welfare$sex)  #빈도테이블
1655448784085:welfare$sex <- ifelse(welfare$sex ==9, NA, welfare$sex)
1655448784330:table(is.na(welfare$sex))
1655448784682:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448785085:table(welfare$sex)
1655448785804:qplot(welfare$sex)  #여자의 비율이 남자의 비율보다 높다.
1655448798359:#변수 검토및 전처리
1655448798359:ggplot(data = welfare, aes(x=sex))+geom_bar()
1655448800086:table(welfare$sex)
1655448800801:class(welfare$income)
1655448801181:summary(welfare$income)
1655448802459:#연봉이 얼마나 쏠려있는지
1655448802459:qplot(welfare$income) + xlim(0,1000)
1655448875304:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655448876609:list_region
1655448877495:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448878596:welfare <-left_join(welfare, list_region, id = "code_region")
1655448879009:welfare %>%
1655448879010:select(code_region, region) %>%
1655448879010:head
1655448879597:region_sex <- welfare %>%
1655448879598:group_by(region,sex) %>%
1655448879598:summarise(n = n()) %>%
1655448879598:mutate(tot_group = sum(n)) %>%
1655448879598:mutate(pct = round(n/tot_group*100,2))
1655448880472:region_sex
1655448881418:ggplot(data = region_sex, aes(x= region, y = "male","female", fill = sex)) +geom_col()+coord_flip()
1655448905680:class(welfare$sex)
1655448905885:class(welfare$religion)
1655448906501:class(welfare$marriage)
1655448906666:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655448906833:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448906988:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655448907125:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655448907268:religion_marriage <-welfare %>%
1655448907269:filter(!is.na(marriage)) %>%
1655448907269:group_by(sex,religion) %>%
1655448907269:summarise(mean_marriage = mean(marriage))
1655448907450:religion_marriage
1655448907693:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655448907694:scale_x_discrete(limits = c("male", "female"))
1655448916118:class(welfare$sex)
1655448916731:class(welfare$religion)
1655448916988:class(welfare$marriage)
1655448917192:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655448917508:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448918290:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655448919166:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655448919484:religion_marriage <-welfare %>%
1655448919485:filter(!is.na(marriage)) %>%
1655448919485:group_by(sex,religion) %>%
1655448919485:summarise(mean_marriage = mean(marriage))
1655448920046:religion_marriage
1655448920349:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655448920350:scale_x_discrete(limits = c("male", "female"))
1655448924589:ggplot(data = region_sex, aes(x= region, y = "male","female", fill = sex)) +geom_col()+coord_flip()
1655448925048:class(welfare$sex)
1655448925049:class(welfare$religion)
1655448925467:class(welfare$marriage)
1655448925672:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655448925870:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448926591:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655448927172:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655448927722:religion_marriage <-welfare %>%
1655448927722:filter(!is.na(marriage)) %>%
1655448927722:group_by(sex,religion) %>%
1655448927723:summarise(mean_marriage = mean(marriage))
1655448928225:religion_marriage
1655448928544:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655448928545:scale_x_discrete(limits = c("male", "female"))
1655448943106:class(welfare$religion)
1655448943594:class(welfare$marriage)
1655448943778:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655448943987:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655448944192:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655448944395:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655448944587:religion_marriage <-welfare %>%
1655448944588:filter(!is.na(marriage)) %>%
1655448944588:group_by(sex,religion) %>%
1655448944588:summarise(mean_marriage = mean(marriage))
1655448944788:religion_marriage
1655448945002:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655448945002:scale_x_discrete(limits = c("male", "female"))
1655449068997:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449069577:religion_marriage <-welfare %>%
1655449069578:filter(!is.na(marriage)) %>%
1655449069578:group_by(sex,religion) %>%
1655449069578:summarise(mean_marriage = mean(marriage))
1655449070348:religion_marriage
1655449070886:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655449070887:scale_x_discrete(limits = c("male", "female"))
1655449142937:install.packages("foreign")
1655449149018:install.packages("foreign")
1655449151530:library(foreign)
1655449153988:library(dplyr)
1655449155350:library(ggplot2)
1655449156125:library(readxl)
1655449157358:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449159875:welfare<- raw_welfare
1655449162440:welfare <- rename(welfare,
1655449162441:sex = h10_g3,  #성별
1655449162441:birth = h10_g4,  # 태어난 연도
1655449162441:marriage = h10_g10,  # 혼인상태
1655449162442:religion = h10_g11,  #종교
1655449162442:income = p1002_8aq1,  #월급
1655449162442:code_job = h10_eco9,   #직업 코드
1655449162442:code_region = h10_reg7)  #지역 코드
1655449164979:head(welfare,3)
1655449165760:welfare$age <-2015 - welfare$birth +1
1655449166215:head(welfare,3)
1655449166672:summary(welfare$age)
1655449167298:qplot(welfare$age)
1655449168225:class(welfare$sex)
1655449168960:class(welfare$income)
1655449169466:table(welfare$sex)  #빈도테이블
1655449169825:welfare$sex <- ifelse(welfare$sex ==9, NA, welfare$sex)
1655449170182:table(is.na(welfare$sex))
1655449170554:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449170962:table(welfare$sex)
1655449171346:qplot(welfare$sex)  #여자의 비율이 남자의 비율보다 높다.
1655449172093:#변수 검토및 전처리
1655449172093:ggplot(data = welfare, aes(x=sex))+geom_bar()
1655449172539:table(welfare$sex)
1655449172866:class(welfare$income)
1655449173088:summary(welfare$income)
1655449173281:#연봉이 얼마나 쏠려있는지
1655449173281:qplot(welfare$income) + xlim(0,1000)
1655449173672:#값이 0인 것이 존재한다는 것은 이상치가 존재한다는 것이기 때문에 결측치로 바꾸어 줘야한다.모름 9999도 결측치로 바꿔줘야한다.
1655449173672:welfare$income <- ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
1655449174106:table(is.na(welfare$income))
1655449174530:sex_income <- welfare %>%
1655449174531:filter(!is.na(income))%>%
1655449174531:group_by(sex)%>%
1655449174531:summarise(mean_income = mean(income))
1655449175008:sex_income
1655449175495:#geom_bar()
1655449175495:ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
1655449175895:class(welfare$birth)
1655449176384:#가장 어린 사람 2014년생 가장 나이 많은 사람 1907년생
1655449176384:summary(welfare$birth)
1655449176753:qplot(welfare$birth)
1655449177196:table(is.na(welfare$birth))
1655449177254:welfare$birth <- ifelse(welfare$birth == 9999, NA,welfare$birth)
1655449177721:welfare$age <- 2015 - welfare$birth +1
1655449178064:summary(welfare$age)
1655449178391:qplot(welfare$age)
1655449178793:age_income <- welfare %>%
1655449178793:filter(!is.na(income)) %>%
1655449178793:group_by(age) %>%
1655449178794:summarise(mean_income = mean(income))
1655449179484:age_income
1655449179750:ggplot(data = age_income, aes(x =age, y = mean_income))+geom_line()
1655449180066:welfare$age <- 2015 - welfare$birth +1
1655449180540:head(welfare,3)
1655449181088:summary(welfare$age)
1655449181333:qplot(welfare$age)
1655449181729:#연령대에 따른 임금
1655449181729:welfare <- welfare%>%
1655449181729:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655449181787:summary(welfare$ageg)
1655449182031:table(welfare$ageg)
1655449182200:qplot(welfare$ageg)
1655449182514:class(welfare$income)
1655449182515:summary(welfare$income)
1655449182685:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655449182915:table(is.na(welfare$income))
1655449183106:ageg_income <- welfare %>%
1655449183107:filter(!is.na(income)) %>%
1655449183107:group_by(ageg) %>%
1655449183107:summarize(mean_income = mean(income))
1655449183832:ageg_income
1655449184519:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655449184519:scale_x_discrete(limits = c("young", "middle", "old"))
1655449184858:class(welfare$sex)
1655449185325:table(welfare$sex)
1655449185945:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449186341:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449186522:table(welfare$sex)
1655449186709:sex_income <-welfare %>%
1655449186709:filter(!is.na(income)) %>%
1655449186710:group_by(ageg,sex) %>%
1655449186710:summarise(mean_income = mean(income))
1655449187206:sex_income
1655449187388:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655449187388:scale_x_discrete(limits = c("young", "middle","old"))
1655449187775:sex_age <- welfare %>%
1655449187775:filter(!is.na(income)) %>%
1655449187776:group_by(age,sex) %>%
1655449187776:summarise(mean_income = mean(income))
1655449187856:sex_age
1655449189006:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
1655449190213:#직업별 월급 차이
1655449190214:class(welfare$code_job)
1655449191461:table(welfare$code_job)
1655449191986:library(readxl)
1655449192126:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655449192307:list_job
1655449192811:welfare <- left_join(welfare, list_job, id = "code_job")
1655449192955:welfare %>%
1655449192955:filter(!is.na(code_job)) %>%
1655449192956:select(code_job, job) %>%
1655449192956:head(6)
1655449193191:job_income <- welfare %>%
1655449193192:filter (!is.na(job) & !is.na(income)) %>%
1655449193192:group_by(job) %>%
1655449193192:summarise(mean_income = mean(income))
1655449193773:job_income
1655449194145:top10 <- job_income %>%
1655449194146:arrange(desc(mean_income)) %>%
1655449194146:head(10)
1655449194532:top10
1655449194777:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()+
1655449194778:coord_flip()
1655449195292:#하위 10개
1655449195292:bottom10 <- job_income %>%
1655449195293:arrange(mean_income) %>%
1655449195293:head(10)
1655449196776:bottom10
1655449197928:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))+geom_col()+
1655449197928:coord_flip() +ylim(0,850)
1655449198564:#성별 직업 빈도
1655449198564:job_male <- welfare %>%
1655449198565:filter(!is.na(job) & sex =="female") %>%
1655449198565:group_by(job) %>%
1655449198565:summarise(n = n()) %>%
1655449198565:arrange(desc(n)) %>%
1655449198565:head(10)
1655449200525:job_female
1655449201608:ggplot(data = job_male, aes(x = reorder(job,n),y = n)) +geom_col() + coord_flip()
1655449213566:class(welfare$birth)
1655449213952:class(welfare$marriage)
1655449214385:qplot(welfare$marriage)
1655449214796:table(welfare$group_marriage)
1655449215361:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449216004:table(welfare$group_marriage)
1655449216515:welfare$group_marriage
1655449217071:table(is.na(welfare$group_marriage))
1655449217607:qplot(welfare$group_marriage)
1655449218002:birth_marriage <- welfare %>%
1655449218003:filter(!is.na(group_marriage)) %>%
1655449218003:group_by(birth,group_marriage) %>%
1655449218003:summarise(n = n()) %>%
1655449218003:mutate(tot_group= sum(n)) %>%
1655449218003:mutate(pct = round(n/tot_group*100,1))
1655449218832:birth_marriage
1655449244862:divorce <- birth_marriage %>%
1655449244864:filter(group_marriage == "divorce") %>%
1655449244865:select(birth,pct)
1655449245397:divorce
1655449246093:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655449247074:class(welfare$code_region)
1655449249831:table(welfare$code_region)
1655449250513:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655449251145:list_region
1655449251731:welfare <-left_join(welfare, list_region, id = "code_region")
1655449252536:welfare %>%
1655449252536:select(code_region, region) %>%
1655449252536:head
1655449253258:region_sex <- welfare %>%
1655449253259:group_by(region,sex) %>%
1655449253259:summarise(n = n()) %>%
1655449253259:mutate(tot_group = sum(n)) %>%
1655449253260:mutate(pct = round(n/tot_group*100,2))
1655449254164:region_sex
1655449254734:ggplot(data = region_sex, aes(x= region, y = pct, fill = sex)) +geom_col()+coord_flip()
1655449265647:class(welfare$code_region)
1655449266030:table(welfare$code_region)
1655449266229:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655449266474:list_region
1655449266925:welfare <-left_join(welfare, list_region, id = "code_region")
1655449267235:welfare %>%
1655449267236:select(code_region, region) %>%
1655449267236:head
1655449267701:region_income <- welfare %>%
1655449267702:group_by(region,income) %>%
1655449267702:summarise(n = n()) %>%
1655449267703:mutate(tot_group = sum(n)) %>%
1655449267703:mutate(pct = round(n/tot_group*100,2))
1655449268198:region_income
1655449268565:ggplot(data = region_income, aes(x= region, y = pct, fill = income)) +geom_col()+coord_flip()
1655449276889:list_order_income <- region_income %>%
1655449276889:filter(income =="")
1655449278274:class(welfare$sex)
1655449279353:table(welfare$sex)
1655449280352:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449281065:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449308902:class(welfare$sex)
1655449309627:table(welfare$sex)
1655449310202:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449310676:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449311092:table(welfare$sex)
1655449311780:sex_income <-welfare %>%
1655449311780:filter(!is.na(income)) %>%
1655449311780:group_by(ageg,sex) %>%
1655449311781:summarise(mean_income = mean(income))
1655449312555:sex_income
1655449313582:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655449313582:scale_x_discrete(limits = c("young", "middle","old"))
1655449314209:sex_age <- welfare %>%
1655449314209:filter(!is.na(income)) %>%
1655449314210:group_by(age,sex) %>%
1655449314210:summarise(mean_income = mean(income))
1655449322976:sex_income <-welfare %>%
1655449322978:filter(!is.na(income)) %>%
1655449322979:group_by(ageg,sex) %>%
1655449322979:summarise(mean_income = mean(income))
1655449323502:sex_income
1655449323874:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655449323874:scale_x_discrete(limits = c("young", "middle","old"))
1655449324712:sex_age <- welfare %>%
1655449324712:filter(!is.na(income)) %>%
1655449324713:group_by(age,sex) %>%
1655449324713:summarise(mean_income = mean(income))
1655449325233:sex_age
1655449325603:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
1655449326630:class(welfare$sex)
1655449329252:class(welfare$religion)
1655449329801:class(welfare$marriage)
1655449330206:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449330609:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449330991:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655449331370:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449331825:religion_marriage <-welfare %>%
1655449331825:filter(!is.na(marriage)) %>%
1655449331826:group_by(sex,religion) %>%
1655449331826:summarise(mean_marriage = mean(marriage))
1655449332328:religion_marriage
1655449332680:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655449332680:scale_x_discrete(limits = c("male", "female"))
1655449504843:region_income <- welfare %>%
1655449504845:group_by(region,income) %>%
1655449504845:summarise(n = n()) %>%
1655449504845:mutate(tot_group = sum(n)) %>%
1655449504846:mutate(pct = round(n/tot_group*100,2))
1655449505405:region_income
1655449506107:ggplot(data = region_income, aes(x= region, y = pct, fill = income)) +geom_col()+coord_flip()
1655449682703:class(welfare$birth)
1655449682878:class(welfare$marriage)
1655449683120:qplot(welfare$marriage)
1655449683535:table(welfare$group_marriage)
1655449683578:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449684468:table(welfare$group_marriage)
1655449685332:welfare$group_marriage
1655449685736:table(is.na(welfare$group_marriage))
1655449686112:qplot(welfare$group_marriage)
1655449687369:birth_marriage <- welfare %>%
1655449687370:filter(!is.na(group_marriage)) %>%
1655449687370:group_by(birth,group_marriage) %>%
1655449687371:summarise(n = n()) %>%
1655449687371:mutate(tot_group= sum(n)) %>%
1655449687371:mutate(pct = round(n/tot_group*100,1))
1655449687922:birth_marriage
1655449688513:divorce <- birth_marriage %>%
1655449688514:filter(group_marriage == "divorce") %>%
1655449688514:select(birth,pct)
1655449689094:divorce
1655449689904:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655449749242:table(welfare$code_region)
1655449749413:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655449749660:list_region
1655449749926:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449750145:welfare <-left_join(welfare, list_region, id = "code_region")
1655449750302:welfare %>%
1655449750303:select(code_region, region) %>%
1655449750303:head
1655449750732:region_sex <- welfare %>%
1655449750732:group_by(region,sex) %>%
1655449750732:summarise(n = n()) %>%
1655449750733:mutate(tot_group = sum(n)) %>%
1655449750733:mutate(pct = round(n/tot_group*100,2))
1655449751163:region_sex
1655449751594:ggplot(data = region_sex, aes(x= region, y = "male","female", fill = sex)) +geom_col()+coord_flip()
1655449792875:class(welfare$sex)
1655449793161:class(welfare$religion)
1655449793375:class(welfare$marriage)
1655449793556:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449793734:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449793902:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655449794073:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449794245:religion_marriage <-welfare %>%
1655449794245:filter(!is.na(marriage)) %>%
1655449794245:group_by(sex,religion) %>%
1655449794245:summarise(mean_marriage = mean(marriage))
1655449794571:religion_marriage
1655449794838:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655449794839:scale_x_discrete(limits = c("male", "female"))
1655449803280:class(welfare$sex)
1655449803476:class(welfare$religion)
1655449803672:class(welfare$marriage)
1655449803843:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449804018:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449804221:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655449804439:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449804632:religion_marriage <-welfare %>%
1655449804632:filter(!is.na(marriage)) %>%
1655449804632:group_by(sex,religion) %>%
1655449804633:summarise(mean_marriage = mean(marriage))
1655449804835:religion_marriage
1655449805118:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655449805118:scale_x_discrete(limits = c("male", "female"))
1655449809164:install.packages("foreign")
1655449813876:library(foreign)
1655449814099:library(dplyr)
1655449814116:library(ggplot2)
1655449814129:library(readxl)
1655449814140:install.packages("foreign")
1655449818418:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449818420:welfare<- raw_welfare
1655449818422:install.packages("foreign")
1655449822665:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449829616:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449834353:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449837176:install.packages("foreign")
1655449840766:library(foreign)
1655449841909:library(dplyr)
1655449843331:library(ggplot2)
1655449844410:library(readxl)
1655449845328:raw_welfare <- read.spss(file = "Koweps_hpc10_2015_beta1.sav",to.data.frame = T)
1655449846620:welfare<- raw_welfare
1655449847551:View(welfare)
1655449850877:head(welfare)
1655449851527:dim(welfare)
1655449851974:welfare <- rename(welfare,
1655449851974:sex = h10_g3,  #성별
1655449851975:birth = h10_g4,  # 태어난 연도
1655449851975:marriage = h10_g10,  # 혼인상태
1655449851975:religion = h10_g11,  #종교
1655449851975:income = p1002_8aq1,  #월급
1655449851976:code_job = h10_eco9,   #직업 코드
1655449851976:code_region = h10_reg7)  #지역 코드
1655449853180:head(welfare,3)
1655449853810:welfare$age <-2015 - welfare$birth +1
1655449854171:head(welfare,3)
1655449854587:summary(welfare$age)
1655449855073:qplot(welfare$age)
1655449855943:class(welfare$sex)
1655449856361:class(welfare$income)
1655449856706:table(welfare$sex)  #빈도테이블
1655449857164:welfare$sex <- ifelse(welfare$sex ==9, NA, welfare$sex)
1655449857490:table(is.na(welfare$sex))
1655449857893:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449858278:table(welfare$sex)
1655449858631:qplot(welfare$sex)  #여자의 비율이 남자의 비율보다 높다.
1655449859002:#변수 검토및 전처리
1655449859002:ggplot(data = welfare, aes(x=sex))+geom_bar()
1655449859326:table(welfare$sex)
1655449859872:class(welfare$income)
1655449860202:summary(welfare$income)
1655449860397:#연봉이 얼마나 쏠려있는지
1655449860398:qplot(welfare$income) + xlim(0,1000)
1655449860811:#값이 0인 것이 존재한다는 것은 이상치가 존재한다는 것이기 때문에 결측치로 바꾸어 줘야한다.모름 9999도 결측치로 바꿔줘야한다.
1655449860811:welfare$income <- ifelse(welfare$income %in% c(0,9999),NA,welfare$income)
1655449861348:table(is.na(welfare$income))
1655449861546:sex_income <- welfare %>%
1655449861546:filter(!is.na(income))%>%
1655449861547:group_by(sex)%>%
1655449861547:summarise(mean_income = mean(income))
1655449861753:sex_income
1655449862208:#geom_bar()
1655449862209:ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col()
1655449862516:class(welfare$birth)
1655449862584:#가장 어린 사람 2014년생 가장 나이 많은 사람 1907년생
1655449862585:summary(welfare$birth)
1655449863140:qplot(welfare$birth)
1655449863920:table(is.na(welfare$birth))
1655449864481:welfare$birth <- ifelse(welfare$birth == 9999, NA,welfare$birth)
1655449864820:welfare$age <- 2015 - welfare$birth +1
1655449865043:summary(welfare$age)
1655449865289:qplot(welfare$age)
1655449865680:age_income <- welfare %>%
1655449865680:filter(!is.na(income)) %>%
1655449865681:group_by(age) %>%
1655449865681:summarise(mean_income = mean(income))
1655449865732:age_income
1655449866245:ggplot(data = age_income, aes(x =age, y = mean_income))+geom_line()
1655449866574:welfare$age <- 2015 - welfare$birth +1
1655449866588:head(welfare,3)
1655449866812:summary(welfare$age)
1655449867276:qplot(welfare$age)
1655449868038:#연령대에 따른 임금
1655449868039:welfare <- welfare%>%
1655449868039:mutate(ageg = ifelse(age <30, "young", ifelse(age <=59, "middle", "old")))
1655449868442:summary(welfare$ageg)
1655449868621:table(welfare$ageg)
1655449868881:qplot(welfare$ageg)
1655449869242:class(welfare$income)
1655449869702:summary(welfare$income)
1655449870075:welfare$income <- ifelse(welfare$income %in% c(0,9999), NA,welfare$income)
1655449870406:table(is.na(welfare$income))
1655449870711:ageg_income <- welfare %>%
1655449870712:filter(!is.na(income)) %>%
1655449870712:group_by(ageg) %>%
1655449870712:summarize(mean_income = mean(income))
1655449871141:ageg_income
1655449871433:ggplot(data = ageg_income, aes(x = ageg , y = mean_income)) + geom_col()+
1655449871434:scale_x_discrete(limits = c("young", "middle", "old"))
1655449871736:class(welfare$sex)
1655449872140:table(welfare$sex)
1655449872403:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449872688:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449873212:table(welfare$sex)
1655449873492:sex_income <-welfare %>%
1655449873492:filter(!is.na(income)) %>%
1655449873492:group_by(ageg,sex) %>%
1655449873493:summarise(mean_income = mean(income))
1655449873689:sex_income
1655449873972:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655449873972:scale_x_discrete(limits = c("young", "middle","old"))
1655449874414:sex_age <- welfare %>%
1655449874414:filter(!is.na(income)) %>%
1655449874415:group_by(age,sex) %>%
1655449874415:summarise(mean_income = mean(income))
1655449874503:sex_age
1655449875062:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
1655449875572:#직업별 월급 차이
1655449875572:class(welfare$code_job)
1655449875875:table(welfare$code_job)
1655449876148:library(readxl)
1655449876451:list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
1655449877049:list_job
1655449877288:welfare <- left_join(welfare, list_job, id = "code_job")
1655449877657:welfare %>%
1655449877657:filter(!is.na(code_job)) %>%
1655449877657:select(code_job, job) %>%
1655449877658:head(6)
1655449878349:job_income <- welfare %>%
1655449878351:filter (!is.na(job) & !is.na(income)) %>%
1655449878351:group_by(job) %>%
1655449878351:summarise(mean_income = mean(income))
1655449878703:job_income
1655449878817:top10 <- job_income %>%
1655449878817:arrange(desc(mean_income)) %>%
1655449878818:head(10)
1655449879292:top10
1655449879591:ggplot(data = top10, aes(x = reorder(job, mean_income),y= mean_income)) +geom_col()+
1655449879591:coord_flip()
1655449880044:#하위 10개
1655449880044:bottom10 <- job_income %>%
1655449880044:arrange(mean_income) %>%
1655449880045:head(10)
1655449880048:bottom10
1655449880457:ggplot(data = bottom10, aes(x = reorder(job, -mean_income), y = mean_income))+geom_col()+
1655449880457:coord_flip() +ylim(0,850)
1655449880891:#성별 직업 빈도
1655449880891:job_female <- welfare %>%
1655449880891:filter(!is.na(job) & sex =="female") %>%
1655449880891:group_by(job) %>%
1655449880892:summarise(n = n()) %>%
1655449880892:arrange(desc(n)) %>%
1655449880892:head(10)
1655449880937:job_female
1655449881075:ggplot(data = job_male, aes(x = reorder(job,n),y = n)) +geom_col() + coord_flip()
1655449881437:class(welfare$birth)
1655449881657:class(welfare$marriage)
1655449881976:qplot(welfare$marriage)
1655449882377:table(welfare$group_marriage)
1655449882378:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449882747:table(welfare$group_marriage)
1655449883176:welfare$group_marriage
1655449883472:table(is.na(welfare$group_marriage))
1655449884132:qplot(welfare$group_marriage)
1655449884476:birth_marriage <- welfare %>%
1655449884476:filter(!is.na(group_marriage)) %>%
1655449884477:group_by(birth,group_marriage) %>%
1655449884477:summarise(n = n()) %>%
1655449884477:mutate(tot_group= sum(n)) %>%
1655449884477:mutate(pct = round(n/tot_group*100,1))
1655449884699:birth_marriage
1655449885316:divorce <- birth_marriage %>%
1655449885316:filter(group_marriage == "divorce") %>%
1655449885316:select(birth,pct)
1655449885571:divorce
1655449885903:ggplot(data = divorce, aes(x = birth, y = pct)) + geom_col()
1655449886290:class(welfare$code_region)
1655449886486:table(welfare$code_region)
1655449886678:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655449886889:list_region
1655449887063:welfare <-left_join(welfare, list_region, id = "code_region")
1655449887241:welfare %>%
1655449887241:select(code_region, region) %>%
1655449887241:head
1655449887407:region_sex <- welfare %>%
1655449887407:group_by(region,sex) %>%
1655449887407:summarise(n = n()) %>%
1655449887407:mutate(tot_group = sum(n)) %>%
1655449887408:mutate(pct = round(n/tot_group*100,2))
1655449887591:region_sex
1655449887946:ggplot(data = region_sex, aes(x= region, y = pct, fill = sex)) +geom_col()+coord_flip()
1655449888472:class(welfare$code_region)
1655449888660:table(welfare$code_region)
1655449888818:list_region <- data.frame(code_region = c(1:7), region = c("서울", "수도권(인천/경기)","부산/경남/울산","대구/경북","대전/충남","강원,충북","광주/전남/전북/제주도"))
1655449889297:list_region
1655449889453:welfare <-left_join(welfare, list_region, id = "code_region")
1655449889678:welfare %>%
1655449889679:select(code_region, region) %>%
1655449889679:head
1655449889832:region_income <- welfare %>%
1655449889832:group_by(region,income) %>%
1655449889832:summarise(n = n()) %>%
1655449889833:mutate(tot_group = sum(n)) %>%
1655449889833:mutate(pct = round(n/tot_group*100,2))
1655449889973:region_income
1655449890211:ggplot(data = region_income, aes(x= region, y = pct, fill = income)) +geom_col()+coord_flip()
1655449890438:list_order_income <- region_income %>%
1655449890438:filter(income =="")
1655449890828:class(welfare$sex)
1655449890939:table(welfare$sex)
1655449891090:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449891410:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449891544:table(welfare$sex)
1655449891869:sex_income <-welfare %>%
1655449891871:filter(!is.na(income)) %>%
1655449891871:group_by(ageg,sex) %>%
1655449891871:summarise(mean_income = mean(income))
1655449892021:sex_income
1655449892379:ggplot(data = sex_income, aes(x = ageg, y = mean_income, fill = sex))+geom_col(position = "dodge")+
1655449892380:scale_x_discrete(limits = c("young", "middle","old"))
1655449892799:sex_age <- welfare %>%
1655449892799:filter(!is.na(income)) %>%
1655449892799:group_by(age,sex) %>%
1655449892799:summarise(mean_income = mean(income))
1655449893094:sex_age
1655449893660:ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex))+geom_line()
1655449900484:class(welfare$sex)
1655449902564:class(welfare$religion)
1655449903010:class(welfare$marriage)
1655449903378:welfare$sex <- ifelse(welfare$sex == 9, NA ,welfare$sex)
1655449903739:welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
1655449904138:welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
1655449904489:welfare$group_marriage <- ifelse(welfare$marriage ==1, "marraige", ifelse(welfare$marriage ==3, "divorce",NA))
1655449904721:religion_marriage <-welfare %>%
1655449904721:filter(!is.na(marriage)) %>%
1655449904721:group_by(sex,religion) %>%
1655449904721:summarise(mean_marriage = mean(marriage))
1655449905034:religion_marriage
1655449905293:ggplot(data = religion_marriage, aes(x = sex, y = mean_marriage, fill = religion))+geom_col(position = "dodge")+
1655449905294:scale_x_discrete(limits = c("male", "female"))
1664173503839:install.packages("ggplot2")
1664173519328:library(ggplot2)
1664173520723:housing.df<-read.csv("BostonHousing.csv")
1664173619302:housing.df<-read.csv("BostonHousing.csv")
1664173651334:install.packages("ggplot2")
1664173656899:install.packages("ggplot2")
1664173684412:library(ggplot2)
1664173684801:housing.df<-read.csv("BostonHousing.csv")
1664173784231:install.packages("ggplot2")
1664173850570:install.packages("ggplot2")
1664173912434:install.packages("ggplot2")
1664173974211:library(ggplot2)
1664173974580:read.csv2("BostonHousing")
1664173974606:read.csv2("BostonHousing")
1664630088982:Housing.df <- read.csv("WesRoxbury.csv", header =TRUE)
1664630158670:Housing.df <- read.csv("WestRoxbury.csv", header =TRUE)
1664630177946:dim(housing.df)
1664630407310:housing.df <- read.csv("WestRoxbury.csv", header =TRUE)
1664630427082:head(housing.df)
1664630435435:View (housing.df)
1664630484077:housing.df&TOTAL_VALUE
1664630525251:mean(hosuing.df$TOTAL_VALUE)
1664630534219:mean(housing.df$TOTAL_VALUE)
1664630550931:housing.df[1:10.1]
1664630552217:mean(housing.df$TOTAL_VALUE)
1664630589704:housing.df$TOTAL.VALUE
1664630590883:mean(housing.df$TOTAL_VALUE)
1664630598760:housing.df$TOTAL_VALUE
1664630600094:mean(housing.df$TOTAL_VALUE)
1664631230703:name(housing.df)
1664631236427:names(housing.df)
1664631303749:t(t(names)(housing.df)))
1664631315841:t(t(names(housing.df)))
1664631479601:colnames(housing.df)[i]
1664631506614:colnames(housing.df)[1] <- c("TOTAL_VALUE")
1664631556571:#change the first colum's name
1664631556573:class(housing.df$REMODEL)
1664631726547:class(hosing.df[ ,14]) #Same
1664631730587:class(housing.df[ ,14]) #Same
1664631740778:levels(hosuing.df[ ,14]) #lt can take one of three levels
1664631745900:levels(housing.df[ ,14]) #lt can take one of three levels
1664949288205:bostion.housing.df <-read.csv("BostonHousing.csv", header =TRUE)
1664949298925:head(boston.housing.df,9)
1664949309056:boston.housing.df <-read.csv("BostonHousing.csv", header =TRUE)
1664949310012:head(boston.housing.df,9)
1664949320552:summary(boston.housing.df)
1664949391739:sd(bostion.housing.df$CRIM)
1664949466532:table(boston.housing.df$CHAS)
1664949596660:boston.housing.df$RM.bin <- .bincode(boston.housing.df$RM, c(1:9))
1664949690151:aggregate(bostion.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin,CHAS=boston.housing.df$CHAS)mFUN=mean)
1664949703280:aggregate(boston.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin,CHAS=boston.housing.df$CHAS)mFUN=mean)
1664949742758:aggregate(boston.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin,CHAS=boston.housing.df$CHAS), FUN=mean)
1665557908011:library(forecast)
1666161211965:car.df <- read.csv("ToyotaCorolla.csv")
1666161237575:car.df <- car.df[i:1000, ]
1666161252153:car.df <- car.df[1:1000, ]
1666161278190:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1666161288691:set.seed(1)
1666161304299:train.index <- sample(c(1:1000),600)
1666161322531:train.df <- car.df[train.index, selected, var]
1666161332492:train.df <- car.df[train.index, selected. var]
1666161359725:train.df <- car.df[train.index, selected.var]
1666161380775:valid.df <- car.df[-train.index, selected.var]
1666161408474:car.lm <- lm(Price -., data = train.df)
1666161453190:car.lm <- lm(Price ~., data = train.df)
1666161464014:optoins(scipen = 999)
1666161476848:options(scipen = 999)
1666161482684:summary(car.lm)
1666162534165:#-----------------
1666162534165:# 여기까지가 통계학적인 것이다.
1666162534165:library(forecast)
1666162551825:car.lm.pred <- predict(car.lm, valid.df)
1666162573195:options(scipen=999, digits=0)
1666162598829:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1666162644630:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20],"Residual" = some.residuals)
1666162689771:options(scipen=999,digits=3)
1666162722142:accuracy(car.lm.pred, valid.df$Price)
1666612056385:table <- matrix(c(0.03,0, 0.52,0, 0.38,0, 0.82,1, 0.33,0, 0.42,0, 0.55,1, 0.59,0, 0.09,0, 0.21,0, 0.43,0, 0.04,0, 0.08,0, 0.13,0, 0.01,0,. 079,1, 0.42,0, 0.29,0, 0.08,0, 0.02,0), ncol=2, byrow=TRUE)
1666612099521:table5.7 <- matrix(c(.03,0,.52,0,.38,0,.82,1,.33,0,.42,0,.55,1,.59,0,.09,0,.21,0,.43,0,.04,0,.08,0,.13,0,.01,0,.79,1,.42,0,.29,0,.08,0,.02,0), ncol=2, byrow=TRUE)
1666612137785:table
1666612141722:table <- matrix(c(.03,0,.52,0,.38,0,.82,1,.33,0,.42,0,.55,1,.59,0,.09,0,.21,0,.43,0,.04,0,.08,0,.13,0,.01,0,.79,1,.42,0,.29,0,.08,0,.02,0), ncol=2, byrow=TRUE)
1666612143288:colnames(table)<-c("Propensity of 1","Actual")
1666612217714:table <- matrix(c(0.03,0, 0.52,0, 0.38,0, 0.82,1, 0.33,0, 0.42,0, 0.55,1, 0.59,0, 0.09,0, 0.21,0, 0.43,0, 0.04,0, 0.08,0, 0.13,0, 0.01,0, 0.79,1, 0.42,0, 0.29,0, 0.08,0, 0.02,0), ncol=2, byrow=TRUE)
1666612219312:colnames(table)<-c("Propensity of 1","Actual")
1666612219784:table<- as.data.frame(table)
1666612221137:table
1666612301413:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612404327:library(caret)
1666612532307:library(caret)
1666612587954:#3
1666612587956:install.packages(caret)
1666612611265:#3
1666612611266:install.packages("caret")
1666612676906:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612704540:table <- matrix(c(0.03,0, 0.52,0, 0.38,0, 0.82,1, 0.33,0, 0.42,0, 0.55,1, 0.59,0, 0.09,0, 0.21,0, 0.43,0, 0.04,0, 0.08,0, 0.13,0, 0.01,0, 0.79,1, 0.42,0, 0.29,0, 0.08,0, 0.02,0), ncol=2, byrow=TRUE)
1666612705377:colnames(table)<-c("Propensity of 1","Actual")
1666612706165:table<- as.data.frame(table)
1666612706687:table
1666612707704:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612734783:#confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612734784:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),
1666612734784:as.factor(table$Actual))
1666612808313:library(e1071)
1666612810624:#confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612810624:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),
1666612810625:as.factor(table$Actual))
1666612892928:#3
1666612892930:install.packages("caret")
1666612899871:library(caret)
1666612907267:table <- matrix(c(0.03,0, 0.52,0, 0.38,0, 0.82,1, 0.33,0, 0.42,0, 0.55,1, 0.59,0, 0.09,0, 0.21,0, 0.43,0, 0.04,0, 0.08,0, 0.13,0, 0.01,0, 0.79,1, 0.42,0, 0.29,0, 0.08,0, 0.02,0), ncol=2, byrow=TRUE)
1666612908728:colnames(table)<-c("Propensity of 1","Actual")
1666612909305:table<- as.data.frame(table)
1666612909832:table
1666612911064:library(e1071)
1666612912288:#confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),as.factor(table$Actual))
1666612912289:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.25, '1', '0')),
1666612912289:as.factor(table$Actual))
1666612974984:#cutoff = 0.5
1666612974985:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.5, '1', '0')),
1666612974986:as.factor(table$Actual))
1666612976443:#cutof=0.75
1666612976444:confusionMatrix(as.factor(ifelse(table$`Propensity of 1`>0.75, '1', '0')),
1666612976444:as.factor(table$Actual))
1667389904231:car.df <- read.csv("ToyotaCorolla.csv")
1667389918554:car.df <- read.csv("ToyotaCorolla.csv")
1667390108095:car.df <- read.csv("ToyotaCorolla.csv")
1667390155066:#숙제 3
1667390155068:library("ToyotaCorolla.csv")
1667390160963:#숙제 3
1667390160963:library(ToyotaCorolla.csv)
1667390255451:car.df <- read.csv("ToyotaCorolla.csv")
1667390263661:car.df <- read.csv("ToyotaCorolla.csv")
1667390310042:car.df <- read.csv("ToyotaCorolla.csv")
1667390419885:car.df <- read.csv("ToyotaCorolla.csv")
1667390654589:#getwd()
1667390654590:#setwd("")
1667390654590:#car.df <- read.csv("ToyotaCorolla.csv")
1667390654591:data = read.csv("ToyotaCorolla.csv", header = T, fileEncoding="euc-kr")
1667391030112:getwd()
1667391037851:setwd("/Users/gimhyeong-geun/Third/ToyotaCorolla.csv")
1667391238326:car.df <- read.csv("ToyotaCorolla.csv")
1667391381559:#car.df <- read.csv("ToyotaCorolla.csv")
1667391381560:getwd()
1667391488379:setwd("\Users\gimhyeong-geun\third")
1667391535525:setwd("\Users\gimhyeong-geun\third\ToyotaCorolla.csv")
1667391543201:setwd("\Users\gimhyeong-geun\Third\ToyotaCorolla.csv")
1667391631738:setwd("\Users\gimhyeong-geun")
1667391636144:getwd()
1667391640417:setwd("\Users\gimhyeong-geun")
1667391640655:getwd()
1667391644018:car.df <- read.csv("ToyotaCorolla.csv")
1667391744485:car.df <- read.csv("ToyotaCorolla.csv")
1667391775236:car.df <- car.df[1:1000, ]
1667391991955:training <- sample(toyota.corolla.df$Id,600)
1667392163498:car.df <- car.df[1:1000, ]
1667392588076:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1667392592477:train.index <-(c(1:1000),500)
1667392608478:train.index <-sample(c(1:1000),500)
1667392692999:valid.index <- sample(c(1:1000), 300)
1667392749936:train.df <- car.df[train.index, selected.var]
1667392770599:valid.df <- car.df[valid.index, selected.var]
1667392797036:test.df <- car.df[-train.index-valid.index, selected.var]
1667392815877:test.df <- car.df[-(train.index+valid.index), selected.var]
1667392833822:test.index <- sample(c(1:1000),200)
1667392867565:#test.df <- car.df[-(train.index+valid.index), selected.var]
1667392867566:test.df <- car.df[test.index, selected.var]
1667392936518:car.lm <- lm(Price ~., data = train.df)
1667969045139:View("ToyotaCorolla.csv")
1667969056437:View(ToyotaCorolla.csv)
1667969587307:car.df <- read.csv("ToyotaCorolla.csv")
1667969588958:car.df <- car.df[1:1000, ]
1667969590516:selected.var <- c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1667969592060:train.index <-sample(c(1:1000),500)
1667969592966:valid.index <- sample(c(1:1000), 300)
1667969593813:test.index <- sample(c(1:1000),200)
1667969594397:train.df <- car.df[train.index, selected.var]
1667969595355:valid.df <- car.df[valid.index, selected.var]
1667969596374:#test.df <- car.df[-(train.index+valid.index), selected.var]
1667969596375:test.df <- car.df[test.index, selected.var]
1667969598044:car.lm <- lm(Price ~., data = train.df)
1667969621499:car.lm <- lm(Age_08_04 ~., data = train.df)
1667969623444:options(scipen = 999)
1667969624826:summary(car.lm)
1667969760180:library(forecast)
1667969786524:car.lm.pred <- predict(car.lm, valid.df)
1667969805252:options(scipen=999, digits = 0)
1667969905150:some.residuals <- valid.df$Age_08_04[1:4] - car.lm.pred[1:4]
1667971985598:reg <- lm(Age_08_04 ~., data=toyota.corolla.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1667976524917:fp.df <- read.csv("Faceplate.csv")
1667976541771:fp.mat <- as.matrix(fp.df[,-1])
1667976603491:#
1667976603491:fp.trans <- as(fp.mat, "transcations")
1667976663688:#convert the binary incidence matrix into a transaction database
1667976663688:fp.trans <- as(fp.mat, "transactions")
1667976777473:#convert the binary incidence matrix into a transaction database
1667976777475:library(ARules)
1667976780481:#convert the binary incidence matrix into a transaction database
1667976780482:library(ARule)
1667976785165:#convert the binary incidence matrix into a transaction database
1667976785165:library(arule)
1667976855787:#convert the binary incidence matrix into a transaction database
1667976855787:install.packages(arule)
1667976884952:#convert the binary incidence matrix into a transaction database
1667976884954:library("arule")
1667976893590:#convert the binary incidence matrix into a transaction database
1667976893590:install.packages("arule")
1667976900452:library("arule")
1667976926092:#convert the binary incidence matrix into a transaction database
1667976926093:library("arules")
1667976952247:#convert the binary incidence matrix into a transaction database
1667976952249:install.packages("arules")
1667976962265:library(arules)
1667976983653:fp.trans <- as(fp.mat, "transactions")
1667976994763:inspect(fp.trans)
1667977197215:rules <- apriori(fp.trans, parameter = list(supp = 0.2, conf = 0.5, target = "rules"))
1667977229117:inspect(head(sort(rules, by = "lift"), n=6))
1667977743217:all.books.df <- read.csv("CharelsBookClub.scv")
1667977786893:all.books.df <- read.csv("CharelsBookClub.scv")
1667977800255:all.books.df <- read.csv("CharlesBookClub.scv")
1667977842114:all.books.df <- read.csv("CharlesBookClub.csv")
1667977938172:#create a binary incidence matrix
1667977938173:count.books.df <- all.books.df[, 8:18]
1667977985604:incid.books.df <- ifelse(count.books.df > 0, 1, 0)
1667992268554:reg <- lm(Age_08_04 ~., data=toyota.corolla.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1667992291466:library(forecast)
1667992336292:reg <- lm(Age_08_04 ~., data=car.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1667992345620:pred_v <- predict(reg, newdata=car.df[validatioin,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], na.action=na.pass)
1667992390034:car.df <- read.csv("ToyotaCorolla.csv")
1667992390712:car.df <- car.df[1:1000, ]
1667992391308:selected.var <- c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1667992391931:train.index <-sample(c(1:1000),500)
1667992392439:valid.index <- sample(c(1:1000), 300)
1667992392763:test.index <- sample(c(1:1000),200)
1667992393180:train.df <- car.df[train.index, selected.var]
1667992393428:valid.df <- car.df[valid.index, selected.var]
1667992393810:#test.df <- car.df[-(train.index+valid.index), selected.var]
1667992393810:test.df <- car.df[test.index, selected.var]
1667992394689:car.lm <- lm(Age_08_04 ~., data = train.df)
1667992395455:options(scipen = 999)
1667992395866:summary(car.lm)
1667992402653:library(forecast)
1667992403675:reg <- lm(Age_08_04 ~., data=car.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1667993525940:housing.df <- read.csv("BostonHousing.csv")
1667993588713:housing.df <- read.csv("BostonHousing.csv")
1667993827133:setwd("/Users/gimhyeong-geun/Third/BostonHousing.csv")
1667993838238:setwd("D:/Users/gimhyeong-geun/Third/BostonHousing.csv")
1667993878060:setwd("C:/gimhyeong-geun/Third")
1667993915964:setwd("C:/users/gimhyeong-geun/Third")
1667993925610:setwd("C:/Users/gimhyeong-geun/Third")
1667993933994:setwd("C:/Users/gimhyeong-geun/Desktop")
1667994015788:housing.df <- read.csv("BostonHousing.csv")
1667994092318:set.seed(123)
1667994093801:train.index <- sample(row.names(housing.df), 0.6*dim(housing.df)[1])
1667994094510:valid.index <- setdiff(row.names(housing.df), train.index)
1667994095061:train.df <- housing.df[train.index, -14]
1667994095458:valid.df <- housing.df[valid.index, -14]
1667994150454:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994153410:train.norm.df <- train.df
1667994154194:valid.norm.df <- valid.df
1667994154503:housing.norm.df <-housing.df
1667994154876:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994169525:set.seed(123)
1667994172302:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994211487:housing.df <- read.csv("BostonHousing.csv")
1667994212087:set.seed(123)
1667994212507:train.index <- sample(row.names(housing.df), 0.6*dim(housing.df)[1])
1667994213126:valid.index <- setdiff(row.names(housing.df), train.index)
1667994213769:train.df <- housing.df[train.index, -14]
1667994214866:valid.df <- housing.df[valid.index, -14]
1667994215514:train.norm.df <- train.df
1667994215819:valid.norm.df <- valid.df
1667994216132:housing.norm.df <-housing.df
1667994216677:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994218059:train.norm.df <- as.data.frame(predict(norm.values, train.df))
1667994218695:valid.norm.df <- as.data.frame(predict(norm.values, valid.df))
1667994219233:housing.norm.df <- as.data.frame(predict(norm.values, housing.df))
1667994219751:accuracy.df <- data.frame(k = seq(1, 5, 1), RMSE = rep(0, 5))
1667994221285:for(i in 1:5){
1667994221286:knn.pred<-class::knn(train = train.norm.df[,-13],
1667994221286:test = valid.norm.df[,-13],
1667994221287:cl = train.df[,13], k = i)
1667994221287:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1667994221287:}
1667994263021:train.norm.df <- train.df
1667994263796:valid.norm.df <- valid.df
1667994264680:housing.norm.df <-housing.df
1667994265298:# use preProcess() from the caret package to normalize Income and Lot_Size.
1667994265298:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994411010:housing.df <- read.csv("BostonHousing.csv")
1667994411849:set.seed(123)
1667994413244:train.index <- sample(row.names(housing.df), 0.6*dim(housing.df)[1])
1667994414021:valid.index <- setdiff(row.names(housing.df), train.index)
1667994415638:train.df <- housing.df[train.index, -14]
1667994416224:valid.df <- housing.df[valid.index, -14]
1667994416665:train.norm.df <- train.df
1667994416950:valid.norm.df <- valid.df
1667994417227:housing.norm.df <-housing.df
1667994417911:norm.values <- preProcess(train.df, method=c("center", "scale"))
1667994477312:train.norm.df <- as.data.frame(predict(norm.values, train.df))
1667994717037:accuracy.df
1667994719754:knn.pred<-class::knn(train = train.norm.df[,-13],
1667994719755:test = valid.norm.df[,-13],
1667994719755:cl = train.df[,13], k = i)
1667994721324:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1667994722022:for(i in 1:5){
1667994722022:knn.pred<-class::knn(train = train.norm.df[,-13],
1667994722023:test = valid.norm.df[,-13],
1667994722023:cl = train.df[,13], k = i)
1667994722023:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1667994722023:}
1667994722685:accuracy.df
1668076525163:reg <- lm(Age_08_04~., data=car.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1668076569076:reg <- lm(Price~., data=car.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = testing, na.action=na.exclude)
1668076584527:reg <- lm(Price~., data=car.df[-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = test, na.action=na.exclude)
1668076914431:car.df <- 1:n
1668077086355:#train.index <-sample(c(1:1000),500)
1668077086357:training <- sample(car.df$Id,500)
1668077237821:car.df <- setdiff(car.df, training)
1668077291529:test <- setdiff(car.df,validation)
1668077301470:#train.index <-sample(c(1:1000),500)
1668077301471:training <- sample(car.df$Id,500)
1668077302163:car.df <- setdiff(car.df, training)
1668077303079:validation <-sample(car.df$Id,300)
1668077303780:test <- setdiff(car.df,validation)
1668077599075:input.var <- c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1668077636534:view input.var
1668077645821:View(input.var)
1668077680696:car.df <- read.csv("ToyotaCorolla.csv")
1668077685170:car.df <- car.df[1:1000, ]
1668077685895:training <- sample(car.df$Id,500)
1668077687080:car.df <- setdiff(car.df, training)
1668077687703:validation <-sample(car.df$Id,300)
1668077689224:test <- setdiff(car.df,validation)
1668077692731:input.var <- c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1668077706597:input.var <- car.df(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1668077747884:input.var
1668077753469:input.var <- c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)
1668077753963:input.var
1668080682587:reg <- ln(Price~., data=car.df[,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = training, na.action=na.exclude)
1668080694301:reg <- lm(Price~., data=car.df[,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)], subset = training, na.action=na.exclude)
1668080725928:pred_t <- predict(reg, na.actioni=na.pass)
1668080837348:pred_v <- predict(reg, newdata=car.df[validation,-c4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668080900195:pred_v <- predict(reg, newdata=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668080965507:pred_v <- predict(reg, newdata=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668081036545:pred_t <- predict(reg, na.actioni=na.pass)
1668081038628:pred_v <- predict(reg, newdata=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668081128203:accuracy(pred_t, car.df[training,]$Price)
1668082383959:pred_v <- predict(reg, newdata=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668082749923:pred_v <- predict(reg, data=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668082758557:pred_v <- predict(reg, newdata=car.df[validation,-c(4,7,8,9,12,14,17,19,21,25,26,27,29,33,38)],na.action=na.pass)
1668124657184:car.df <- read.csv("ToyotalCorolla.csv")
1668139360526:car.df <- read.csv("ToyotaCorolla.csv")
1668139374645:car.df <- car.df[1:1000,]
1668139399431:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668139412185:set.seed(1)
1668139468025:train.index <- sample(c(1:1000),600)
1668139482012:train.df <- car.df[train.index, selected.var]
1668139496791:valid.df <- car.df[-train.index,selected.var]
1668139518126:car.lm <- lm(Price ~., data = train.df)
1668139528384:options(scipen=999)
1668139534603:summary(car.lm)
1668139810406:library(forecast)
1668139850376:car.lm.pred <- predict(car.lm, valid.df)
1668139866501:options(scipen=999, digits=0)
1668139899699:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668139950691:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668139965700:optioins(scipen =999, digits =3)
1668139973506:options(scipen =999, digits =3)
1668139990732:accuracy(car.lm.pred,valid.df$Price)
1668140223268:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type,data=train.df))
1668140225463:#3
1668140225463:library(leaps)
1668140239813:#3
1668140239814:install.packages("leaps")
1668140254316:library(leaps)
1668140282659:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668140287751:head(train.df)
1668140357446:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method = "exhaustive")
1668140455983:search <- regsubsets(Price ~., data = train.df, nbest =1, nvmax = dim(train.df)[2], method = "exhaustive")
1668140496011:sum <-summary(search)
1668140506272:sum$which
1668140523910:sum$rsq
1668140539054:sum$adjr2
1668140560671:sum$cp
1668141083348:car.lm.null <- lm(Price~1, data = train.df)
1668141126112:car.lm.step <- step(car.lm.null,scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668141196089:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668141263850:car.lm.step <- step(car.lm, direction ="backward")
1668141312354:summary(car.lm.step)
1668141369062:accuracy(car.lm.pred,valid.df$Price)
1668141398685:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type,data=train.df))
1668141404518:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type,data=train.df))
1668141406312:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668141437748:library(leaps)
1668141438445:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668141461692:car.df <- read.csv("ToyotaCorolla.csv")
1668141462376:car.df <- car.df[1:1000,]
1668141462731:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668141463319:set.seed(1)
1668141463738:train.index <- sample(c(1:1000),500)
1668141464361:valid.index <- sample(c(1:1000),300)
1668141465107:train.df <- car.df[train.index, selected.var]
1668141465531:valid.df <- car.df[-train.index,selected.var]
1668141465837:car.lm <- lm(Price ~., data = train.df)
1668141466182:options(scipen=999)
1668141466567:summary(car.lm)
1668141467467:library(forecast)
1668141468045:car.lm.pred <- predict(car.lm, valid.df)
1668141468552:options(scipen=999, digits=0)
1668141469343:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668141469930:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668141470864:options(scipen =999, digits =3)
1668141471215:accuracy(car.lm.pred,valid.df$Price)
1668141472019:#3
1668141472019:install.packages("leaps")
1668141476012:library(leaps)
1668141477229:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668141479326:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668141479946:head(train.df)
1668141481487:search <- regsubsets(Price ~., data = train.df, nbest =1, nvmax = dim(train.df)[2], method = "exhaustive")
1668141579913:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668144170406:car.lm.null <- lm(Price~1, data = train.df)
1668144172370:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668144221748:car.lm.step <- step(car.lm.null,
1668144221749:initial model
1668144221750:scope=list(lower=car.lm.null, upper=car.lm), direction =
1668144221750:"forward")
1668144245790:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668144288008:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144290216:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144292312:#3
1668144292313:install.packages("leaps")
1668144300015:install.packages("leaps")
1668144307011:library(leaps)
1668144308157:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144326983:car.df <- read.csv("ToyotaCorolla.csv")
1668144327397:car.df <- car.df[1:1000,]
1668144327600:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668144327753:set.seed(1)
1668144327924:train.index <- sample(c(1:1000),500)
1668144328081:valid.index <- sample(c(1:1000),300)
1668144328240:train.df <- car.df[train.index, selected.var]
1668144328401:valid.df <- car.df[-train.index,selected.var]
1668144328555:car.lm <- lm(Price ~., data = train.df)
1668144329019:options(scipen=999)
1668144330031:summary(car.lm)
1668144330175:library(forecast)
1668144330973:car.lm.pred <- predict(car.lm, valid.df)
1668144330976:options(scipen=999, digits=0)
1668144336125:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668144336922:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668144337740:options(scipen =999, digits =3)
1668144338206:accuracy(car.lm.pred,valid.df$Price)
1668144343078:library(leaps)
1668144344145:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144354712:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668144356860:head(train.df)
1668144358435:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668144370529:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144395758:library(leaps)
1668144396321:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144400188:car.lm.pred <- predict(car.lm, valid.df)
1668144400836:options(scipen=999, digits=0)
1668144401193:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668144401451:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668144401781:options(scipen =999, digits =3)
1668144402451:accuracy(car.lm.pred,valid.df$Price)
1668144407385:#3
1668144407385:#install.packages("leaps")
1668144407386:library(leaps)
1668144409560:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144412320:train.index <- sample(c(1:1000),500)
1668144412709:valid.index <- sample(c(1:1000),300)
1668144413549:train.df <- car.df[train.index, selected.var]
1668144414112:valid.df <- car.df[-train.index,selected.var]
1668144414900:car.lm <- lm(Price ~., data = train.df)
1668144415283:options(scipen=999)
1668144415557:summary(car.lm)
1668144415884:library(forecast)
1668144416385:car.lm.pred <- predict(car.lm, valid.df)
1668144416775:options(scipen=999, digits=0)
1668144417040:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668144417284:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668144418005:options(scipen =999, digits =3)
1668144418382:accuracy(car.lm.pred,valid.df$Price)
1668144419218:#3
1668144419219:#install.packages("leaps")
1668144419219:library(leaps)
1668144419650:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668144449242:car.lm.null <- lm(Price~1, data = train.df)
1668144450159:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668144451308:car.lm.step <- step(car.lm, direction ="backward")
1668144451972:summary(car.lm.step)
1668144510402:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668144517026:sum <-summary(search)
1668144517624:sum$which
1668144518351:sum$rsq
1668144518593:sum$adjr2
1668144518835:sum$cp
1668144519404:car.lm.null <- lm(Price~1, data = train.df)
1668144519966:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668144521093:car.lm.step <- step(car.lm, direction ="backward")
1668144522003:summary(car.lm.step)
1668144673377:car.lm.step.pred <- predict(car.lm.step, valid.df)
1668144699322:accuracy(car.lm.step.pred,valid.df$Price)
1668144772855:car.lm.step <- step(car.lm, direction ="both")
1668144789285:summary(car.lm.step)
1668145036514:#1
1668145036515:car.df <- read.csv("ToyotaCorolla.csv")
1668145036815:car.df <- car.df[1:1000,]
1668145036987:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668145037164:set.seed(1)
1668145037324:train.index <- sample(c(1:1000),500)
1668145037476:valid.index <- sample(c(1:1000),300)
1668145037627:test.index <- sample(c(1:1000),200)
1668145037784:train.df <- car.df[train.index, selected.var]
1668145037931:valid.df <- car.df[valid.index,selected.var]
1668145038079:test.df <- car.df[test.index, selected.var]
1668145038227:car.lm <- lm(Price ~., data = train.df)
1668145038383:options(scipen=999)
1668145038533:summary(car.lm)
1668145038675:library(forecast)
1668145038840:car.lm.pred <- predict(car.lm, valid.df)
1668145039232:options(scipen=999, digits=0)
1668145039422:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668145039593:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668145039770:options(scipen =999, digits =3)
1668145040459:accuracy(car.lm.pred,valid.df$Price)
1668145040894:#3
1668145040894:#install.packages("leaps")
1668145040895:library(leaps)
1668145041420:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145041786:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668145042308:head(train.df)
1668145042947:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668145046849:sum <-summary(search)
1668145047525:sum$which
1668145048204:sum$rsq
1668145048576:sum$adjr2
1668145049279:sum$cp
1668145049913:car.lm.null <- lm(Price~1, data = train.df)
1668145052581:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668145054482:car.lm.null <- lm(Price~1, data = train.df)
1668145054733:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668145055519:car.lm.step <- step(car.lm, direction ="backward")
1668145062900:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668145086092:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668145087278:car.lm.step <- step(car.lm, direction ="backward")
1668145088890:summary(car.lm.step)
1668145089577:car.lm.step.pred <- predict(car.lm.step, valid.df)
1668145090284:accuracy(car.lm.step.pred,valid.df$Price)
1668145091011:car.lm.step <- step(car.lm, direction ="both")
1668145099775:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145101995:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145104579:options(scipen =999, digits =3)
1668145105011:accuracy(car.lm.pred,valid.df$Price)
1668145105821:#3
1668145105822:#install.packages("leaps")
1668145105822:library(leaps)
1668145106255:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145109648:function (seed, kind = NULL, normal.kind = NULL, sample.kind = NULL)
1668145113478:set.seed(1)
1668145113713:train.index <- sample(c(1:1000),500)
1668145113899:valid.index <- sample(c(1:1000),300)
1668145114081:test.index <- sample(c(1:1000),200)
1668145114259:train.df <- car.df[train.index, selected.var]
1668145114518:valid.df <- car.df[valid.index,selected.var]
1668145114768:test.df <- car.df[test.index, selected.var]
1668145115016:car.lm <- lm(Price ~., data = train.df)
1668145115441:options(scipen=999)
1668145116045:summary(car.lm)
1668145118878:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145119822:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668145120246:head(train.df)
1668145120618:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668145460311:car.lm.step.pred_t <- predict(car.lm.step, test.df)
1668145477565:accuracy(car.lm.step.pred_t,test.df$Price)
1668145520339:car.df <- car.df[1:1000,]
1668145520764:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668145520919:set.seed(1)
1668145521086:train.index <- sample(c(1:1000),500)
1668145521245:valid.index <- sample(c(1:1000),300)
1668145521391:test.index <- sample(c(1:1000),200)
1668145521545:train.df <- car.df[train.index, selected.var]
1668145521697:valid.df <- car.df[valid.index,selected.var]
1668145521839:test.df <- car.df[test.index, selected.var]
1668145521991:car.lm <- lm(Price ~., data = train.df)
1668145522136:options(scipen=999)
1668145522290:summary(car.lm)
1668145522450:library(forecast)
1668145522617:car.lm.pred <- predict(car.lm, valid.df)
1668145522757:options(scipen=999, digits=0)
1668145522918:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668145523065:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668145523220:options(scipen =999, digits =3)
1668145523397:accuracy(car.lm.pred,valid.df$Price)
1668145523569:#install.packages("leaps")
1668145523569:library(leaps)
1668145523980:Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668145524376:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668145524815:head(train.df)
1668145525338:sum <-summary(search)
1668145525708:sum$which
1668145525971:sum$rsq
1668145526383:sum$adjr2
1668145526785:sum$cp
1668145527199:car.lm.null <- lm(Price~1, data = train.df)
1668145527660:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668145527959:car.lm.step <- step(car.lm, direction ="backward")
1668145530852:summary(car.lm.step)
1668145532281:#3
1668145532281:car.lm.step.pred <- predict(car.lm.step, valid.df)
1668145532897:accuracy(car.lm.step.pred,valid.df$Price)
1668145533401:car.lm.step.pred_t <- predict(car.lm.step, test.df)
1668145533606:accuracy(car.lm.step.pred_t,test.df$Price)
1668145534035:car.lm.step <- step(car.lm, direction ="both")
1668145542232:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668145651357:car.lm.step <- step(car.lm, direction ="both")
1668146154582:#2-1
1668146154589:housing.df <- read.csv("BostonHousing.csv")
1668146155311:set.seed(123)
1668146155589:train.index <- sample(row.names(housing.df), 0.6*dim(housing.df)[1])
1668146155825:valid.index <- setdiff(row.names(housing.df), train.index)
1668146156456:train.df <- housing.df[train.index, -14]
1668146156819:valid.df <- housing.df[valid.index, -14]
1668146157165:train.norm.df <- train.df
1668146157437:valid.norm.df <- valid.df
1668146157788:housing.norm.df <-housing.df
1668146158145:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668146158340:train.norm.df <- as.data.frame(predict(norm.values, train.df))
1668146163683:valid.norm.df <- as.data.frame(predict(norm.values, valid.df))
1668146164515:housing.norm.df <- as.data.frame(predict(norm.values, housing.df))
1668146165017:accuracy.df <- data.frame(k = seq(1, 5, 1), RMSE = rep(0, 5))
1668146166108:for(i in 1:5){
1668146166109:knn.pred<-class::knn(train = train.norm.df[,-13],
1668146166109:test = valid.norm.df[,-13],
1668146166109:cl = train.df[,13], k = i)
1668146166110:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1668146166110:}
1668146213930:accuracy.df
1668146246449:# initialize normalized training, validation data, complete data frames to originals
1668146246449:train.norm.df <- train.df
1668146247206:valid.norm.df <- valid.df
1668146247557:housing.norm.df <-housing.df
1668146249221:# use preProcess() from the caret package to normalize Income and Lot_Size.
1668146249222:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668146302515:# use preProcess() from the caret package to normalize Income and Lot_Size.
1668146302516:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668146370323:install.packages("carnet")
1668146382335:library(carnet)
1668146415135:library("carnet")
1668146422978:install.packages(carnet)
1668146431733:library("caret")
1668146452154:library("ggplot2")
1668146453603:library("caret")
1668146454805:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668146455773:train.norm.df <- as.data.frame(predict(norm.values, train.df))
1668146456550:valid.norm.df <- as.data.frame(predict(norm.values, valid.df))
1668146457088:housing.norm.df <- as.data.frame(predict(norm.values, housing.df))
1668146457915:#initialize a data frame with two columns: k, and accuracy
1668146457916:accuracy.df <- data.frame(k = seq(1, 5, 1), RMSE = rep(0, 5))
1668146458579:# compute knn for different k on validation.
1668146458580:for(i in 1:5){
1668146458580:knn.pred<-class::knn(train = train.norm.df[,-13],
1668146458580:test = valid.norm.df[,-13],
1668146458580:cl = train.df[,13], k = i)
1668146458581:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1668146458581:}
1668146460306:accuracy.df
1668146750292:#1-2
1668146750294:new.df <-data.frame(0.2,0,7,0,0,.538,6,62,4.7,4,307,21,10)
1668146770533:names(new.df) <- names(train.norm.df)[-13]
1668146807118:new.norm.values <- preProcess(new.df, method = c("center","scale"))
1668146892950:new.norm.values <- preProcess(new.df, method=c("center", "scale"))
1668146938370:new.norm.df <- predict(new.norm.values, newdata = new.df)
1668146952576:new.knn.pred <- class::knn(train = train.norm.df[,-13],
1668146952578:test = new.norm.df,
1668146952578:cl = train.df$MEDV, k = 2)
1668146953161:new.knn.pred
1668146971961:#1-2
1668146971962:new.df<-data.frame(0.2,0,7,0,0.538,6,62,4.7,4,307,21,10)
1668146973390:names(new.df)<-names(train.norm.df)[-13]
1668146974278:#norm your new data
1668146974279:new.norm.values <- preProcess(new.df, method=c("center", "scale"))
1668146984929:new.norm.df <- predict(new.norm.values, newdata = new.df)
1668146986850:new.knn.pred <- class::knn(train = train.norm.df[,-13],
1668146986851:test = new.norm.df,
1668146986851:cl = train.df$MEDV, k = 2)
1668146988466:new.knn.pred
1668148600168:new.norm.values <- preProcess(new.df, method=c("center", "scale"))
1668148603203:new.norm.df <- predict(new.norm.values, newdata = new.df)
1668167144447:Fuel_Type <- data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668167175889:#1-1
1668167175890:car.df <- read.csv("ToyotaCorolla.csv")
1668167176456:car.df <- car.df[1:1000,]
1668167176762:selected.var <- c(3,4,7,8,9,10,12,13,14,17,18)
1668167177421:set.seed(1)
1668167177937:train.index <- sample(c(1:1000),500)
1668167178286:valid.index <- sample(c(1:1000),300)
1668167178789:test.index <- sample(c(1:1000),200)
1668167179521:train.df <- car.df[train.index, selected.var]
1668167179950:valid.df <- car.df[valid.index,selected.var]
1668167180348:test.df <- car.df[test.index, selected.var]
1668167180745:car.lm <- lm(Price ~., data = train.df)
1668167181094:options(scipen=999)
1668167181497:summary(car.lm)
1668167182261:library(forecast)
1668167183411:car.lm.pred <- predict(car.lm, valid.df)
1668167183420:options(scipen=999, digits=0)
1668167186052:some.residuals <- valid.df$Price[1:20] - car.lm.pred[1:20]
1668167189525:data.frame("Predicted" = car.lm.pred[1:20], "Actual" = valid.df$Price[1:20], "Residual" = some.residuals)
1668167190567:options(scipen =999, digits =3)
1668167191309:accuracy(car.lm.pred,valid.df$Price)
1668167192016:#install.packages("leaps")
1668167192016:library(leaps)
1668167193221:#Fuel_Type <- as.data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668167193221:Fuel_Type <- data.frame(model.matrix(~ 0 + Fuel_Type, data=train.df))
1668167196818:train.df <- cbind(train.df[,-4], Fuel_Type[,])
1668167198591:head(train.df)
1668167199188:search <- regsubsets(Price ~., data = train.df, nbest = 1, nvmax = dim(train.df)[2], method ="exhaustive" )
1668167389512:sum <-summary(search)
1668167390346:sum$which
1668167391286:sum$rsq
1668167392839:sum$adjr2
1668167393410:sum$cp
1668167394021:car.lm.null <- lm(Price~1, data = train.df)
1668167394702:car.lm.step <- step(car.lm.null, scope=list(lower=car.lm.null, upper=car.lm), direction ="forward")
1668167397299:car.lm.step <- step(car.lm, direction ="backward")
1668167399014:summary(car.lm.step)
1668167467025:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668167472681:#2-1
1668167472681:housing.df <- read.csv("BostonHousing.csv")
1668167473455:set.seed(123)
1668167473882:train.index <- sample(row.names(housing.df), 0.6*dim(housing.df)[1])
1668167474279:valid.index <- setdiff(row.names(housing.df), train.index)
1668167474657:train.df <- housing.df[train.index, -14]
1668167475188:valid.df <- housing.df[valid.index, -14]
1668167475605:train.norm.df <- train.df
1668167475959:valid.norm.df <- valid.df
1668167476322:housing.norm.df <-housing.df
1668167476761:install.packages(carnet)
1668167477625:library("ggplot2")
1668167488698:library("caret")
1668167500470:norm.values <- preProcess(train.df, method=c("center", "scale"))
1668167501958:train.norm.df <- as.data.frame(predict(norm.values, train.df))
1668167502596:valid.norm.df <- as.data.frame(predict(norm.values, valid.df))
1668167505369:housing.norm.df <- as.data.frame(predict(norm.values, housing.df))
1668167506103:accuracy.df <- data.frame(k = seq(1, 5, 1), RMSE = rep(0, 5))
1668167507755:for(i in 1:5){
1668167507755:knn.pred<-class::knn(train = train.norm.df[,-13],
1668167507755:test = valid.norm.df[,-13],
1668167507756:cl = train.df[,13], k = i)
1668167507756:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1668167507756:}
1668167509044:accuracy.df
1668167571250:library(knn)
1668167575503:library("knn")
1668167594313:library(FFNN)
1668167600342:library(FNN)
1668167628520:library("FNN")
1668167685629:library(FNN)
1668167707948:library(class)
1668167757271:library(FNN)
1668167845318:valid.norm.df <- as.data.frame(predict(norm.values, valid.df))
1668167846516:housing.norm.df <- as.data.frame(predict(norm.values, housing.df))
1668167847670:accuracy.df <- data.frame(k = seq(1, 5, 1), RMSE = rep(0, 5))
1668167848547:for(i in 1:5){
1668167848547:knn.pred<-class::knn(train = train.norm.df[,-13],
1668167848547:test = valid.norm.df[,-13],
1668167848547:cl = train.df[,13], k = i)
1668167848547:accuracy.df[i,2]<-RMSE(as.numeric(as.character(knn.pred)),valid.df[,13])
1668167848547:}
1668167850191:accuracy.df
1668167895639:#install.packages(carnet)
1668167895640:install.packages(FNN)
1668167909532:#install.packages(carnet)
1668167909532:install.packages("FNN")
1668167919656:library(FNN)
1669186031492:utilities.df <- read.csv("Utilities.csv")
1669186070849:row.names(utilities.df) <- utilities.df[,1]
1669186092918:row.names(utilities.df) <- utilities.df[,-1]
1669186116632:utilities.df <- utilities.df[,-1]
1669186171348:d <-dist(utilities.df, method ="euclidean")
1669186648365:utilities.df.orm <- sapply(utilities.df, scale)
1669186703227:#add row names: utilites
1669186703228:row.names(utilities.df.norm) <- row.names(utilities.df)
1669186738391:#normalize input variables
1669186738391:utilities.df.norm <- sapply(utilities.df, scale)
1669186739538:#add row names: utilites
1669186739539:row.names(utilities.df.norm) <- row.names(utilities.df)
1669186773184:d.norm <- dist(utilities.df.norm[,c(6,8)], method ="euclidean")
1671432698010:library(forecast)
1671432761398:owner.df <- read.csv("ownerExample.csv")
1671432832984:confusioinMatrix(ifelse(owner.df$Probability>0.5,'owner','nonowner'), owner.df$Class)
1671432846112:confusionMatrix(ifelse(owner.df$Probability>0.5,'owner','nonowner'), owner.df$Class)
1671432870008:library(forecast)
1671432877469:owner.df <- read.csv("ownerExample.csv")
1671432878880:confusionMatrix(ifelse(owner.df$Probability>0.5,'owner','nonowner'), owner.df$Class)
1671432964367:library(caret)
1671432976004:library(caret)
1671432977480:owner.df <- read.csv("ownerExample.csv")
1671432978067:confusionMatrix(ifelse(owner.df$Probability>0.25,'owner','nonowner'), owner.df$Class)
1671432984110:confusionMatrix(ifelse(owner.df$Probability>0.5,'owner','nonowner'), owner.df$Class)
1671433448984:#b
1671433448987:boston.housing.df <- read.csv("BostonHousing.csv")
1671433472520:table(boston.housing.df$CHAS)
1671433509207:boston.housing.df$RM.bin <- .bincode(boston.housing.df$RM, c(1:9))
1671433562460:aggregate(boston.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin, CHAS = boston.housing.df$CHAS), FUN=mean)
1671433866675:#3
1671433866676:library(e1071)
1671433888155:delays.df <-read.csv(boston.housing.df)
1671433930623:mover.df <-read.csv("boston.housing.csv")
1671433969796:boston.housing.df <- read.csv("BostonHousing.csv")
1671434073980:train.index <- sample(row.names(boston.housing.df), 0.6*dim(boston.housing.df)[1])
1671434097363:valid index <- setdiff(row.names(boston.housing.df), train.index)
1671434103667:valid.index <- setdiff(row.names(boston.housing.df), train.index)
1671434116437:train.df <- boston.housing.df[train.index]
1671434129433:train.df <- boston.housing.df[train.index,]
1671434144544:valid.df <- boston.housing.df[valid.index,]
1671434186538:new.df <- data.frame()
1671434233125:train.norm.df <- train.df
1671434252321:boston.housing.df <- boston.housing.df
1671434263078:boston.housing.norm.df <- boston.housing.df
1671434299855:train.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
1671434345817:train.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
1671434407906:nn <- knn(train = train.norm.df[,1:2], test = new.norm.df,cl = train.norm.df[,3] , k=5)
1671434430536:library(FNN)
1671434432347:nn <- knn(train = train.norm.df[,1:2], test = new.norm.df,cl = train.norm.df[,3] , k=5)
1671434500352:new.norm.df <- predict(norm.values, new.df)
1671434538106:norm.values <- preProcess(train.df[,1:2]m method =c("center","scale"))
1671434547022:norm.values <- preProcess(train.df[,1:2], method =c("center","scale"))
1671434548203:train.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
1671434549564:valid.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
1671434561188:valid.norm.df[, 1:2] <- predict(norm.values, valid.df[, 1:2])
1671434571751:boston.housing.norm.df[, 1:2] <- predict(norm.values, train.df[, 1:2])
1671434581311:boston.housing.norm.df[, 1:2] <- predict(norm.values, boston.housing.df[, 1:2])
1671434582541:new.norm.df <- predict(norm.values, new.df)
1671434595918:new.norm.df <- predict(norm.values, new.df)
1671434596543:library(FNN)
1671434597155:nn <- knn(train = train.norm.df[,1:2], test = new.norm.df,cl = train.norm.df[,3] , k=5)
1671434628245:boston.housing.norm.df[, 1:2] <- predict(norm.values, boston.housing.df[, 1:2])
1671434659100:boston.housing.norm.df[, 1:2] <- predict(norm.values, boston.housing.df[, 1:2])
1671434660606:new.norm.df <- predict(norm.values, new.df)
1671434672165:library(FNN)
1671434691117:nn <- knn(train = train.norm.df[,1:2], test = new.norm.df,cl = train.norm.df[,3] , k=5)
1671434817931:new.norm.df <- predict(norm.values, new.df)
1671434823930:norm.values <- preProcess(train.df[,1:2], method =c("center","scale"))
1671434827131:new.norm.df <- predict(norm.values, new.df)
1671434862675:aggregate(boston.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin, CHAS = boston.housing.df$CHAS), FUN=mean)
1671434865560:#b
1671434865561:boston.housing.df <- read.csv("BostonHousing.csv")
1671434866360:table(boston.housing.df$CHAS)
1671434867872:boston.housing.df$RM.bin <- .bincode(boston.housing.df$RM, c(1:9))
1671434868877:aggregate(boston.housing.df$MEDV, by=list(RM=boston.housing.df$RM.bin, CHAS = boston.housing.df$CHAS), FUN=mean)
1671627359382:install.packages("day(1).csv")
1671627383407:library(day(1)
1671627390450:library(day(1))
1671627404134:library(day(1))
1671627679583:install.packages("foreign")
1671627702924:library(foreign)
1671627792680:install.packages("weather")
1671627794698:library(foreign)
1671627855839:dust.df <- read.csv("day.csv")
1671627887795:owner.df <- read.csv("ownerExample.csv")
1671627909751:dust.df <- read.csv("day.csv")
1671628085476:dust.df <- read.xlsx("day.xlsx")
1671628195446:install.packages("xlsx")
1671628214880:library(xlsx)
1671628227415:install.packages("xlsx")
1671628238592:library(xlsx)
1671628292321:library(xlsx)
1671628293144:dust.df <-read.
1671628296576:library(xlsx)
1671628320747:library("readxl")
1671628335590:dust.df <-read_xlsx("day.xlsx")
1671628848375:install.packages("foreign")
1671628851672:library(foreign)
1671628851738:library(dplyr)
1671628852128:library(ggplot2)
1671628852241:library(readxl)
1671628871938:dust.df <- read.csv("SeoulFineDust")
1671628921144:install.packages("foreign")
1671628932250:library("foreign")
1671628954194:dust.df <- read.csv("SeoulFineDust.csv")
1671629014457:library(foreign)
1671629026047:library(dplyr)
1671629026552:library(ggplot2)
1671629026959:library(readxl)
1671629043431:View(dust.df)
1671629123556:dust.df <- read.csv(file = "SeoulFineDust.csv", reencode='utf-8',to.data.frame = T)
1671629127737:dust.df <- read.csv(file = "SeoulFineDust.csv", reencode='utf-8',to.data.frame = T)
1671629335250:install.packages("foreign")
1671629337339:library("foreign")
1671629337403:library(foreign)
1671629337403:library(dplyr)
1671629337763:library(ggplot2)
1671629337849:library(readxl)
1671629339579:dust.df <- read.csv("SeoulFineDust.csv")
1671629341636:View(dust.df)
1671629348265:dust.df <- read.csv("SeoulFineDust.csv")
1671630165595:install.packages("foreign")
1671630168262:library("foreign")
1671630170056:library(foreign)
1671630170966:library(dplyr)
1671630171391:library(ggplot2)
1671630172479:library(readxl)
1671630174190:dust.df <- read.csv("SeoulFineDust.csv")
1671630175596:View(dust.df)
1671630206381:table(dust.df$Month)
1671631116821:dust.df <- rename(dust.df,
1671631116828:Finedust =FineDust.PM )
1671631128325:table$Month <-ifelse(dust.df$Finedust ==)
1671631156495:table(dust.df$Finedust)
1671631177311:table(dust.df$Finedust)
1671631178309:table$Finedust <-ifelse(dust.df$Finedust ==)
1671631373156:str(dust.df)
1671631554419:is.na(Finedust)
1671631569402:is.na(dsut.df)
1671631574413:is.na(dust.df)
1671631625683:is.na(dust.df$Finedust)
1671631654513:sum(is.na(dust.df$Finedust))
1671631708241:#결측치 제거
1671631708242:na.omit(dust.df$Finedust)
1671631773298:#결측치 확인
1671631773300:table(is.na(dust.df$Finedust))
1671631775984:sum(is.na(dust.df$Finedust))
1671631777559:#결측치 제거
1671631777559:na.omit(dust.df$Finedust)
1671631835242:#결측치 제거
1671631835243:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671631860212:table(is.na(Finedust_clean$Finedust))
1671632117801:#이상치 처리
1671632117803:dust.df$Finedust <- ifelse(dust.df$Finedust<20, NA, dust.df$Finedust)
1671632136415:table(is.na(dust.df$Finedust))
1671632298177:str(dust.df)
1671632319982:#이상치 처리
1671632319985:dust.df$Finedust <- ifelse(dust.df$Finedust<18, NA, dust.df$Finedust)
1671632320933:table(is.na(dust.df$Finedust))
1671632364083:#이상치 처리
1671632364085:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671632364802:table(is.na(dust.df$Finedust))
1671632398429:#이상치 처리
1671632398431:dust.df$Finedust <- ifelse(dust.df$Finedust<15, NA, dust.df$Finedust)
1671632399024:table(is.na(dust.df$Finedust))
1671632439769:Finedust
1671632442246:Finedust;
1671632458420:#이상치 처리
1671632458422:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671632459360:table(is.na(dust.df$Finedust))
1671632463225:table(dust.df$Finedust)
1671632491211:table(dust.df$Finedust<10)
1671632499309:table(dust.df$Finedust)
1671632509112:sum(is.na(dust.df$Finedust))
1671632513080:#결측치 확인
1671632513080:table(is.na(dust.df$Finedust))
1671632515633:sum(is.na(dust.df$Finedust))
1671632532167:install.packages("foreign")
1671632541906:install.packages("foreign")
1671632583920:library("foreign")
1671632585108:library(foreign)
1671632586058:library(dplyr)
1671632586665:library(ggplot2)
1671632589055:library(readxl)
1671632589772:dust.df <- read.csv("SeoulFineDust.csv")
1671632591198:dust.df <- rename(dust.df,
1671632591199:Finedust =FineDust.PM )
1671632591996:View(dust.df)
1671632594713:str(dust.df)
1671632597332:table(dust.df$Finedust)
1671632599380:#결측치 확인
1671632599381:table(is.na(dust.df$Finedust))
1671632604984:sum(is.na(dust.df$Finedust))
1671632607126:#결측치 처리
1671632607127:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671632610439:table(is.na(Finedust_clean$Finedust))
1671632619536:#이상치 처리
1671632619537:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671632624474:table(is.na(dust.df$Finedust))
1671632677977:table(is.na(dust.df$Finedust))
1671632723250:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671632727007:table(is.na(Finedust_clean$Finedust))
1671632780464:View(dust.df)
1671632852892:View(dust.df)
1671633209461:#partitioning for training and validation
1671633209463:set.seed(1)
1671633255905:train.index <-sample(1:dim(dust.df[1]), dim(dust.df[1]*0.6))
1671633306807:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671633324424:train.df <- dsut.df[train.index,]
1671633329002:train.df <- dust.df[train.index,]
1671633343049:valid.df <- dust.df[-train.index,]
1671633366250:#정규화
1671633366250:train.norm.df <- train.df
1671633374488:valid.norm.df <- valid.df
1671633541468:dust.norm.df <- dust.df
1671633760173:norm.values <- preProcess(train.df[,1:4], method =c("center","scale")
1671633777706:norm.values <- preProcess(train.df[,1:3], method =c("center","scale")
1671633782942:norm.values <- preProcess(train.df[,1:4], method =c("center","scale")
1671633814181:train.norm.df[,1:4] <- predict(norm.values, train.df[1:4])
1671633843340:norm.values <- preProcess(train.df[,1:4], method =c("center","scale") train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671633849002:norm.values <- preProcess(train.df[,1:4], method =c("center","scale") train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671633851729:norm.values <- preProcess(train.df[,1:4], method =c("center","scale") train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671633861818:install.packages("foreign")
1671633869899:install.packages("foreign")
1671633873583:library("foreign")
1671633873975:library(foreign)
1671633874439:library(dplyr)
1671633874985:library(ggplot2)
1671633875506:library(readxl)
1671633876198:dust.df <- read.csv("SeoulFineDust.csv")
1671633877244:dust.df <- rename(dust.df,
1671633877245:Finedust =FineDust.PM )
1671633878113:View(dust.df)
1671633880553:str(dust.df)
1671633881465:table(dust.df$Finedust)
1671633882026:#결측치 확인
1671633882027:table(is.na(dust.df$Finedust))
1671633882556:sum(is.na(dust.df$Finedust))
1671633883312:#결측치 처리
1671633883312:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671633883881:table(is.na(Finedust_clean$Finedust))
1671633884598:#이상치 처리
1671633884598:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671633885220:table(is.na(dust.df$Finedust))
1671633885948:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671633886805:table(is.na(Finedust_clean$Finedust))
1671633889691:#partitioning for training and validation
1671633889692:set.seed(1)
1671633890157:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671633890628:train.df <- dust.df[train.index,]
1671633891134:valid.df <- dust.df[-train.index,]
1671633891627:#정규화
1671633891628:train.norm.df <- train.df
1671633892080:valid.norm.df <- valid.df
1671633892516:dust.norm.df <- dust.df
1671633893086:norm.values <- preProcess(train.df[,1:4], method =c("center","scale") train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671633914368:norm.values <- preProcess(train.df[,1:4], method =c("center","scale")) train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671633926139:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671633995476:library(caret)
1671634006699:library("caret")
1671634009501:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671634103905:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671634116674:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671634137453:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671634142937:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671634165703:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671634201085:new.norm.df<- predict(norm.values,new.df)
1671634313774:#날씨 예측
1671634313775:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671634321619:new.norm.df<- predict(norm.values,new.df)
1671634331422:#날씨 예측
1671634331423:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671634346276:new.norm.df<- predict(norm.values,new.df)
1671635147014:#validation set for accuracy
1671635147020:Finedust.lm <- lm(Finedust~., data train.norm.df)
1671635219974:#validation set for accuracy
1671635219976:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671635230901:options(scipen=999)
1671635238397:summary(Finedust.lm)
1671635349650:# validation set for accuracy
1671635349652:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671635364204:# validation set for accuracy
1671635364205:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671635397266:# validation set for accuracy
1671635397267:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671635448289:# validation set for accuracy
1671635448290:Finedust.lm .pred <- predict(Finedust.lm , valid.norm.df)
1671635454941:# validation set for accuracy
1671635454943:Finedust.lm.pred <- predict(Finedust.lm , valid.norm.df)
1671635534815:Finedust.lm..pred.train <- predict(Finedust.lm., train.norm.df)
1671635752210:# validation set for accuracy
1671635752211:Finedust.lm.pred <- predict(Finedust.lm , valid.norm.df)
1671635980134:same.dust<-valid.norm.df$Finedust-Finedust.lm.pred[1:5]
1671636006534:# validation set for accuracy
1671636006536:Finedust.lm.pred <- predict(Finedust.lm , valid.norm.df)
1671636875017:#다중 선형 회구 모델 with trraining set
1671636875026:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671636877232:options(scipen=999)
1671636889787:# validation set for accuracy
1671636889789:#여기에 오존이나 다른 것 추가
1671636889789:Finedust.lm.pred <- predict(Finedust.lm , valid.norm.df)
1671636928386:# validation set for accuracy
1671636928388:#여기에 오존이나 다른 것 추가
1671636928388:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671636957760:summary(Finedust.lm)
1671637115124:# validation set for accuracy
1671637115126:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671637212621:Finedust.lm.pred.train <- predict(Finedust.lm., train.norm.df)
1671637230072:Finedust.lm.pred.train <- predict(Finedust.lm., train.norm.df)
1671637261936:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671637290790:Finedust.lm..pred.train <- predict(Finedust.lm, train.norm.df)
1671637321109:Finedust.lm..pred.train <- predict(Finedust.lm., train.norm.df)
1671637328460:Finedust.lm..pred.train <- predict(Finedust.lm., train.norm.df)
1671637343343:data.frame("Predicted" = Finedust.lm.pred.train)
1671637397837:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671637401777:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671637402957:options(scipen=999, digits=0)
1671637409142:data.frame("Predicted" = Finedust.lm.pred.train, train.norm.df)
1671637513145:# validation set for accuracy
1671637513146:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671637530636:options(scipen=999, digits=0)
1671637543120:Finedust.lm.pred
1671637930802:# validation set for accuracy
1671637930808:Finedsut.lm.pred <- predict(bike.rent.lm, valid.norm.df)
1671637935088:#다중 선형 회구 모델 with training set
1671637935088:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671637936391:options(scipen=999)
1671637938048:summary(Finedust.lm)
1671637993737:# validation set for accuracy
1671637993739:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671638638612:age.df <- read.csv("age")
1671638645740:age.df <- read.csv("age.csv")
1671638909651:View(dust.df)
1671638937520:#데이터 분석
1671638937521:Finedust.city <- Finedust %>%
1671638937521:group_by(District)%>%
1671638937521:dplyr::summarise(sum_district = sum(sum))
1671638955140:#데이터 분석
1671638955142:Finedust.city <- Finedust%>%
1671638955142:group_by(District)%>%
1671638955142:dplyr::summarise(sum_district = sum(sum))
1671639108131:#데이터 분석
1671639108133:#미세먼지가 심한 도시 순위 확인
1671639108133:finedustcity <- rdsut.df %>%
1671639108133:group_by(District) %>%
1671639108133:dplyr::summarise(sum_city = sum(sum))
1671639116224:library(dplyr)
1671639148931:library("dplyr")
1671639156857:library("ggplot2)
1671639156858:library(readxl)
1671639156858:library("caret")
1671639156858:dust.df <- read.csv("SeoulFineDust.csv")
1671639156874:age.df <- read.csv("age.csv")
1671639156887:dust.df <- rename(dust.df,
1671639156887:Finedust =FineDust.PM )
1671639156917:View(dust.df)
1671639157024:#데이터 분석
1671639157024:#미세먼지가 심한 도시 순위 확인
1671639157024:finedustcity <- rdsut.df %>%
1671639157024:group_by(District) %>%
1671639157024:dplyr::summarise(sum_city = sum(sum))
1671639157025:str(dust.df)
1671639157030:# 전처리
1671639157030:table(dust.df$Finedust)
1671639157032:#결측치 확인
1671639157032:table(is.na(dust.df$Finedust))
1671639157032:sum(is.na(dust.df$Finedust))
1671639157033:#결측치 처리
1671639157033:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671639157048:table(is.na(Finedust_clean$Finedust))
1671639157048:#이상치 처리
1671639157049:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671639157049:table(is.na(dust.df$Finedust))
1671639157050:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671639157051:table(is.na(Finedust_clean$Finedust))
1671639157052:View(dust.df)
1671639157052:#날씨 예측
1671639157052:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671639157053:# 다중 선형 회귀분석 모델
1671639157053:#partitioning for training and validation
1671639157053:set.seed(1)
1671639157053:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671639157056:train.df <- dust.df[train.index,]
1671639157056:valid.df <- dust.df[-train.index,]
1671639157057:#정규화
1671639157057:train.norm.df <- train.df
1671639157057:valid.norm.df <- valid.df
1671639157057:dust.norm.df <- dust.df
1671639157057:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671639157057:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671639157060:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671639157060:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671639157061:# 오류 new.norm.df<- predict(norm.values,new.df)
1671639157061:#다중 선형 회구 모델 with training set
1671639157061:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671639157072:options(scipen=999)
1671639157072:summary(Finedust.lm)
1671639157099:# validation set for accuracy
1671639157099:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671639157101:options(scipen=999, digits=0)
1671639157102:#check the disctrict
1671639157102:some.residuals<- valid.norm.df$
1671639157102:#df for oz
1671639157102:data.frame('Predicted' = Finedust.lm.pred[1:5], "Actual" = valid.norm.df$)
1671639157102:Finedust.lm.
1671639157102:Finedust.lm..pred.train <- predict(Finedust.lm., train.norm.df)
1671639157103:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671639157104:options(scipen=999, digits=0)
1671639157105:same.dust<-valid.norm.df$Finedust-Finedust.lm.pred[1:5]
1671639157105:data.frame("Predicted" = Finedust.lm.pred.train, )
1671639186778:library("dplyr")
1671639192855:#데이터 분석
1671639192855:#미세먼지가 심한 도시 순위 확인
1671639192856:finedustcity <- rdsut.df %>%
1671639192856:group_by(District) %>%
1671639192856:dplyr::summarise(sum_city = sum(sum))
1671639205798:#데이터 분석
1671639205799:#미세먼지가 심한 도시 순위 확인
1671639205800:finedustcity <- rdsut.df %>%
1671639205800:group_by(city) %>%
1671639205800:dplyr::summarise(sum_city = sum(sum))
1671639217800:#데이터 분석
1671639217801:#미세먼지가 심한 도시 순위 확인
1671639217801:finedustcity <- dust.df %>%
1671639217802:group_by(city) %>%
1671639217802:dplyr::summarise(sum_city = sum(sum))
1671639224922:#데이터 분석
1671639224923:#미세먼지가 심한 도시 순위 확인
1671639224923:finedustcity <- dust.df %>%
1671639224924:group_by(District) %>%
1671639224924:dplyr::summarise(sum_city = sum(sum))
1671639244413:#데이터 분석
1671639244414:#미세먼지가 심한 도시 순위 확인
1671639244414:finedustcity <- dust.df %>%
1671639244414:group_by(District) %>%
1671639244414:dplyr::summarise(sum_city = sum(sum))
1671639278741:#데이터 분석
1671639278743:#미세먼지가 심한 도시 순위 확인
1671639278743:finedustcity <- dust.df %>%
1671639278743:group_by(District) %>%
1671639278744:dplyr::summarise(sum_city = sum())
1671639295158:#데이터 분석
1671639295159:#미세먼지가 심한 도시 순위 확인
1671639295159:finedustcity <- dust.df %>%
1671639295159:group_by(District) %>%
1671639295159:dplyr::summarise(sum_city = sum(sum))
1671639309282:View(finedustcity)
1671639326911:#데이터 분석
1671639326913:#미세먼지가 심한 도시 순위 확인
1671639326913:finedustcity <- dust.df %>%
1671639326913:group_by(District) %>%
1671639326913:dplyr::summarise(sum_city = sum())
1671639327432:View(finedustcity)
1671639354598:#데이터 분석
1671639354599:#미세먼지가 심한 도시 순위 확인
1671639354599:finedustcity <- dust.df %>%
1671639354600:group_by(District) %>%
1671639354600:dplyr::summarise(sum_city = sum(Finedust))
1671639355754:View(finedustcity)
1671639371497:#데이터 분석
1671639371498:#미세먼지가 심한 도시 순위 확인
1671639371499:finedustcity <- dust.df %>%
1671639371499:group_by(District) %>%
1671639371499:dplyr::summarise(Finedust)
1671639373321:View(finedustcity)
1671639525724:#데이터 분석
1671639525726:#미세먼지가 심한 도시 순위 확인
1671639525726:finedustcity <- dust.df %>%
1671639525726:group_by(District) %>%
1671639525726:dplyr::summarise(year=2020)
1671639526774:View(finedustcity)
1671639602700:#데이터 분석
1671639602702:#미세먼지가 심한 도시 순위 확인
1671639602702:finedustcity <- dust.df %>%
1671639602702:group_by(District) %>%
1671639602702:dplyr::summarise(sum(Finedust))
1671639603508:View(finedustcity)
1671639688612:#데이터 분석
1671639688614:#미세먼지가 심한 도시 순위 확인
1671639688614:finedustcity <- Finedust %>%
1671639688615:group_by(District) %>%
1671639688615:dplyr::summarise(Finedust)
1671639709920:#데이터 분석
1671639709921:#미세먼지가 심한 도시 순위 확인
1671639709921:finedustcity <- dust.df %>%
1671639709922:group_by(District) %>%
1671639709922:dplyr::sor(Finedust)
1671639713484:#데이터 분석
1671639713484:#미세먼지가 심한 도시 순위 확인
1671639713485:finedustcity <- dust.df %>%
1671639713485:group_by(District) %>%
1671639713485:dplyr::sort(Finedust)
1671639721242:#데이터 분석
1671639721244:#미세먼지가 심한 도시 순위 확인
1671639721244:finedustcity <- dust.df %>%
1671639721244:group_by(District) %>%
1671639721244:dplyr::summarise(Finedust)
1671639723607:View(finedustcity)
1671639929778:#데이터 분석
1671639929784:#미세먼지가 심한 도시 순위 확인
1671639929784:finedustcity <- dust.df %>%
1671639929784:group_by(District) %>%
1671639929784:arrange(desc(mean(Finedust)))
1671639932184:View(finedustcity)
1671640025410:year=2020
1671640026684:View(finedustcity)
1671640065038:year=2020
1671640065531:month=3
1671640067405:View(finedustcity)
1671640079156:date=15
1671640079694:View(finedustcity)
1671640108588:#데이터 분석
1671640108589:#미세먼지가 심한 도시 순위 확인
1671640108590:finedustcity <- dust.df %>%
1671640108590:group_by(District) %>%
1671640108590:arrange(desc(mean(Finedust)))%>%
1671640108590:year=2020%>%
1671640108590:month=3%>%
1671640108591:date=15
1671640151693:if(!require('leaflet.extras'))install.packages('leaflet.extras');library('leaflet.extras')
1671640230733:leaflet()%>%addTiles()
1671640278316:if(!require(rstudioapi))install.packages('rstudioapi');library(rstudioapi)
1671640310009:install.packages("rstudioapi")
1671640318451:install.packages("rstudioapi")
1671640325396:if(!require(rstudioapi))install.packages('rstudioapi');library(rstudioapi)
1671640399215:myTerm <- rstudioapi::terminalCreate()
1671640446222:if (!rstudioapi::terminalRunning(myTerm)) {
1671640446224:rstudioapi::terminalActivate(myTerm, show = FALSE)
1671640446225:while (!rstudioapi::terminalRunning(myTerm)) {
1671640446225:Sys.sleep(0.1)
1671640446225:}
1671640446225:}
1671640447873:rstudioapi::terminalSend(myTerm, "cd c:/selenium \n")
1671640450982:rstudioapi::terminalSend(myTerm, 'java -Dwebdriver.gecko.driver="geckodriver.exe" -jar selenium-server-standalone-3.9.1.jar -port 4446\n ')
1671640452687:remDr<-remoteDriver(port=4446L,browser='chrome')
1671640456795:remDr$open(silent = T)
1671640477625:rstudioapi::terminalSend(myTerm, "cd c:/selenium \n")
1671640478702:rstudioapi::terminalSend(myTerm, 'java -Dwebdriver.gecko.driver="geckodriver.exe" -jar selenium-server-standalone-3.9.1.jar -port 4446\n ')
1671640479291:remDr<-remoteDriver(port=4446L,browser='chrome')
1671640501424:remDr<-remoteDriver(port=4446L,browser='chrome')
1671640504688:remDr<-remoteDriver(port=4446L,browser='chrome')
1671640551251:#데이터 분석
1671640551253:#미세먼지가 심한 도시 순위 확인
1671640551254:finedustcity <- dust.df %>%
1671640551254:group_by(District) %>%
1671640551255:arrange(desc(mean(Finedust)))%>%
1671640551255:year=2020%>%
1671640551255:month=3%>%
1671640551255:View(finedustcity)
1671640556794:#데이터 분석
1671640556796:#미세먼지가 심한 도시 순위 확인
1671640556796:finedustcity <- dust.df %>%
1671640556796:group_by(District) %>%
1671640556797:arrange(desc(mean(Finedust)))%>%
1671640556797:year=2020%>%
1671640556797:month=3
1671640591425:dplyr::summarise(Finedust)
1671640599306:#데이터 분석
1671640599308:#미세먼지가 심한 도시 순위 확인
1671640599308:finedustcity <- dust.df %>%
1671640599308:group_by(District) %>%
1671640599308:arrange(desc(mean(Finedust)))%>%
1671640599309:year=2020%>%
1671640599309:month=3%>%
1671640599309:dplyr::summarise(Finedust)
1671640621782:#데이터 분석
1671640621783:#미세먼지가 심한 도시 순위 확인
1671640621783:finedustcity <- dust.df %>%
1671640621783:group_by(District) %>%
1671640621784:arrange(desc(mean(Finedust)))%>%
1671640621784:Year=2020 %>%
1671640621784:Month=3 %>%
1671640621784:dplyr::summarise(Finedust)
1671640634890:#데이터 분석
1671640634892:#미세먼지가 심한 도시 순위 확인
1671640634892:finedustcity <- dust.df %>%
1671640634892:group_by(District) %>%
1671640634893:arrange(desc(mean(Finedust)))%>%
1671640634893:Year=2020 %>%
1671640634893:Month<3 %>%
1671640634893:dplyr::summarise(Finedust)
1671640643040:#데이터 분석
1671640643041:#미세먼지가 심한 도시 순위 확인
1671640643041:finedustcity <- dust.df %>%
1671640643041:group_by(District) %>%
1671640643042:arrange(desc(mean(Finedust)))%>%
1671640643042:Year<2021 %>%
1671640643042:Month<3 %>%
1671640643042:dplyr::summarise(Finedust)
1671640653361:View(finedustcity)
1671640687179:#데이터 분석
1671640687180:#미세먼지가 심한 도시 순위 확인
1671640687181:finedustcity <- dust.df %>%
1671640687181:group_by(District) %>%
1671640687181:arrange(desc(mean(Finedust)))%>%
1671640687181:Year<2021 %>%
1671640687181:Month<3 %>%
1671640687182:Date==1%>%
1671640687182:dplyr::summarise(Finedust)
1671640693158:#데이터 분석
1671640693158:#미세먼지가 심한 도시 순위 확인
1671640693159:finedustcity <- dust.df %>%
1671640693159:group_by(District) %>%
1671640693159:arrange(desc(mean(Finedust)))%>%
1671640693159:Year<2021 %>%
1671640693159:Month<3 %>%
1671640693160:Date==1%>%
1671640693160:dplyr::summarise(Finedust)
1671640696733:#데이터 분석
1671640696734:#미세먼지가 심한 도시 순위 확인
1671640696734:finedustcity <- dust.df %>%
1671640696734:group_by(District) %>%
1671640696735:arrange(desc(mean(Finedust)))%>%
1671640696735:Year<2021 %>%
1671640696735:Month<3 %>%
1671640696735:Date==1%>%
1671640696736:dplyr::summarise(Finedust)
1671640710939:#데이터 분석
1671640710940:#미세먼지가 심한 도시 순위 확인
1671640710940:finedustcity <- dust.df %>%
1671640710940:group_by(District) %>%
1671640710941:arrange(desc(mean(Finedust)))%>%
1671640710941:Year<2021 %>%
1671640710941:Month<3 %>%
1671640710941:Date=1%>%
1671640710941:dplyr::summarise(Finedust)
1671640742024:kor <- get_map("seoul", zoom = 11, maptype = "roadmap")
1671640763352:install.packages("ggmap")
1671640772158:kor <- get_map("seoul", zoom = 11, maptype = "roadmap")
1671640791530:library(ggmap)
1671640796442:kor <- get_map("seoul", zoom = 11, maptype = "roadmap")
1671640821336:register_google(key = 'AIzaSyBUDeKORQeXAM-BlkY3EA1Zwt8EWssIj74')
1671640823902:kor <- get_map("seoul", zoom = 11, maptype = "roadmap")
1671641105870:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("연령대") + ylab("이용건수")
1671641163502:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671641295416:data_file <- read.csv(file = ""SeoulFineDust.csv", reencode='utf-8',to.data.frame = T)
1671641295418:View(dust.df)
1671641295654:str(dust.df)
1671641295657:#데이터 분석
1671641295657:#미세먼지가 심한 도시 시각화
1671641295657:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671641295851:#미세먼지가 심한 날짜 시각화
1671641295852:# 전처리
1671641295852:table(dust.df$Finedust)
1671641295853:#결측치 확인
1671641295853:table(is.na(dust.df$Finedust))
1671641295854:sum(is.na(dust.df$Finedust))
1671641295854:#결측치 처리
1671641295854:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671641295856:table(is.na(Finedust_clean$Finedust))
1671641295856:#이상치 처리
1671641295856:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671641295857:table(is.na(dust.df$Finedust))
1671641295857:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671641295858:table(is.na(Finedust_clean$Finedust))
1671641295858:View(dust.df)
1671641295859:#날씨 예측
1671641295859:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671641295859:# 다중 선형 회귀분석 모델
1671641295859:#partitioning for training and validation
1671641295859:set.seed(1)
1671641295860:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671641295861:train.df <- dust.df[train.index,]
1671641295861:valid.df <- dust.df[-train.index,]
1671641295861:#정규화
1671641295861:train.norm.df <- train.df
1671641295861:valid.norm.df <- valid.df
1671641295861:dust.norm.df <- dust.df
1671641295861:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671641295862:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671641295862:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671641295862:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671641295862:# 오류 new.norm.df<- predict(norm.values,new.df)
1671641295863:#다중 선형 회구 모델 with training set
1671641295863:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671641295870:options(scipen=999)
1671641295870:summary(Finedust.lm)
1671641295886:# validation set for accuracy
1671641295886:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671641295890:options(scipen=999, digits=0)
1671641295890:#check the disctrict
1671641295890:some.residuals<- valid.norm.df$
1671641295890:#df for oz
1671641295890:data.frame('Predicted' = Finedust.lm.pred[1:5], "Actual" = valid.norm.df$)
1671641295890:Finedust.lm.
1671641295890:Finedust.lm..pred.train <- predict(Finedust.lm., train.norm.df)
1671641295891:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671641295893:options(scipen=999, digits=0)
1671641295893:same.dust<-valid.norm.df$Finedust-Finedust.lm.pred[1:5]
1671641295893:data.frame("Predicted" = Finedust.lm.pred.train, )
1671641336278:data_file <- read.csv(file = "SeoulFineDust.csv", reencode='utf-8',to.data.frame = T)
1671641352535:data_file <- read.spss(file = "Koweps_h16_2021_beta1.sav", reencode='utf-8',to.data.frame = T)
1671641360350:data_file <- read.csv(file = "Koweps_h16_2021_beta1.sav", reencode='utf-8',to.data.frame = T)
1671641397377:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671641529230:#미세먼지가 심한 날짜 시각화
1671641529233:FinedustDate <- dust.df %>%
1671641529233:filter(District == "강남구") %>%
1671641529233:arrange(desc(Finedust)) %>%
1671641529233:head(5)
1671641679872:#미세먼지가 심한 날짜
1671641679874:FinedustDate <- dust.df %>%
1671641679874:filter(Date == "1") %>%
1671641679874:arrange(desc(Finedust)) %>%
1671641679874:head(5)
1671641735969:#미세먼지가 심한 날짜
1671641735970:FinedustDate <- dust.df %>%
1671641735970:arrange(desc(Finedust)) %>%
1671641735970:head(5)
1671641752439:View finedust
1671641759725:View(dust.df)
1671642090698:#미세먼지가 심한 날짜
1671642090700:FinedustDate <- dust.df
1671642093231:head(5)
1671642101746:#미세먼지가 심한 날짜
1671642101748:FinedustDate <- dust.df %>%
1671642101748:arrange(desc(Finedust))
1671642140683:library("dplyr")
1671642201679:install.packages("foreign")
1671642207217:library("foreign")
1671642208081:library("dplyr")
1671642260704:#미세먼지가 심한 날짜
1671642260706:FinedustDate <- dust.df %>%
1671642260706:arrange(desc(Finedust))
1671642262837:head(5)
1671642290996:#미세먼지가 심한 날짜
1671642290998:FinedustDate <- dust.df %>%
1671642290998:filter(Date=="1")%>%
1671642290998:arrange(desc(Finedust))
1671642292896:head(5)
1671642312326:View(FinedustDate)
1671642405254:FinedustDate <- dust.df %>%
1671642405256:filter(District=="강남구")%>%
1671642405256:filter(Date=='1')%>%
1671642405257:arrange(desc(Finedust))
1671642419828:Finedustcitydate <- dust.df %>%
1671642419842:filter(District=="강남구")%>%
1671642419842:filter(Date=='1')%>%
1671642419860:arrange(desc(Finedust))
1671642428087:View(Finedustcitydate)
1671642459176:# validation set for accuracy
1671642459178:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671642549209:some.residuals <- valid.norm.df$Finedust[1:5]
1671642568653:Finedust.lm.pred[1:5]
1671642668915:#df for residuals
1671642668917:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671642683268:ooptions(scipen =999, digits=3)
1671642689737:options(scipen =999, digits=3)
1671642724342:forecast: acccuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671642740332:library(forecast)
1671642752199:library("forecast")
1671642758723:forecast: acccuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671642824023:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671642918970:#train set for accuaray
1671642918972:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671642922307:options(scipen=999, digits = 0)
1671642923435:# check the residuals
1671642923435:some.residuals <- train.norm.df$rentCnt[1:5] - bike.rent.lm.pred.train[1:5]
1671642946890:# check the residuals
1671642946891:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671642967523:# df for residuals
1671642967523:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671642969361:options(scipen =999, digits = 3)
1671642981464:# check the accuracy
1671642981465:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$rFinedust)
1671643002962:# // show all residuals with visualization
1671643002965:all.residuals <- valid.norm.df$rentCnt - bike.rent.lm.pred
1671643012098:# // show all residuals with visualization
1671643012100:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671643015286:hist(all.residuals, breaks = 25, xlab = "Residuals", main = "")
1671643031381:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "")
1671643035299:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "")
1671643201791:#train set for accuaray
1671643201793:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671643202217:options(scipen=999, digits = 0)
1671643204975:# check the residuals
1671643204975:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671643205620:# df for residuals
1671643205621:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671643224824:options(scipen =999, digits = 3)
1671643226793:# check the accuracy
1671643226794:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$rFinedust)
1671643341900:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "Lift Chart")
1671643431380:install.packages("party")
1671643455532:install.packages('ROCR')
1671643664634:plot(Finedust.lm.pred.train)
1671643845061:confusion(ifelse(dust.df$Finedust>30, 'dust high','no dust high'), dust.df$Month)
1671643852931:library("caret")
1671643859819:library(caret)
1671643862310:confusion(ifelse(dust.df$Finedust>30, 'dust high','no dust high'), dust.df$Month)
1671643875656:confusionMatrix(ifelse(dust.df$Finedust>30, 'dust high','no dust high'), dust.df$Month)
1671643945645:confusionMatrix(ifelse(dust.df$Finedust>0.5, 'dust high','no dust high'), dust.df$Month)
1671643964891:confusionMatrix(ifelse(dust.df$Finedust>30, 'dusthigh','nodusthigh'), dust.df$Month)
1671643974815:confusionMatrix(ifelse(dust.df$Finedust>30, 'dusthigh','nodusthigh'), dust.df$Finedust)
1671644058283:f_predicted <-as.factor(Finedust)
1671644075779:View(dust.df)
1671644111159:# // show all residuals with visualization
1671644111161:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671644118939:f_predicted <-as.factor(Finedust)
1671644129746:f_predicted <-as.factor(dust.df$Finedust)
1671644162114:confusionMatrix(predicted,actual)
1671644275775:confusionMatrix(ifelse(dust.df$Finedust>30, 'dusthigh','nodusthigh'), dust.df$Finedust)
1671644345505:confusionMatrix(ifelse(dust.df$Finedust>30, 'dusthigh','nodusthigh'), dust.df$Date)
1671644533642:ho2.df <- read.csv("SeoulNo2.csv")
1671644609265:no2.df <- read.csv("SeoulNo2.csv")
1671644718418:View(no2.df)
1671644764966:no2.df <- rename(no2.df,
1671644764968:no2 = NO2.ppm)
1671644924424:table(no2.df$no2)
1671644951281:#결측치 확인
1671644951282:table(is.na(no2.df$no2))
1671644951979:sum(is.na(no2.df$no2))
1671644992673:#결측치 처리
1671644992676:no2_clean <- no2.df%>%filter(!is.na(no2))
1671644999272:table(is.na(no2_clean$no2))
1671645088561:No2.df <- read.csv("SeoulNo2.csv")
1671645090930:no2.df <- rename(no2.df,
1671645090931:no2 = NO2.ppm)
1671645099443:No2.df <- rename(no2.df,
1671645099443:no2 = NO2.ppm)
1671645104833:No2.df <- rename(No2.df,
1671645104834:no2 = NO2.ppm)
1671645135106:table(is.na(no2_clean$no2))
1671645139801:#이상치 처리
1671645139801:No2.df$no2 <- ifelse(No2.df$no2<10, NA, no2.df$no2)
1671645151026:table(is.na(No.df$no2))
1671645157647:table(is.na(No2.df$no2))
1671645188366:no2_clean <- No2.df%>%filter(!is.na(no2))
1671645189394:table(is.na(no2_clean$Finedust))
1671645198111:table(is.na(no2_clean$Finedust))
1671645201040:View(dust.df)
1671645212128:table(is.na(no2_clean$no2))
1671645219444:View(No2.df)
1671645231246:View(No2.df)
1671645641286:install.packages("foreign")
1671678268522:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671678278592:install.packages("foreign")
1671678285325:library("dplyr")
1671678309336:library(foreign)
1671678310169:library(dplyr)
1671678310887:library(ggplot2)
1671678313657:library(readxl)
1671678314770:library(caret)
1671678319337:library(forecast)
1671678338708:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671678346683:dust.df <- read.csv("SeoulFineDust.csv")
1671678353047:dust.df <- read.csv("SeoulFineDust.csv")
1671678354443:age.df <- read.csv("age.csv")
1671678355236:No2.df <- read.csv("SeoulNo2.csv")
1671678415908:dust.df <- read.csv("SeoulFineDust.csv")
1671678416495:age.df <- read.csv("age.csv")
1671678419171:No2.df <- read.csv("SeoulNo2.csv")
1671678421724:dust.df <- rename(dust.df,
1671678421725:Finedust =FineDust.PM )
1671678422196:No2.df <- rename(No2.df,
1671678422196:no2 = NO2.ppm)
1671678424743:str(dust.df)
1671678425865:Finedustcitydate <- dust.df %>%
1671678425866:filter(District=="강남구")%>%
1671678425866:filter(Date=='1')%>%
1671678425866:arrange(desc(Finedust))
1671678426723:View(Finedustcitydate)
1671678429558:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671678436257:#미세먼지가 심한 날짜
1671678436258:FinedustDate <- dust.df %>%
1671678436258:filter(Date=="1")%>%
1671678436258:arrange(desc(Finedust))
1671678439047:View(FinedustDate)
1671678442644:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671678461586:table(dust.df$Finedust)
1671678463005:#결측치 확인
1671678463006:table(is.na(dust.df$Finedust))
1671678464295:sum(is.na(dust.df$Finedust))
1671678465412:#결측치 처리
1671678465412:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671678466593:table(is.na(Finedust_clean$Finedust))
1671678467720:#이상치 처리
1671678467720:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671678473501:table(is.na(dust.df$Finedust))
1671678475555:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671678476296:table(is.na(Finedust_clean$Finedust))
1671678478679:View(dust.df)
1671678484888:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671678487650:#partitioning for training and validation
1671678487651:set.seed(1)
1671678488622:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671678489666:train.df <- dust.df[train.index,]
1671678490400:valid.df <- dust.df[-train.index,]
1671678491533:#정규화
1671678491533:train.norm.df <- train.df
1671678493097:valid.norm.df <- valid.df
1671678495744:dust.norm.df <- dust.df
1671678497062:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671678529596:norm.values <- preProcess( train.df[,1:3], method=c("center","scale"))
1671678532714:norm.values <- preProcess( train.df[,1:2], method=c("center","scale"))
1671678536481:norm.values <- preProcess( train.df[,1:1], method=c("center","scale"))
1671678541526:norm.values <- preProcess( train.df[,1:2], method=c("center","scale"))
1671679239745:dust2.df <-read.csv("SeoulFineDust2.csv")
1671679259814:dust.df <- read.csv("SeoulFineDust.csv")
1671679261943:dust2.df <-read.csv("SeoulFineDust2.csv")
1671679314048:dust2.df <-read.csv("SeoulFineDust2.csv")
1671679331324:train.df <- dust2.df[train.index,]
1671679332110:valid.df <- dust2.df[-train.index,]
1671679334276:#정규화
1671679334276:train.norm.df <- train.df
1671679335963:valid.norm.df <- valid.df
1671679344128:dust2.norm.df <- dust2.df
1671679345626:norm.values <- preProcess( train.df[,1:2], method=c("center","scale"))
1671679370577:library(caret)
1671679379306:norm.values <- preProcess( train.df[,1:2], method=c("center","scale"))
1671679407952:norm.values <- preProcess( train.df[,1:2], method=c("center","scale"))
1671679409736:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671679420372:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671681606824:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671681620329:norm.values <- preProcess( train.df[,1:4], method=c("center","scale"))
1671681679278:norm.values <- preProcess( train.df, method=c("center","scale"))
1671681690097:norm.values <- preProcess( train.df, method=c("center","scale"))
1671681818874:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671681818875:norm.values <- preProcess(train.df, method=c("center","scale"))
1671681880045:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671681881179:train.df <- dust.df[train.index,]
1671681881929:valid.df <- dust.df[-train.index,]
1671681884385:#정규화
1671681884385:train.norm.df <- train.df
1671681884983:valid.norm.df <- valid.df
1671681893138:dust.norm.df <- dust.df
1671681894640:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671681894640:norm.values <- preProcess(train.df, method=c("center","scale"))
1671681919501:train.index <- sample(c(1:dim(dust2.df)[1]), dim(dust2.df)[1]*0.6)
1671681920445:train.df <- dust2.df[train.index,]
1671681921007:valid.df <- dust2.df[-train.index,]
1671681921806:#정규화
1671681921806:train.norm.df <- train.df
1671681922874:valid.norm.df <- valid.df
1671681923362:dust2.norm.df <- dust2.df
1671681924824:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671681924825:norm.values <- preProcess(train.df, method=c("center","scale"))
1671682036750:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671682036751:norm.values <- preProcess(train.df[,1:3], method=c("center","scale"))
1671682040183:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671682040183:norm.values <- preProcess(train.df[,1:2], method=c("center","scale"))
1671682045347:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671682045347:norm.values <- preProcess(train.df[,3:2], method=c("center","scale"))
1671682117306:View(dust2.df)
1671682188707:No2.df <- rename(No2.df,
1671682188708:no2 = NO2.ppm)
1671682207356:No2.df <- rename(dust2.df,
1671682207357:no2 = NO2.ppm)
1671682277922:View(dust2.df)
1671682521752:dust2.df <-read.csv("SeoulFineDust2.csv")
1671682523726:dust2.df <-read.csv("SeoulFineDust2.csv")
1671682587266:install.packages("foreign")
1671682593902:library(foreign)
1671682594935:library(dplyr)
1671682598524:library(ggplot2)
1671682599225:library(readxl)
1671682599763:library(caret)
1671682601904:library(forecast)
1671682605329:dust2.df <-read.csv("SeoulFineDust2.csv")
1671682626720:dust2.df <-read.csv("SeoulFineDust2.csv")
1671682933903:dust.df <- read.csv("SeoulFineDust.csv")
1671682949811:dust.df <- read.csv("SeoulFineDust1.csv")
1671683402849:dust.df <- read.csv("SeoulFineDust.csv")
1671683409249:dust.df <- read.csv("SeoulFineDust.csv")
1671683410953:age.df <- read.csv("age.csv")
1671683411593:No2.df <- read.csv("SeoulNo2.csv")
1671683412891:View(dust2.df)
1671683459248:View(dust.df)
1671683503714:dust.df <- read.csv("SeoulFineDust.csv")
1671683840734:dust.df <- read.csv("SeoulFineDust.csv")
1671683842755:View(dust.df)
1671683855492:dust.df <- rename(dust.df,
1671683855492:Finedust =FineDust.PM )
1671683872553:library(foreign)
1671683873586:library(dplyr)
1671683886136:library("dplyr")
1671683889377:dust.df <- rename(dust.df,
1671683889377:Finedust =FineDust.PM )
1671683896233:No2.df <- rename(dust2.df,
1671683896233:no2 = NO2.ppm)
1671683898761:No2.df <- read.csv("SeoulNo2.csv")
1671683901472:No2.df <- rename(dust2.df,
1671683901472:no2 = NO2.ppm)
1671683907727:Finedustcitydate <- dust.df %>%
1671683907727:filter(District=="강남구")%>%
1671683907727:filter(Date=='1')%>%
1671683907728:arrange(desc(Finedust))
1671683910957:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671683917799:library(ggplot2)
1671683925136:library("ggplot2")
1671683929478:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671683930872:#미세먼지가 심한 날짜
1671683930872:FinedustDate <- dust.df %>%
1671683930872:filter(Date=="1")%>%
1671683930872:arrange(desc(Finedust))
1671683934901:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671683936639:table(dust.df$Finedust)
1671683941521:#결측치 확인
1671683941521:table(is.na(dust.df$Finedust))
1671683942528:sum(is.na(dust.df$Finedust))
1671683945776:#결측치 처리
1671683945776:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671683947361:table(is.na(Finedust_clean$Finedust))
1671683948673:#이상치 처리
1671683948673:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671683951357:table(is.na(dust.df$Finedust))
1671683952394:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671683953516:table(is.na(Finedust_clean$Finedust))
1671683959552:new.df <- data.frame(date = 10, month = 3, Finedust = 35)
1671683962954:#partitioning for training and validation
1671683962955:set.seed(1)
1671683976380:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671683977315:train.df <- dust2.df[train.index,]
1671683977732:valid.df <- dust2.df[-train.index,]
1671683985599:train.df <- dust.df[train.index,]
1671683986145:valid.df <- dust.df[-train.index,]
1671683987694:#정규화
1671683987694:train.norm.df <- train.df
1671683988342:valid.norm.df <- valid.df
1671683988646:dust2.norm.df <- dust2.df
1671683989336:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671683989336:norm.values <- preProcess(train.df[,3:2], method=c("center","scale"))
1671683998003:library("caret")
1671684026877:install.packages("caret")
1671684035823:install.packages("caret")
1671684039881:library("caret")
1671684052421:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671684053142:train.df <- dust.df[train.index,]
1671684055688:#정규화
1671684055688:train.norm.df <- train.df
1671684056265:valid.norm.df <- valid.df
1671684056753:dust2.norm.df <- dust2.df
1671684057851:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671684057852:norm.values <- preProcess(train.df[,3:2], method=c("center","scale"))
1671684068130:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671684068131:norm.values <- preProcess(train.df[,1:4], method=c("center","scale"))
1671684080664:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671684080665:norm.values <- preProcess(train.df[,1:3], method=c("center","scale"))
1671684081486:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671684082028:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671684082481:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671684083325:#다중 선형 회구 모델 with training set
1671684083325:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671684085211:options(scipen=999)
1671684085675:summary(Finedust.lm)
1671684087644:# validation set for accuracy
1671684087645:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671684091304:options(scipen=999, digits=0)
1671684092151:#check the residuals
1671684092152:some.residuals <- valid.norm.df$Finedust[1:5]
1671684093677:Finedust.lm.pred[1:5]
1671684096626:#df for residuals
1671684096626:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671684098690:options(scipen =999, digits=3)
1671684099374:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671684100500:#train set for accuaray
1671684100500:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671684101258:options(scipen=999, digits = 0)
1671684101679:# check the residuals
1671684101679:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671684102341:# df for residuals
1671684102342:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671684103385:options(scipen =999, digits = 3)
1671684107420:# check the accuracy
1671684107420:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$rFinedust)
1671684119998:# // show all residuals with visualization
1671684119999:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671684122231:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671684338208:plot(Finedust.lm.pred.train)
1671684358875:# check the accuracy
1671684358876:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$rFinedust)
1671684438906:# check the accuracy
1671684438907:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671684441661:# // show all residuals with visualization
1671684441679:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671684443629:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671684446353:plot(Finedust.lm.pred.train)
1671684450175:# check the accuracy
1671684450175:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671684520729:#new data test
1671684520730:new.pred <-(Finedust.lm, new.norm.df)
1671684530127:#new data test
1671684530128:new.pred <-predict(Finedust.lm, new.norm.df)
1671684584722:new.norm.df <- new.df
1671684589209:#new data test
1671684589210:new.pred <-predict(Finedust.lm, new.norm.df)
1671684645256:new.norm.df<- predict(norm.values,new.df)
1671684656272:new.norm.df<- predict(norm.values,new.df)
1671684660481:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671684666692:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671684666693:norm.values <- preProcess(train.df[,1:3], method=c("center","scale"))
1671684669291:new.norm.df<- predict(norm.values,new.df)
1671689207653:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671690255386:#new data test
1671690255414:new.pred <- predict(Finedust.lm, new.norm.df)
1671690417378:options(scipen=999, digits=0)
1671690420694:new.pred
1671690443066:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671690443068:norm.values <- preProcess(train.df[,1:2], method=c("center","scale"))
1671690456842:train.norm.df[,1:2] <- predict( norm.values, train.df[,1:2] )
1671690457391:valid.norm.df[,1:2] <- predict( norm.values, valid.df[,1:2] )
1671690457874:dust.norm.df[,1:2] <- predict( norm.values, dust.df[,1:2] )
1671690458981:new.norm.df<- predict(norm.values,new.df)
1671690628741:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671690628744:norm.values <- preProcess(train.df[3,4], method=c("center","scale"))
1671690727383:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671690727385:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671690776293:View(norm.values)
1671690789408:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671690789409:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671690790120:View(norm.values)
1671690886997:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671690886998:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671690887527:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671690887877:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671690888150:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671690888490:new.norm.df<- predict(norm.values,new.df)
1671690889218:#다중 선형 회구 모델 with training set
1671690889218:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671690889687:options(scipen=999)
1671690890514:summary(Finedust.lm)
1671690898036:# validation set for accuracy
1671690898036:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671690898982:options(scipen=999, digits=0)
1671690899475:#check the residuals
1671690899475:some.residuals <- valid.norm.df$Finedust[1:5]
1671690900122:Finedust.lm.pred[1:5]
1671690948833:#df for residuals
1671690948835:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671690949792:options(scipen =999, digits=3)
1671690950836:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671690954016:#train set for accuaray
1671690954016:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671690954548:options(scipen=999, digits = 0)
1671690955259:# check the residuals
1671690955259:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671690956505:# df for residuals
1671690956505:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671690970966:options(scipen =999, digits = 3)
1671690971830:# check the accuracy
1671690971830:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671690975651:#  show all residuals with visualization
1671690975652:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671690976811:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671690979532:# 산점도 그래프로 나타내기
1671690979533:plot(Finedust.lm.pred.train)
1671691057191:Finedust.lm.pred[1:5]
1671691083530:#df for residuals
1671691083530:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671691085051:options(scipen =999, digits=3)
1671691085568:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671691086706:#train set for accuaray
1671691086706:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671691087169:options(scipen=999, digits = 0)
1671691087729:# check the residuals
1671691087729:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671691089928:# df for residuals
1671691089929:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671691090501:options(scipen =999, digits = 3)
1671691091074:# check the accuracy
1671691091074:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671691092593:#  show all residuals with visualization
1671691092593:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671691093074:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671691094054:# 산점도 그래프로 나타내기
1671691094054:plot(Finedust.lm.pred.train)
1671691095794:#new data test
1671691095795:new.pred <- predict(Finedust.lm, new.norm.df)
1671691106616:new.norm.df<- predict(norm.values,new.df)
1671691117056:#new data test
1671691117056:new.pred <- predict(Finedust.lm, new.norm.df)
1671691212187:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671691212188:norm.values <- preProcess(train.df[,c(1,4,5)], method=c("center","scale"))
1671691228774:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671691228776:norm.values <- preProcess(train.df[,c(1,4,5)], method=c("center","scale"))
1671691229369:train.norm.df[,c(1,4,5)] <- predict( norm.values, train.df[,c(1,4,5)] )
1671691229672:valid.norm.df[,c(1,4,5)] <- predict( norm.values, valid.df[,c(1,4,5)] )
1671691229968:dust.norm.df[,c(1,4,5)] <- predict( norm.values, dust.df[,c(1,4,5)] )
1671691230399:new.norm.df<- predict(norm.values,new.df)
1671691240624:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671691240624:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671691240963:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671691241248:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671691241460:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671691242583:new.norm.df<- predict(norm.values,new.df)
1671691242925:#다중 선형 회구 모델 with training set
1671691242926:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671691243168:options(scipen=999)
1671691243350:summary(Finedust.lm)
1671691243548:# validation set for accuracy
1671691243548:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671691243758:options(scipen=999, digits=0)
1671691243953:#check the residuals
1671691243953:some.residuals <- valid.norm.df$Finedust[1:5]
1671691244307:Finedust.lm.pred[1:5]
1671691244563:#df for residuals
1671691244563:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671691244726:options(scipen =999, digits=3)
1671691244909:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671691245248:#train set for accuaray
1671691245249:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671691245473:options(scipen=999, digits = 0)
1671691245802:# check the residuals
1671691245803:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671691246027:# df for residuals
1671691246028:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671691246400:options(scipen =999, digits = 3)
1671691246671:# check the accuracy
1671691246672:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671691246913:#  show all residuals with visualization
1671691246913:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671691247240:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671691247849:# 산점도 그래프로 나타내기
1671691247849:plot(Finedust.lm.pred.train)
1671691248253:#new data test
1671691248254:new.pred <- predict(Finedust.lm, new.norm.df)
1671691250166:options(scipen=999, digits=0)
1671691250828:new.pred
1671691458408:#new data test
1671691458409:new.pred <- predict(Finedust.lm, new.norm.df)
1671691501039:norm.values <- preProcess(train.df[,1:5], method=c("center","scale"))
1671691622588:norm.values <- preProcess(train.df[,1:5], method=c("center","scale"))
1671691623536:train.norm.df[,1:5] <- predict( norm.values, train.df[,1:5] )
1671691624441:valid.norm.df[,1:5] <- predict( norm.values, valid.df[,1:5] )
1671691627939:dust.norm.df[,1:5] <- predict( norm.values, dust.df[,1:5] )
1671691630874:new.norm.df<- predict(norm.values,new.df)
1671691654023:norm.values <- preProcess(train.df[,1:3], method=c("center","scale"))
1671691655995:new.norm.df<- predict(norm.values,new.df)
1671691661627:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671691661627:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671691664143:new.norm.df<- predict(norm.values,new.df)
1671691725935:#new data test
1671691725937:new.pred <- predict(Finedust.lm, new.norm.df)
1671691726684:options(scipen=999, digits=0)
1671691836758:#다중 선형 회구 모델 with training set
1671691836760:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671691838986:options(scipen=999)
1671691852073:train.norm.df[,c(1,4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671691854786:#다중 선형 회구 모델 with training set
1671691854786:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671691874733:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671691876321:#다중 선형 회구 모델 with training set
1671691876321:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671691913866:#new data test
1671691913867:new.pred <- predict(Finedust.lm, new.norm.df)
1671691938690:new.norm.df<- predict(norm.values,new.df)
1671691946880:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671691946881:norm.values <- preProcess(train.df[,c(1,4,5)], method=c("center","scale"))
1671691949225:new.norm.df<- predict(norm.values,new.df)
1671692005005:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692005007:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692006790:new.norm.df<- predict(norm.values,new.df)
1671692009275:new.norm.df<- predict(norm.values,new.df)
1671692019718:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692023503:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692029783:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692029785:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692031072:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692037038:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692037038:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692040685:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692047645:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692050847:train.norm.df[,c(3,4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692055597:train.norm.df[,c(2,3,4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692058877:train.norm.df[,c(12,3,4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692062242:train.norm.df[,c(1,2,3,4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692067263:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692068981:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692068982:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692069485:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692072148:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692075292:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692075292:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692076400:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692129026:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692129029:norm.values <- preProcess(train.df[1:5], method=c("center","scale"))
1671692130778:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692136907:train.norm.df[1:5,] <- predict( norm.values, train.df[,c(4,5)] )
1671692155501:train.norm.df[1:3,] <- predict( norm.values, train.df[,c(4,5)] )
1671692163583:train.norm.df[,1:3] <- predict( norm.values, train.df[,c(4,5)] )
1671692171734:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692171736:norm.values <- preProcess(train.df[,1:3], method=c("center","scale"))
1671692172623:train.norm.df[,1:3] <- predict( norm.values, train.df[,c(4,5)] )
1671692251024:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692251026:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692251634:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692252327:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671692252536:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671692252764:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692273683:norm.values <- preProcess( train.df[,1:3], method=c("center","scale"))
1671692281167:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671692285096:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671692315045:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671692316940:new.norm.df <- predict( norm.values, new.df )
1671692327656:norm.values <- preProcess( train.df[,1:5], method=c("center","scale"))
1671692328319:train.norm.df[,1:5] <- predict( norm.values, train.df[,1:3] )
1671692334853:norm.values <- preProcess( train.df[,1:5], method=c("center","scale"))
1671692335350:train.norm.df[,1:5] <- predict( norm.values, train.df[,1:5] )
1671692344366:dust.norm.df[,1:5] <- predict( norm.values, dust.df[,1:5] )
1671692346005:norm.values <- preProcess( train.df[,1:5], method=c("center","scale"))
1671692346361:train.norm.df[,1:5] <- predict( norm.values, train.df[,1:5] )
1671692346669:valid.norm.df[,1:5] <- predict( norm.values, valid.df[,1:5] )
1671692347072:dust.norm.df[,1:5] <- predict( norm.values, dust.df[,1:5] )
1671692347761:new.norm.df <- predict( norm.values, new.df )
1671692475737:norm.values <- preProcess( train.df[,c(1,3,5)], method=c("center","scale"))
1671692476346:train.norm.df[,c(1,3,5)] <- predict( norm.values, train.df[,c(1,3,5)] )
1671692477415:valid.norm.df[,c(1,3,5)] <- predict( norm.values, valid.df[,c(1,3,5)] )
1671692477924:dust.norm.df[,c(1,3,5)] <- predict( norm.values, dust.df[,c(1,3,5)] )
1671692478605:new.norm.df <- predict( norm.values, new.df )
1671692504871:norm.values <- preProcess( train.df[,c(1,3,4,5)], method=c("center","scale"))
1671692505517:train.norm.df[,c(1,3,4,5)] <- predict( norm.values, train.df[,c(1,3,4,5)] )
1671692505925:valid.norm.df[,c(1,3,5)] <- predict( norm.values, valid.df[,c(1,3,4,5)] )
1671692508911:dust.norm.df[,c(1,3,4,5)] <- predict( norm.values, dust.df[,c(1,3,4,5)] )
1671692514631:train.norm.df[,c(1,3,4,5)] <- predict( norm.values, train.df[,c(1,3,4,5)] )
1671692515115:valid.norm.df[,c(1,3,4,5)] <- predict( norm.values, valid.df[,c(1,3,4,5)] )
1671692515564:dust.norm.df[,c(1,3,4,5)] <- predict( norm.values, dust.df[,c(1,3,4,5)] )
1671692516476:new.norm.df <- predict( norm.values, new.df )
1671692521564:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692521564:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692524634:new.norm.df <- predict( norm.values, new.df )
1671692608626:#new data test
1671692608628:new.pred <- predict(Finedust.lm, new.norm.df)
1671692609337:options(scipen=999, digits=0)
1671692610247:new.pred
1671692642185:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692644139:new.norm.df<- predict(norm.values,new.df)
1671692681182:dust.norm.df <- dust.df
1671692683015:new.norm.df <- new.df
1671692687024:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692687024:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692689422:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692691171:new.norm.df
1671692712382:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671692712384:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671692714937:new.norm.df<- predict(norm.values,new.df)
1671692717826:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692719228:new.norm.df<- predict(norm.values,new.df)
1671692721085:new.norm.df<- predict(norm.values,new.df)
1671692754737:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671692761415:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671692772842:norm.values <- preProcess(train.df[,c(3,5)], method=c("center","scale"))
1671692773283:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671692773642:valid.norm.df[,c(3,5)] <- predict( norm.values, valid.df[,c(3,5)] )
1671692773994:dust.norm.df[,c(3,5)] <- predict( norm.values, dust.df[,c(3,5)] )
1671692774452:new.norm.df<- predict(norm.values,new.df)
1671692813784:new.norm.df<- predict(norm.values[,3,5],new.df)
1671692824679:new.norm.df<- predict(norm.values[,c(3,5)],new.df)
1671692832948:new.norm.df<- predict(norm.values[,5],new.df)
1671692959192:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671692964890:#partitioning for training and validation
1671692964890:set.seed(1)
1671692965470:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671692966199:train.df <- dust.df[train.index,]
1671692966625:valid.df <- dust.df[-train.index,]
1671692971251:#정규화
1671692971253:train.norm.df <- train.df
1671692971638:valid.norm.df <- valid.df
1671692971937:dust.norm.df <- dust.df
1671692972505:new.norm.df <- new.df
1671693013204:norm.values <- preProcess(train.df[,c(2,3,4,5)], method=c("center","scale"))
1671693023431:train.norm.df[,c(2,3,4,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671693031704:train.norm.df[,c(2,3,4,5)] <- predict( norm.values, train.df[,c(2,3,4,5)] )
1671693052694:norm.values <- preProcess(train.df[,c(2,3,4,5)], method=c("center","scale"))
1671693053170:train.norm.df[,c(2,3,4,5)] <- predict( norm.values, train.df[,c(2,3,4,5)] )
1671693053604:valid.norm.df[,c(2,3,4,5)] <- predict( norm.values, valid.df[,c(2,3,4,5)] )
1671693054271:dust.norm.df[,c(2,3,4,5)] <- predict( norm.values, dust.df[,c(2,3,4,5)] )
1671693055258:new.norm.df<- predict(norm.values[,5],new.df)
1671693061206:new.norm.df<- predict(norm.values,new.df)
1671693135152:norm.values <- preProcess(train.df[,2:5], method=c("center","scale"))
1671693135833:train.norm.df[,2:5] <- predict( norm.values, train.df[,2:5] )
1671693136298:valid.norm.df[,2:5] <- predict( norm.values, valid.df[,2:5] )
1671693137071:dust.norm.df[,2:5] <- predict( norm.values, dust.df[,2:5] )
1671693138085:new.norm.df<- predict(norm.values,new.df)
1671693146091:new.norm.df<- predict(norm.values[,2:5],new.df)
1671693167008:new.norm.df<- predict(norm.values,new.df)
1671693194643:norm.values <- preProcess(train.df[,2:10], method=c("center","scale"))
1671693200402:norm.values <- preProcess(train.df[,2:5], method=c("center","scale"))
1671693236275:new.norm.df<- predict(norm.values,new.df)
1671693449872:new.norm.df<- predict(norm.values,new.df)
1671693575561:new.df <- data.frame(District='강남구', Finedust = 35)
1671693576827:#partitioning for training and validation
1671693576828:set.seed(1)
1671693577187:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671693577533:train.df <- dust.df[train.index,]
1671693577984:valid.df <- dust.df[-train.index,]
1671693578474:View(dust2.df)
1671693579885:#정규화
1671693579885:train.norm.df <- train.df
1671693580276:valid.norm.df <- valid.df
1671693580896:dust.norm.df <- dust.df
1671693581338:new.norm.df <- new.df
1671693581850:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671693581850:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671693582367:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671693582690:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671693583135:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671693586466:new.norm.df<- predict(norm.values,new.df)
1671693587210:#다중 선형 회구 모델 with training set
1671693587210:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671693587559:options(scipen=999)
1671693587852:summary(Finedust.lm)
1671693588120:# validation set for accuracy
1671693588121:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671693588403:options(scipen=999, digits=0)
1671693589205:#check the residuals
1671693589205:some.residuals <- valid.norm.df$Finedust[1:5]
1671693589757:Finedust.lm.pred[1:5]
1671693590001:#df for residuals
1671693590001:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671693590204:options(scipen =999, digits=3)
1671693590642:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671693590912:#train set for accuaray
1671693590913:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671693591102:options(scipen=999, digits = 0)
1671693591365:# check the residuals
1671693591365:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671693591603:# df for residuals
1671693591604:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671693591799:options(scipen =999, digits = 3)
1671693592036:# check the accuracy
1671693592036:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671693592425:#  show all residuals with visualization
1671693592425:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671693592842:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671693593280:# 산점도 그래프로 나타내기
1671693593280:plot(Finedust.lm.pred.train)
1671693595244:#new data test
1671693595245:new.pred <- predict(Finedust.lm, new.norm.df)
1671694258172:#결측치 확인
1671694258191:table(is.na(No2.df$no2))
1671694264171:sum(is.na(No2.df$no2))
1671694275240:#이상치 처리
1671694275241:No2.df$no2 <- ifelse(No2.df$no2<10, NA, no2.df$no2)
1671694297393:#이상치 처리
1671694297394:No2.df$no2 <- ifelse(No2.df$no2<10, NA, No2.df$no2)
1671694306116:No2.df <- rename(dust2.df,
1671694306117:no2 = NO2.ppm)
1671694310173:dust.df <- rename(dust.df,
1671694310175:Finedust =FineDust.PM )
1671694326636:View(No2.df)
1671694340651:table(is.na(no2_clean$no2))
1671694346505:#이상치 처리
1671694346505:No2.df$no2 <- ifelse(No2.df$no2<10, NA, No2.df$no2)
1671694363911:View(No2.df$no2)
1671694391242:No2.df <- rename(No2.df,
1671694391244:no2 = NO2.ppm)
1671694401431:No2.df <- read.csv("SeoulNo2.csv")
1671694479674:library("dplyr")
1671694485794:library(dplyr)
1671694488504:No2.df <- rename(No2.df,
1671694488505:no2 = NO2.ppm)
1671694492642:#결측치 확인
1671694492644:table(is.na(No2.df$no2))
1671694493707:sum(is.na(No2.df$no2))
1671694495333:#결측치 처리
1671694495334:no2_clean <- No2.df%>%filter(!is.na(no2))
1671694496880:table(is.na(no2_clean$no2))
1671694498342:#이상치 처리
1671694498342:No2.df$no2 <- ifelse(No2.df$no2<10, NA, No2.df$no2)
1671694499402:View(No2.df$no2)
1671694508707:table(is.na(No2.df$no2))
1671694513715:no2_clean <- No2.df%>%filter(!is.na(no2))
1671694514682:table(is.na(no2_clean$no2))
1671694516346:View(No2.df)
1671694533824:View(No2.df)
1671694564084:No2.df$no2 <- ifelse(No2.df$no2<10, NA, No2.df$no2)
1671694565865:table(is.na(No2.df$no2))
1671694578242:#이상치 처리
1671694578243:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671694579759:table(is.na(dust.df$Finedust))
1671694582084:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671694583290:table(is.na(Finedust_clean$Finedust))
1671694592029:No2.df$no2 <- ifelse(No2.df$no2<10, NA, No2.df$no2)
1671694592869:table(is.na(No2.df$no2))
1671694612799:No2.df <- read.csv("SeoulNo2.csv")
1671694614304:No2.df <- rename(No2.df,
1671694614305:no2 = NO2.ppm)
1671694617061:View(No2.df)
1671694757688:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671694759018:table(is.na(No2.df$no2))
1671694761370:no2_clean <- No2.df%>%filter(!is.na(no2))
1671694762418:table(is.na(no2_clean$no2))
1671694807211:No2.df$no2 <- ifelse(No2.df$no2<0.06, NA, No2.df$no2)
1671694808655:table(is.na(No2.df$no2))
1671694815304:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671694816497:table(is.na(No2.df$no2))
1671694824306:No2.df$no2 <- ifelse(No2.df$no2<0.001, NA, No2.df$no2)
1671694825308:table(is.na(No2.df$no2))
1671694836155:no2_clean <- No2.df%>%filter(!is.na(no2))
1671694836545:table(is.na(no2_clean$no2))
1671694851890:View(No2.df)
1671694875294:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671694875834:table(is.na(No2.df$no2))
1671694951749:#날씨 예측
1671694951751:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671695015684:#partitioning for training and validation
1671695015686:set.seed(1)
1671695016843:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671695017293:train.df <- No2.df[train.index,]
1671695017724:valid.df <- No2.df[-train.index,]
1671695018594:#정규화
1671695018594:train.norm.df <- train.df
1671695019043:valid.norm.df <- valid.df
1671695019556:No2.norm.df <- No2.df
1671695020470:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671695020981:train.norm.df[,1:3] <- predict( norm.values, train.df[,1:3] )
1671695021534:valid.norm.df[,1:3] <- predict( norm.values, valid.df[,1:3] )
1671695021941:dust.norm.df[,1:3] <- predict( norm.values, dust.df[,1:3] )
1671695023075:#다중 선형 회구 모델 with training set
1671695023075:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671695042354:#다중 선형 회구 모델 with training set
1671695042354:No2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695043605:options(scipen=999)
1671695044080:summary(Finedust.lm)
1671695056879:# validation set for accuracy
1671695056880:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671695065669:#다중 선형 회구 모델 with training set
1671695065670:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695067246:options(scipen=999)
1671695067694:summary(Finedust.lm)
1671695069206:# validation set for accuracy
1671695069206:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671695093976:#정규화
1671695093978:train.norm.df <- train.df
1671695094666:valid.norm.df <- valid.df
1671695095014:No2.norm.df <- No2.df
1671695095341:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671695095554:train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671695095814:valid.norm.df[,1:4] <- predict( norm.values, valid.df[,1:4] )
1671695096087:dust.norm.df[,1:4] <- predict( norm.values, dust.df[,1:4] )
1671695096649:#다중 선형 회구 모델 with training set
1671695096650:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695097217:options(scipen=999)
1671695097717:summary(Finedust.lm)
1671695098385:# validation set for accuracy
1671695098386:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671695542234:#check the residuals
1671695542235:some.residuals <- valid.norm.df$no2[1:5]
1671695548867:#다중 선형 회구 모델 with training set
1671695548867:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695574537:no2.norm.df[,1:4] <- predict( norm.values, no2.df[,1:4] )
1671695581859:no2.norm.df[,1:4] <- predict( norm.values, No2.df[,1:4] )
1671695586582:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671695589167:train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671695589750:valid.norm.df[,1:4] <- predict( norm.values, valid.df[,1:4] )
1671695591785:no2.norm.df[,1:4] <- predict( norm.values, No2.df[,1:4] )
1671695601378:no2.norm.df <- No2.df
1671695603265:no2.norm.df[,1:4] <- predict( norm.values, No2.df[,1:4] )
1671695604531:#다중 선형 회구 모델 with training set
1671695604532:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695606071:options(scipen=999)
1671695606217:summary(Finedust.lm)
1671695608083:# validation set for accuracy
1671695608083:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671695717529:#다중 선형 회구 모델 with training set
1671695717530:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695723899:# validation set for accuracy
1671695723899:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671695736358:# validation set for accuracy
1671695736359:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671695756734:View(No2.df)
1671695786284:install.packages("foreign")
1671695790552:install.packages("caret")
1671695793967:library(foreign)
1671695805161:library(foreign)
1671695806689:library(dplyr)
1671695809191:library(ggplot2)
1671695809884:library(readxl)
1671695810859:library(caret)
1671695822049:dust2.df <-read.csv("SeoulFineDust2.csv")
1671695825354:dust.df <- read.csv("SeoulFineDust.csv")
1671695827374:age.df <- read.csv("age.csv")
1671695828018:No2.df <- read.csv("SeoulNo2.csv")
1671695832276:dust.df <- rename(dust.df,
1671695832277:Finedust =FineDust.PM )
1671695837495:No2.df <- rename(No2.df,
1671695837496:no2 = NO2.ppm)
1671695843216:Finedustcitydate <- dust.df %>%
1671695843217:filter(District=="강남구")%>%
1671695843217:filter(Date=='1')%>%
1671695843217:arrange(desc(Finedust))
1671695846891:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671695848170:#미세먼지가 심한 날짜
1671695848170:FinedustDate <- dust.df %>%
1671695848170:filter(Date=="1")%>%
1671695848170:arrange(desc(Finedust))
1671695853323:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671695854700:table(dust.df$Finedust)
1671695855514:#결측치 확인
1671695855514:table(is.na(dust.df$Finedust))
1671695856040:sum(is.na(dust.df$Finedust))
1671695856504:#결측치 처리
1671695856505:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671695857154:table(is.na(Finedust_clean$Finedust))
1671695857560:#이상치 처리
1671695857560:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671695858268:table(is.na(dust.df$Finedust))
1671695858870:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671695859412:table(is.na(Finedust_clean$Finedust))
1671695859963:View(dust.df)
1671695861257:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671695861704:new.df <- data.frame(District='강남구', Finedust = 35)
1671695862176:#partitioning for training and validation
1671695862177:set.seed(1)
1671695865797:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671695866418:train.df <- dust.df[train.index,]
1671695866908:valid.df <- dust.df[-train.index,]
1671695867469:View(dust2.df)
1671695869619:#정규화
1671695869619:train.norm.df <- train.df
1671695870104:valid.norm.df <- valid.df
1671695870515:dust.norm.df <- dust.df
1671695870857:new.norm.df <- new.df
1671695871211:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671695871212:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671695871629:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671695872040:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671695872403:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671695872893:norm.values <- preProcess(train.df[,2:5], method=c("center","scale"))
1671695873262:train.norm.df[,2:5] <- predict( norm.values, train.df[,2:5] )
1671695873643:valid.norm.df[,2:5] <- predict( norm.values, valid.df[,2:5] )
1671695874052:dust.norm.df[,2:5] <- predict( norm.values, dust.df[,2:5] )
1671695874404:new.norm.df<- predict(norm.values,new.df)
1671695879281:#다중 선형 회구 모델 with training set
1671695879281:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671695879935:options(scipen=999)
1671695880365:summary(Finedust.lm)
1671695881126:# validation set for accuracy
1671695881126:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671695881691:options(scipen=999, digits=0)
1671695882163:#check the residuals
1671695882164:some.residuals <- valid.norm.df$Finedust[1:5]
1671695885111:Finedust.lm.pred[1:5]
1671695894251:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671695894253:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671695894695:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671695895028:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671695895529:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671695896107:new.norm.df<- predict(norm.values,new.df)
1671695896635:#다중 선형 회구 모델 with training set
1671695896636:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671695897072:options(scipen=999)
1671695897478:summary(Finedust.lm)
1671695898278:# validation set for accuracy
1671695898278:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671695898819:options(scipen=999, digits=0)
1671695899282:#check the residuals
1671695899283:some.residuals <- valid.norm.df$Finedust[1:5]
1671695899837:Finedust.lm.pred[1:5]
1671695901521:#df for residuals
1671695901521:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671695906530:options(scipen =999, digits=3)
1671695907124:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671695908218:#train set for accuaracy
1671695908219:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671695908789:options(scipen=999, digits = 0)
1671695909512:# check the residuals
1671695909512:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671695910037:# df for residuals
1671695910037:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671695913217:options(scipen =999, digits = 3)
1671695913726:# check the accuracy
1671695913726:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671695915113:#  show all residuals with visualization
1671695915113:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671695915636:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671695916058:# 산점도 그래프로 나타내기
1671695916058:plot(Finedust.lm.pred.train)
1671695917577:#new data test
1671695917578:new.pred <- predict(Finedust.lm, new.norm.df)
1671695917789:options(scipen=999, digits=0)
1671695919476:new.pred
1671695919992:View(No2.df)
1671695922254:table(No2.df$no2)
1671695922830:#결측치 확인
1671695922830:table(is.na(No2.df$no2))
1671695923653:sum(is.na(No2.df$no2))
1671695924193:#결측치 처리
1671695924194:no2_clean <- No2.df%>%filter(!is.na(no2))
1671695924668:table(is.na(no2_clean$no2))
1671695925181:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671695925699:table(is.na(No2.df$no2))
1671695926181:no2_clean <- No2.df%>%filter(!is.na(no2))
1671695926593:table(is.na(no2_clean$no2))
1671695927311:View(No2.df)
1671695929002:#날씨 예측
1671695929002:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671695940173:#partitioning for training and validation
1671695940174:set.seed(1)
1671695940845:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671695941588:train.df <- No2.df[train.index,]
1671695942207:valid.df <- No2.df[-train.index,]
1671695942804:#정규화
1671695942804:train.norm.df <- train.df
1671695943318:valid.norm.df <- valid.df
1671695943831:no2.norm.df <- No2.df
1671695945246:norm.values <- preProcess( train.df[,1:4], method=c("center"))
1671695945957:train.norm.df[,1:4] <- predict( norm.values, train.df[,1:4] )
1671695947255:valid.norm.df[,1:4] <- predict( norm.values, valid.df[,1:4] )
1671695947638:no2.norm.df[,1:4] <- predict( norm.values, No2.df[,1:4] )
1671695948087:#다중 선형 회구 모델 with training set
1671695948088:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671695948897:options(scipen=999)
1671695952122:summary(Finedust.lm)
1671695954596:# validation set for accuracy
1671695954597:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671696029981:# validation set for accuracy
1671696029982:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671696085808:#정규화
1671696085809:train.norm.df <- train.df
1671696086394:valid.norm.df <- valid.df
1671696086635:no2.norm.df <- No2.df
1671696086874:norm.values <- preProcess( train.df[,c(4,5)], method=c("center"))
1671696087139:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671696087422:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671696087812:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671696089175:#다중 선형 회구 모델 with training set
1671696089175:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671696091591:options(scipen=999)
1671696092113:summary(Finedust.lm)
1671696101887:summary(no2.lm)
1671696110316:# validation set for accuracy
1671696110317:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671696123093:options(scipen=999, digits=0)
1671696125383:#check the residuals
1671696125384:some.residuals <- valid.norm.df$no2[1:5]
1671696126155:no2[1:5]
1671696168649:#다중 선형 회구 모델 with training set
1671696168650:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671696197389:#check the residuals
1671696197391:some.residuals <- valid.norm.df$no2[1:5]
1671696211287:#df for residuals
1671696211287:data.frame("Predicted" = no2.lm.pred[1:5], "Actual"= valid.norm.df$no2[1:5], "Residual" = some.residuals)
1671696214913:options(scipen =999, digits=3)
1671696233736:#train set for accuaray
1671696233737:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671696237261:options(scipen=999, digits = 0)
1671696250416:# check the residuals
1671696250416:some.residuals <- train.norm.df$no2[1:5] - no2.lm.pred.train[1:5]
1671696264623:# df for residuals
1671696264623:data.frame("Predicted" = no2.lm.pred.train[1:5], "Acutal" = train.norm.df$no2[1:5], "Residual" = some.residuals)
1671696267335:options(scipen =999, digits = 3)
1671696282444:# check the accuracy
1671696282444:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671696296117:# // show all residuals with visualization
1671696296118:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671696298390:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671696300481:plot(Finedust.lm.pred.train)
1671696342842:install.packages("foreign")
1671696348753:install.packages("caret")
1671696350825:library(foreign)
1671696350940:library(dplyr)
1671696394531:install.packages("dplyr")
1671696397785:install.packages("dplyr")
1671696402066:install.packages("dplyr")
1671696404269:library(dplyr)
1671696408652:library(ggplot2)
1671696437109:install.packages("ggplot2")
1671696439741:install.packages("ggplot2")
1671696450590:dust.df <- read.csv("SeoulFineDust.csv")
1671696451504:age.df <- read.csv("age.csv")
1671696452235:No2.df <- read.csv("SeoulNo2.csv")
1671696456017:dust.df <- rename(dust.df,
1671696456018:Finedust =FineDust.PM )
1671696464354:library(caret)
1671696532432:library(dplyr)
1671696533133:library(forecast)
1671696533886:library(caret)
1671696535301:library(ggplot2)
1671696538355:library(dplyr)
1671696542172:dust.df <- rename(dust.df,
1671696542173:Finedust =FineDust.PM )
1671696542990:No2.df <- rename(No2.df,
1671696542991:no2 = NO2.ppm)
1671696544909:str(dust.df)
1671696545568:Finedustcitydate <- dust.df %>%
1671696545569:filter(District=="강남구")%>%
1671696545569:filter(Date=='1')%>%
1671696545569:arrange(desc(Finedust))
1671696546375:View(Finedustcitydate)
1671696547547:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671696548806:#미세먼지가 심한 날짜
1671696548806:FinedustDate <- dust.df %>%
1671696548806:filter(Date=="1")%>%
1671696548806:arrange(desc(Finedust))
1671696548810:View(FinedustDate)
1671696551685:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671696555816:table(dust.df$Finedust)
1671696556561:#결측치 확인
1671696556562:table(is.na(dust.df$Finedust))
1671696557280:sum(is.na(dust.df$Finedust))
1671696557763:#결측치 처리
1671696557763:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671696558062:table(is.na(Finedust_clean$Finedust))
1671696558475:#이상치 처리
1671696558476:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671696558843:table(is.na(dust.df$Finedust))
1671696559274:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671696559799:table(is.na(Finedust_clean$Finedust))
1671696560536:View(dust.df)
1671696561796:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671696562779:new.df <- data.frame(District='강남구', Finedust = 35)
1671696563243:#partitioning for training and validation
1671696563244:set.seed(1)
1671696563754:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671696564375:train.df <- dust.df[train.index,]
1671696564841:valid.df <- dust.df[-train.index,]
1671696565254:View(dust2.df)
1671696566709:#정규화
1671696566709:train.norm.df <- train.df
1671696567288:valid.norm.df <- valid.df
1671696567722:dust.norm.df <- dust.df
1671696568155:new.norm.df <- new.df
1671696568536:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671696568537:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671696569122:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671696569577:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671696569984:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671696570408:new.norm.df<- predict(norm.values,new.df)
1671696570819:#다중 선형 회구 모델 with training set
1671696570819:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671696571274:options(scipen=999)
1671696571730:summary(Finedust.lm)
1671696572685:# validation set for accuracy
1671696572685:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671696573301:options(scipen=999, digits=0)
1671696573816:#check the residuals
1671696573816:some.residuals <- valid.norm.df$Finedust[3:5]
1671696574312:Finedust.lm.pred[3:5]
1671696587525:#check the residuals
1671696587526:some.residuals <- valid.norm.df$Finedust[2:5]
1671696590204:# validation set for accuracy
1671696590204:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671696591633:options(scipen=999, digits=0)
1671696592357:#check the residuals
1671696592357:some.residuals <- valid.norm.df$Finedust[2:5]
1671696597496:summary(Finedust.lm)
1671696599311:# validation set for accuracy
1671696599311:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671696599892:options(scipen=999, digits=0)
1671696600431:#check the residuals
1671696600432:some.residuals <- valid.norm.df$Finedust[2:5]
1671696607131:#df for residuals
1671696607133:data.frame("Predicted" = Finedust.lm.pred[2:5], "Actual"= valid.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671696614418:options(scipen =999, digits=3)
1671696615249:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671696618235:#train set for accuaracy
1671696618236:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671696618976:options(scipen=999, digits = 0)
1671696619451:# check the residuals
1671696619451:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671696643553:# df for residuals
1671696643554:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671696648416:# df for residuals
1671696648417:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671696651570:# check the residuals
1671696651571:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671696652177:# df for residuals
1671696652177:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671696661493:# check the residuals
1671696661493:some.residuals <- train.norm.df$Finedust[2:5] - Finedust.lm.pred.train[2:5]
1671696668833:# df for residuals
1671696668833:data.frame("Predicted" = Finedust.lm.pred.train[2:5], "Acutal" = train.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671696691918:# check the residuals
1671696691918:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671696692514:# df for residuals
1671696692514:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671696693968:options(scipen =999, digits = 3)
1671696709515:# check the residuals
1671696709516:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671696710205:# df for residuals
1671696710205:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671696712979:options(scipen =999, digits = 3)
1671696737816:#  show all residuals with visualization
1671696737819:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671696738499:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671696746245:# 산점도 그래프로 나타내기
1671696746245:plot(Finedust.lm.pred.train)
1671696747112:#new data test
1671696747112:new.pred <- predict(Finedust.lm, new.norm.df)
1671696748077:options(scipen=999, digits=0)
1671707801089:Finedustcitydate <- dust.df %>%
1671707801094:filter(District=="강남구")%>%
1671707801094:filter(Date=='1')%>%
1671707801094:arrange(desc(Finedust))
1671707802914:View(Finedustcitydate)
1671707806928:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671708130234:read.csv("~.csv",fileEncoding = "euc-kr")
1671708142496:dust.df <- read.csv("SeoulFineDust.csv")
1671708143465:read.csv("~.csv",fileEncoding = "euc-kr")
1671708224201:Sys.setlocale(category="LC_CYTPE", locale="ko_KR.UTF-8")
1671708259420:par(family="AppleGothic")
1671708265620:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671708275534:install.packages("dplyr")
1671708280731:install.packages("dplyr")
1671708284265:install.packages("dplyr")
1671708312544:install.packages("dplyr")
1671708315563:install.packages("dplyr")
1671708319834:install.pacakges("forecast")
1671708321747:install.packages("caret")
1671708326748:install.packages("ggplot2")
1671708335008:install.packages("ggplot2")
1671708339396:install.packages("ggplot2")
1671708342083:install.packages("ggplot2")
1671708344876:install.packages("ggplot2")
1671708346297:install.packages("ggplot2")
1671708353841:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671708359493:library(ggplot2)
1671708365887:library("ggplot2")
1671708369892:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671708376140:dust.df <- read.csv("SeoulFineDust.csv")
1671708377112:No2.df <- read.csv("SeoulNo2.csv")
1671708379171:dust.df <- rename(dust.df,
1671708379172:Finedust =FineDust.PM )
1671708391680:No2.df <- rename(No2.df,
1671708391680:no2 = NO2.ppm)
1671708396201:Finedustcitydate <- dust.df %>%
1671708396202:filter(District=="강남구")%>%
1671708396202:filter(Date=='1')%>%
1671708396202:arrange(desc(Finedust))
1671708399003:View(Finedustcitydate)
1671708406456:Finedustcitydate <- dust.df %>%
1671708406458:filter(District=="강남구")%>%
1671708406458:filter(Date=='1')%>%
1671708406458:arrange(desc(Finedust))
1671708425685:install.packages("dplyr")
1671708430164:install.packages("dplyr")
1671708440689:install.packages("ggplot2")
1671708444321:install.packages("ggplot2")
1671708449307:library(dplyr)
1671708454228:library(dplyr)
1671708456422:library("ggplot2")
1671708463881:library(ggplot2)
1671708466271:dust.df <- read.csv("SeoulFineDust.csv")
1671708466868:No2.df <- read.csv("SeoulNo2.csv")
1671708469137:dust.df <- rename(dust.df,
1671708469138:Finedust =FineDust.PM )
1671708470507:No2.df <- rename(No2.df,
1671708470508:no2 = NO2.ppm)
1671708473073:Finedustcitydate <- dust.df %>%
1671708473074:filter(District=="강남구")%>%
1671708473074:filter(Date=='1')%>%
1671708473074:arrange(desc(Finedust))
1671708478119:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671708517471:par(family="AppleGothic")
1671708520166:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671708576929:par(family="AppleGothic")
1671708581335:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671708627384:par(family="AppleGothic")
1671708631613:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671708689742:install.packages("extrafont")
1671708699675:library(extrafont)
1671708713610:font_import()
1671708762770:font_import()
1671708792821:font_import()
1671708797508:font_import()
1671708819007:theme_set(theme_grey(base_family='NanumGothic'))
1671708823323:ggplot(data = dust.df, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671708842920:head(5)
1671708857495:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671708939631:ggplot() +
1671708939631:geom_point(mapping=aes(x=District, y=Finedust, size=class), data=mpg)
1671708972343:View(No2.df)
1671708978867:View(dust.df)
1671709005668:View(No2.df)
1671709210197:ggplot() +
1671709210198:geom_point(mapping=aes(x=District, y=Finedust, size=class), data=dust.df)
1671709455776:Finedustcitydate <- dust.df %>%
1671709455778:filter(District=="강남구")%>%
1671709455778:filter(Date=='1')%>%
1671709455778:arrange(desc(Finedust))
1671709456325:View(Finedustcitydate)
1671709631867:Finedust <- dust.df %>%
1671709631869:filter(Month='3') %>%
1671709631870:filter(Year='2020') %>%
1671709631870:head(5)
1671709639783:Finedust <- dust.df %>%
1671709639784:filter(Month=='3') %>%
1671709639784:filter(Year='2020') %>%
1671709639784:head(5)
1671709645316:Finedust <- dust.df %>%
1671709645316:filter(Month=='3') %>%
1671709645316:filter(Year=='2020') %>%
1671709645317:head(5)
1671709662916:Finedust_2020_3 <- dust.df %>%
1671709662917:filter(Month=='3') %>%
1671709662917:filter(Year=='2020') %>%
1671709662917:head(5)
1671709668103:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671709731395:#2020년 3월 중 미세먼지가 심한 날짜
1671709731396:FinedustDate <- dust.df %>%
1671709731396:filter(Month=="3")%>%
1671709731397:filter(Year=='2020')%>%
1671709731397:arrange(desc(Finedust))
1671709731947:View(FinedustDate)
1671710145726:Finedust_2020_3_date <- dust.df %>%
1671710145728:grop_by(Finedust,Date)%>%
1671710145728:dplyr::summarise(Time = sum(time))
1671710153158:Finedust_2020_3_date <- dust.df %>%
1671710153159:group_by(Finedust,Date)%>%
1671710153159:dplyr::summarise(Time = sum(time))
1671711119883:table
1671711130028:library(dplyr)
1671711135613:table(dust.df$Finedust)
1671711137194:#결측치 확인
1671711137194:table(is.na(dust.df$Finedust))
1671711138211:sum(is.na(dust.df$Finedust))
1671711138983:#결측치 처리
1671711138984:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671711139350:table(is.na(Finedust_clean$Finedust))
1671711140024:#이상치 처리
1671711140025:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671711140773:table(is.na(dust.df$Finedust))
1671711141486:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671711142788:table(is.na(Finedust_clean$Finedust))
1671711143310:View(dust.df)
1671711152274:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671711156968:new.df <- data.frame(District='강남구', Finedust = 35)
1671711157992:#partitioning for training and validation
1671711157993:set.seed(1)
1671711158559:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671711158930:train.df <- dust.df[train.index,]
1671711159409:valid.df <- dust.df[-train.index,]
1671711160219:View(dust2.df)
1671711166184:#정규화
1671711166184:train.norm.df <- train.df
1671711167218:valid.norm.df <- valid.df
1671711168219:dust.norm.df <- dust.df
1671711168994:new.norm.df <- new.df
1671711169883:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671711169883:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671711181393:library(caret)
1671711187058:install.packages("caret")
1671711193515:install.packages("caret")
1671711206193:library(caret)
1671711211344:library(ggplot2)
1671711212672:library(ggplot2)
1671711214647:library(caret)
1671711221282:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671711221283:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671711222936:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671711224105:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671711224781:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671711227272:new.norm.df<- predict(norm.values,new.df)
1671711228047:#다중 선형 회구 모델 with training set
1671711228048:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671711229145:options(scipen=999)
1671711229851:summary(Finedust.lm)
1671711402151:# validation set for accuracy
1671711402153:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671711403081:options(scipen=999, digits=0)
1671711404514:#check the residuals
1671711404515:some.residuals <- valid.norm.df$Finedust[2:5]
1671711407464:Finedust.lm.pred[2:5]
1671711570793:#df for residuals
1671711570794:data.frame("Predicted" = Finedust.lm.pred[2:5], "Actual"= valid.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711585841:options(scipen =999, digits=3)
1671711587558:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671711638674:#train set for accuaracy
1671711638676:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671711640465:options(scipen=999, digits = 0)
1671711641309:# check the residuals
1671711641310:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671711646635:# df for residuals
1671711646635:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671711657946:options(scipen =999, digits = 3)
1671711658194:# check the accuracy
1671711658194:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671711790270:options(scipen=999, digits=0)
1671711790690:#check the residuals
1671711790690:some.residuals <- valid.norm.df$Finedust[2:5]
1671711791083:Finedust.lm.pred[2:5]
1671711792032:#df for residuals
1671711792033:data.frame("Predicted" = Finedust.lm.pred[2:5], "Actual"= valid.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711793156:options(scipen =999, digits=2)
1671711793597:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671711802136:#train set for accuaracy
1671711802137:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671711802661:options(scipen=999, digits = 0)
1671711803239:# check the residuals
1671711803240:some.residuals <- train.norm.df$Finedust[2:5] - Finedust.lm.pred.train[2:5]
1671711804173:# df for residuals
1671711804173:data.frame("Predicted" = Finedust.lm.pred.train[2:5], "Acutal" = train.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711806797:options(scipen =999, digits = 2)
1671711807610:# check the accuracy
1671711807610:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671711827734:#train set for accuaracy
1671711827735:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671711828179:options(scipen=999, digits = 2)
1671711828800:# check the residuals
1671711828800:some.residuals <- train.norm.df$Finedust[2:5] - Finedust.lm.pred.train[2:5]
1671711829482:# df for residuals
1671711829482:data.frame("Predicted" = Finedust.lm.pred.train[2:5], "Acutal" = train.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711833107:options(scipen =999, digits = 2)
1671711833988:# check the accuracy
1671711833988:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671711841515:options(scipen=999, digits=2)
1671711843924:# validation set for accuracy
1671711843924:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671711844263:options(scipen=999, digits=2)
1671711844792:#check the residuals
1671711844793:some.residuals <- valid.norm.df$Finedust[2:5]
1671711845671:Finedust.lm.pred[2:5]
1671711847394:#df for residuals
1671711847394:data.frame("Predicted" = Finedust.lm.pred[2:5], "Actual"= valid.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711850661:options(scipen =999, digits=2)
1671711852170:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671711873937:#train set for accuaracy
1671711873938:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671711875193:options(scipen=999, digits = 2)
1671711876905:# check the residuals
1671711876906:some.residuals <- train.norm.df$Finedust[2:5] - Finedust.lm.pred.train[2:5]
1671711877604:# df for residuals
1671711877604:data.frame("Predicted" = Finedust.lm.pred.train[2:5], "Acutal" = train.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671711878849:options(scipen =999, digits = 2)
1671711879775:# check the accuracy
1671711879775:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671711954451:#다중 선형 회구 모델 with training set
1671711954453:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671711954781:options(scipen=999)
1671711955192:summary(Finedust.lm)
1671711955512:# validation set for accuracy
1671711955512:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671711956655:options(scipen=999, digits=2)
1671711957344:#check the residuals
1671711957344:some.residuals <- valid.norm.df$Finedust[4:5]
1671711957877:Finedust.lm.pred[4:5]
1671711958308:#df for residuals
1671711958308:data.frame("Predicted" = Finedust.lm.pred[4:5], "Actual"= valid.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671711960456:options(scipen =999, digits=4)
1671711961581:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671711964613:#train set for accuaracy
1671711964614:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671711965506:options(scipen=999, digits = 4)
1671711966624:# check the residuals
1671711966625:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671711967279:# df for residuals
1671711967280:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671711970906:options(scipen =999, digits = 4)
1671711972065:# check the accuracy
1671711972066:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671711977459:#  show all residuals with visualization
1671711977460:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671711978458:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671711979120:# 산점도 그래프로 나타내기
1671711979120:plot(Finedust.lm.pred.train)
1671711984658:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671711987600:# check the accuracy
1671711987601:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671712018407:# validation set for accuracy
1671712018409:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671712018798:options(scipen=999, digits=4)
1671712019555:#check the residuals
1671712019555:some.residuals <- valid.norm.df$Finedust[4:5]
1671712020134:Finedust.lm.pred[4:5]
1671712020692:#df for residuals
1671712020693:data.frame("Predicted" = Finedust.lm.pred[4:5], "Actual"= valid.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671712021784:options(scipen =999, digits=4)
1671712022283:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671712024510:#train set for accuaracy
1671712024510:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671712024907:options(scipen=999, digits = 4)
1671712025255:# check the residuals
1671712025255:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671712025619:# df for residuals
1671712025620:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671712025892:options(scipen =999, digits = 4)
1671712026896:# check the accuracy
1671712026896:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671712034915:#  show all residuals with visualization
1671712034916:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671712035685:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671712192248:Finedust_2020_3 <- dust.df %>%
1671712192250:filter(Month=='3') %>%
1671712192250:filter(Year=='2020') %>%
1671712192250:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712192251:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712197975:Finedust_2020_3 <- dust.df %>%
1671712197976:filter(Month=='3') %>%
1671712197976:filter(Year=='2020')
1671712206541:Finedust_2020_3 <- dust.df %>%
1671712206543:filter(Month=='3') %>%
1671712206543:filter(Year=='2020') %>%
1671712206543:head(5)
1671712212274:#2020년 3월 중 미세먼지가 심한 날짜
1671712212274:FinedustDate <- dust.df %>%
1671712212274:filter(Month=="3")%>%
1671712212274:filter(Year=='2020')%>%
1671712212274:arrange(desc(Finedust))
1671712227860:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671712244713:Finedust_2020_3 <- dust.df %>%
1671712244715:filter(Month=='3') %>%
1671712244715:filter(Year=='2020')
1671712246670:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712246670:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712252225:library(dplyr)
1671712255560:install.packages("dplyr")
1671712261200:install.packages("dplyr")
1671712265189:install.packages("dplyr")
1671712268561:install.packages("dplyr")
1671712271313:library(dplyr)
1671712272918:library(forecast)
1671712275415:theme_set(theme_grey(base_family='NanumGothic'))
1671712278829:font_import()
1671712282514:library(dplyr)
1671712284479:install.packages("extrafont")
1671712290049:font_import()
1671712291516:theme_set(theme_grey(base_family='NanumGothic'))
1671712294193:install.packages("extrafont")
1671712298839:font_import()
1671712307149:theme_set(theme_grey(base_family='NanumGothic'))
1671712314533:library(extrafont)
1671712318077:font_import()
1671712322425:theme_set(theme_grey(base_family='NanumGothic'))
1671712325932:theme_set(theme_grey(base_family='NanumGothic'))
1671712327978:library(extrafont)
1671712329141:font_import()
1671712342987:theme_set(theme_grey(base_family='NanumGothic'))
1671712348572:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712348573:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712352335:Finedust_2020_3 <- dust.df %>%
1671712352336:filter(Month=='3') %>%
1671712352336:filter(Year=='2020')
1671712355644:library(ggplot2)
1671712366034:library("ggplot2")
1671712371504:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671712376161:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712376162:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712388418:Finedust_2020_3 <- dust.df %>%
1671712388420:filter(Month=='3') %>%
1671712388420:filter(Year=='2020') %>%
1671712388420:head(5)
1671712398222:Finedust_2020_3 <- dust.df %>%
1671712398223:filter(Month=='3') %>%
1671712398223:filter(Year=='2020') %>%
1671712398223:head(5)
1671712399201:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712399201:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712437366:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712437367:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712443619:par(family="AppleGothic")
1671712445756:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712445757:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712449984:dust.df <- rename(dust.df,
1671712449985:Finedust =FineDust.PM )
1671712450431:No2.df <- rename(No2.df,
1671712450432:no2 = NO2.ppm)
1671712601705:# // show all residuals with visualization
1671712601708:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671712603404:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671712636896:install.packages("dplyr")
1671712640375:install.packages("dplyr")
1671712642551:install.pacakges("forecast")
1671712647997:install.pacakges("forecast")
1671712651115:install.packages("caret")
1671712655218:install.packages("ggplot2")
1671712658034:install.packages("ggplot2")
1671712662426:install.pacakges("forecast")
1671712664632:install.packages("extrafont")
1671712666706:library(dplyr)
1671712671605:library(dplyr)
1671712674125:library(forecast)
1671712675677:library(caret)
1671712677014:library(ggplot2)
1671712678581:library(extrafont)
1671712681460:font_import()
1671712684076:dust.df <- read.csv("SeoulFineDust.csv")
1671712684991:No2.df <- read.csv("SeoulNo2.csv")
1671712686357:dust.df <- rename(dust.df,
1671712686357:Finedust =FineDust.PM )
1671712687181:No2.df <- rename(No2.df,
1671712687182:no2 = NO2.ppm)
1671712694448:par(family="AppleGothic")
1671712695404:Finedustcitydate <- dust.df %>%
1671712695405:filter(District=="강남구")%>%
1671712695405:filter(Date=='1')%>%
1671712695406:arrange(desc(Finedust))
1671712697702:View(Finedustcitydate)
1671712699223:Finedust_2020_3 <- dust.df %>%
1671712699223:filter(Month=='3') %>%
1671712699224:filter(Year=='2020') %>%
1671712699224:head(5)
1671712700825:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671712700826:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671712704158:#2020년 3월 중 미세먼지가 심한 날짜
1671712704159:FinedustDate <- dust.df %>%
1671712704159:filter(Month=="3")%>%
1671712704160:filter(Year=='2020')%>%
1671712704160:arrange(desc(Finedust))
1671712709019:View(FinedustDate)
1671712710563:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671712712691:Finedust_2020_3 <- dust.df %>%
1671712712692:filter(Month=='3') %>%
1671712712692:filter(Year=='2020') %>%
1671712712692:head(5)
1671712713634:View(Finedust_2020_3)
1671712715276:table(dust.df$Finedust)
1671712716328:#결측치 확인
1671712716329:table(is.na(dust.df$Finedust))
1671712716850:sum(is.na(dust.df$Finedust))
1671712717866:#결측치 처리
1671712717866:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671712718300:table(is.na(Finedust_clean$Finedust))
1671712718686:#이상치 처리
1671712718687:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671712719096:table(is.na(dust.df$Finedust))
1671712719353:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671712719825:table(is.na(Finedust_clean$Finedust))
1671712720228:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671712720584:new.df <- data.frame(District='강남구', Finedust = 35)
1671712720871:#partitioning for training and validation
1671712720872:set.seed(1)
1671712721361:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671712722316:train.df <- dust.df[train.index,]
1671712722735:valid.df <- dust.df[-train.index,]
1671712723847:#정규화
1671712723848:train.norm.df <- train.df
1671712724490:valid.norm.df <- valid.df
1671712724963:dust.norm.df <- dust.df
1671712725632:new.norm.df <- new.df
1671712726110:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671712726110:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671712726851:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671712727265:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671712727657:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671712728164:new.norm.df<- predict(norm.values,new.df)
1671712728651:#다중 선형 회구 모델 with training set
1671712728652:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671712729162:options(scipen=999)
1671712729483:summary(Finedust.lm)
1671712732498:# validation set for accuracy
1671712732498:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671712733021:options(scipen=999, digits=4)
1671712733487:#check the residuals
1671712733488:some.residuals <- valid.norm.df$Finedust[4:5]
1671712733861:Finedust.lm.pred[4:5]
1671712734671:#df for residuals
1671712734671:data.frame("Predicted" = Finedust.lm.pred[4:5], "Actual"= valid.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671712736733:options(scipen =999, digits=4)
1671712743558:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713008565:#train set for accuaracy
1671713008571:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713009136:options(scipen=999, digits = 4)
1671713009736:# check the residuals
1671713009736:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671713010204:# df for residuals
1671713010204:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671713010830:options(scipen =999, digits = 4)
1671713012422:# check the accuracy
1671713012423:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713139212:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671713139214:norm.values <- preProcess(train.df[,c(2,5)], method=c("center","scale"))
1671713139813:train.norm.df[,c(2,5)] <- predict( norm.values, train.df[,c(2,5)] )
1671713140182:valid.norm.df[,c(2,5)] <- predict( norm.values, valid.df[,c(2,5)] )
1671713140541:dust.norm.df[,c(2,5)] <- predict( norm.values, dust.df[,c(2,5)] )
1671713141017:new.norm.df<- predict(norm.values,new.df)
1671713220514:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671713220521:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671713221143:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671713221394:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671713221686:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671713222123:new.norm.df<- predict(norm.values,new.df)
1671713354464:options(scipen=999, digits=4)
1671713354800:#check the residuals
1671713354801:some.residuals <- valid.norm.df$Finedust[1:5]
1671713355062:Finedust.lm.pred[1:5]
1671713355358:#df for residuals
1671713355358:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713355640:options(scipen =999, digits=4)
1671713359155:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713369041:# validation set for accuracy
1671713369042:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713369621:options(scipen=999, digits=2)
1671713369891:#check the residuals
1671713369891:some.residuals <- valid.norm.df$Finedust[1:5]
1671713370123:Finedust.lm.pred[1:5]
1671713370379:#df for residuals
1671713370380:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713370632:options(scipen =999, digits=2)
1671713371335:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713396094:# validation set for accuracy
1671713396096:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713396546:options(scipen=999, digits=0)
1671713397269:#check the residuals
1671713397269:some.residuals <- valid.norm.df$Finedust[1:5]
1671713398102:Finedust.lm.pred[1:5]
1671713398545:#df for residuals
1671713398546:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713398877:options(scipen =999, digits=2)
1671713399273:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713399668:#train set for accuaracy
1671713399668:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713400656:options(scipen=999, digits = 4)
1671713401425:# check the residuals
1671713401425:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671713414960:# validation set for accuracy
1671713414961:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713415256:options(scipen=999, digits=0)
1671713415531:#check the residuals
1671713415532:some.residuals <- valid.norm.df$Finedust[1:5]
1671713415780:Finedust.lm.pred[1:5]
1671713416056:#df for residuals
1671713416056:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713416355:options(scipen =999, digits=3)
1671713422333:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713450977:# validation set for accuracy
1671713450979:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713451405:options(scipen=999, digits=3)
1671713453353:#check the residuals
1671713453354:some.residuals <- valid.norm.df$Finedust[1:5]
1671713453991:Finedust.lm.pred[1:5]
1671713455011:#df for residuals
1671713455012:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713456541:options(scipen =999, digits=0)
1671713457832:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713470277:# validation set for accuracy
1671713470278:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713470538:options(scipen=999, digits=3)
1671713471025:#check the residuals
1671713471025:some.residuals <- valid.norm.df$Finedust[1:5]
1671713471258:Finedust.lm.pred[1:5]
1671713471466:#df for residuals
1671713471467:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713472180:options(scipen =999, digits=2)
1671713472467:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713478231:# validation set for accuracy
1671713478232:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713478468:options(scipen=999, digits=3)
1671713478650:#check the residuals
1671713478650:some.residuals <- valid.norm.df$Finedust[1:5]
1671713478842:Finedust.lm.pred[1:5]
1671713479064:#df for residuals
1671713479065:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713479384:options(scipen =999, digits=0)
1671713479988:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713504102:#train set for accuaracy
1671713504104:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713504628:options(scipen=999, digits = 4)
1671713505028:# check the residuals
1671713505028:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671713505237:# df for residuals
1671713505237:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671713523567:#train set for accuaracy
1671713523568:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713524099:options(scipen=999, digits = 3)
1671713524614:# check the residuals
1671713524615:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671713525021:# df for residuals
1671713525022:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713529004:options(scipen =999, digits = 0)
1671713529714:# check the accuracy
1671713529714:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713559950:# validation set for accuracy
1671713559952:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713560762:options(scipen=999, digits=0)
1671713561056:#check the residuals
1671713561057:some.residuals <- valid.norm.df$Finedust[1:5]
1671713561326:Finedust.lm.pred[1:5]
1671713561592:#df for residuals
1671713561593:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713562829:options(scipen =999, digits=3)
1671713563333:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713565326:#train set for accuaracy
1671713565326:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713565583:options(scipen=999, digits = 0)
1671713565797:# check the residuals
1671713565797:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671713565997:# df for residuals
1671713565997:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713566395:options(scipen =999, digits = 3)
1671713567102:# check the accuracy
1671713567102:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713600552:# validation set for accuracy
1671713600553:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713601042:options(scipen=999, digits=0)
1671713601369:#check the residuals
1671713601370:some.residuals <- valid.norm.df$Finedust[2:5]
1671713601669:Finedust.lm.pred[2:5]
1671713604440:#df for residuals
1671713604441:data.frame("Predicted" = Finedust.lm.pred[2:5], "Actual"= valid.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671713605445:options(scipen =999, digits=3)
1671713606813:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713624768:# validation set for accuracy
1671713624770:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713625084:options(scipen=999, digits=0)
1671713625392:#check the residuals
1671713625393:some.residuals <- valid.norm.df$Finedust[3:5]
1671713625601:Finedust.lm.pred[3:5]
1671713625929:#df for residuals
1671713625929:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671713627157:options(scipen =999, digits=3)
1671713628932:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713649499:# validation set for accuracy
1671713649500:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713649761:options(scipen=999, digits=1)
1671713650069:#check the residuals
1671713650070:some.residuals <- valid.norm.df$Finedust[3:5]
1671713650350:Finedust.lm.pred[3:5]
1671713650630:#df for residuals
1671713650630:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671713651654:options(scipen =999, digits=3)
1671713652217:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713658385:# validation set for accuracy
1671713658386:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713658650:options(scipen=999, digits=1)
1671713658904:#check the residuals
1671713658904:some.residuals <- valid.norm.df$Finedust[3:5]
1671713659312:Finedust.lm.pred[3:5]
1671713659939:#df for residuals
1671713659939:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671713664289:options(scipen =999, digits=0)
1671713667116:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713670302:#train set for accuaracy
1671713670302:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713670723:options(scipen=999, digits = 0)
1671713670947:# check the residuals
1671713670948:some.residuals <- train.norm.df$Finedust[2:5] - Finedust.lm.pred.train[2:5]
1671713671333:# df for residuals
1671713671333:data.frame("Predicted" = Finedust.lm.pred.train[2:5], "Acutal" = train.norm.df$Finedust[2:5], "Residual" = some.residuals)
1671713672612:options(scipen =999, digits = 3)
1671713673546:# check the accuracy
1671713673546:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713703466:#train set for accuaracy
1671713703467:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713703796:options(scipen=999, digits = 0)
1671713704084:# check the residuals
1671713704084:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671713704490:# df for residuals
1671713704490:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671713717745:#train set for accuaracy
1671713717747:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713718168:options(scipen=999, digits = 0)
1671713718504:# check the residuals
1671713718504:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671713718912:# df for residuals
1671713718912:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671713720573:options(scipen =999, digits = 3)
1671713721549:# check the accuracy
1671713721549:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713795081:# validation set for accuracy
1671713795082:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713795542:options(scipen=999, digits=0)
1671713795859:#check the residuals
1671713795860:some.residuals <- valid.norm.df$Finedust[4:5]
1671713796251:Finedust.lm.pred[4:5]
1671713797137:#df for residuals
1671713797138:data.frame("Predicted" = Finedust.lm.pred[4:5], "Actual"= valid.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671713798090:options(scipen =999, digits=0)
1671713799390:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671713800392:#train set for accuaracy
1671713800392:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713801308:options(scipen=999, digits = 0)
1671713801637:# check the residuals
1671713801638:some.residuals <- train.norm.df$Finedust[4:5] - Finedust.lm.pred.train[4:5]
1671713801945:# df for residuals
1671713801945:data.frame("Predicted" = Finedust.lm.pred.train[4:5], "Acutal" = train.norm.df$Finedust[4:5], "Residual" = some.residuals)
1671713802265:options(scipen =999, digits = 3)
1671713803183:# check the accuracy
1671713803183:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671713818903:#train set for accuaracy
1671713818905:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713819149:options(scipen=999, digits = 0)
1671713819506:# check the residuals
1671713819506:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671713820268:# df for residuals
1671713820269:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671713831805:#train set for accuaracy
1671713831807:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671713832032:options(scipen=999, digits = 0)
1671713832294:# check the residuals
1671713832295:some.residuals <- train.norm.df$Finedust[1:3] - Finedust.lm.pred.train[1:3]
1671713832558:# df for residuals
1671713832559:data.frame("Predicted" = Finedust.lm.pred.train[1:3], "Acutal" = train.norm.df$Finedust[1:3], "Residual" = some.residuals)
1671713883907:View(dust.df)
1671713990858:#다중 선형 회구 모델 with training set
1671713990860:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671713991097:options(scipen=999)
1671713991333:summary(Finedust.lm)
1671713991708:# validation set for accuracy
1671713991708:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671713992439:options(scipen=999, digits=0)
1671713992896:#check the residuals
1671713992896:some.residuals <- valid.norm.df$Finedust[1:5]
1671713993468:Finedust.lm.pred[1:5]
1671713993801:#df for residuals
1671713993801:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671714000843:options(scipen =999, digits=0)
1671714001651:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671714008132:# validation set for accuracy
1671714008133:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671714008566:options(scipen=999, digits=0)
1671714008744:#check the residuals
1671714008744:some.residuals <- valid.norm.df$Finedust[1:5]
1671714008937:Finedust.lm.pred[1:5]
1671714009190:#df for residuals
1671714009190:data.frame("Predicted" = Finedust.lm.pred[1:5], "Actual"= valid.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671714010399:options(scipen =999, digits=3)
1671714011005:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671714015257:#train set for accuaracy
1671714015257:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671714015942:options(scipen=999, digits = 0)
1671714016341:# check the residuals
1671714016342:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671714016898:# df for residuals
1671714016899:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671714018940:options(scipen =999, digits = 3)
1671714023635:# check the accuracy
1671714023636:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671714063286:#new data test
1671714063288:new.pred <- predict(Finedust.lm, new.norm.df)
1671714192124:#new data test
1671714192125:new.pred <- predict(Finedust.lm.pred, new.norm.df)
1671714213254:#new data test
1671714213256:new.pred <- predict(Finedust, new.norm.df)
1671714226825:#new data test
1671714226826:new.pred <- predict(train.df, new.norm.df)
1671714274299:# 산점도 그래프로 나타내기
1671714274301:plot(Finedust.lm.pred,train)
1671714278913:# 산점도 그래프로 나타내기
1671714278914:plot(Finedust.lm.pred,train.df)
1671714290632:# 산점도 그래프로 나타내기
1671714290632:plot(Finedust.lm.pred.train)
1671714301519:#new data test
1671714301519:new.pred <- predict(Finedust.lm.pred.train, new.norm.df)
1671714459100:#new data test
1671714459102:new.pred <- predict(Finedust.lm.pred.train, new.df)
1671714523820:#new data test
1671714523820:new.pred <- predict(Finedust.lm.pred.train, new.norm.df=data.frame)
1671714534589:#new data test
1671714534590:new.pred <- predict(Finedust.lm.pred.train, new.norm.df)
1671714543827:#new data test
1671714543827:new.pred <- predict(Finedust.lm, new.norm.df)
1671714550358:#new data test
1671714550360:new.pred <- predict(Finedust.lm, new.norm.df=data.frame)
1671714552037:options(scipen=999, digits=3)
1671714552696:new.pred
1671714600089:#new data test
1671714600090:new.pred <- predict(Finedust.lm, new.norm.df=Date)
1671714601052:options(scipen=999, digits=3)
1671714601304:new.pred
1671714764240:#new data test
1671714764241:new.pred <- predict(Finedust.lm, new.norm.df=Date)
1671714764782:options(scipen=999, digits=0)
1671714765385:new.pred
1671714794992:#new data test
1671714794993:new.pred <- predict(Finedust.lm, new.norm.df)
1671714877157:#new data test
1671714877159:new.pred <- predict(Finedust.lm, new.norm.df=Finedust)
1671714878158:options(scipen=999, digits=0)
1671714878508:new.pred
1671714894792:#new data test
1671714894794:new.pred <- predict(Finedust.lm, new.norm.df=Date)
1671714895178:options(scipen=999, digits=0)
1671714897358:new.pred
1671714906973:#new data test
1671714906973:new.pred <- predict(Finedust.lm, new.norm.df=Year)
1671714908245:options(scipen=999, digits=0)
1671714909870:new.pred
1671714918495:#new data test
1671714918496:new.pred <- predict(Finedust.lm, new.norm.df=data.frame)
1671714918991:options(scipen=999, digits=0)
1671714919399:new.pred
1671714979060:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671714983852:new.norm.df <- new.df
1671714992523:#new data test
1671714992523:new.pred <- predict(Finedust.lm, new.norm.df)
1671715004000:#new data test
1671715004002:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715005004:options(scipen=999, digits=0)
1671715005537:new.pred
1671715015302:#new data test
1671715015304:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715015747:options(scipen=999, digits=3)
1671715016127:new.pred
1671715030350:#new data test
1671715030350:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715030728:options(scipen=999, digits=2)
1671715031216:new.pred
1671715038621:#new data test
1671715038622:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715039003:options(scipen=999, digits=4)
1671715039437:new.pred
1671715048767:#new data test
1671715048768:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715049176:options(scipen=999, digits=1)
1671715049494:new.pred
1671715086138:#new data test
1671715086140:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715086641:options(scipen=999, digits=3)
1671715087606:new.pred
1671715179025:View(No2.df)
1671715180427:table(No2.df$no2)
1671715182114:#결측치 확인
1671715182115:table(is.na(No2.df$no2))
1671715182494:sum(is.na(No2.df$no2))
1671715183136:#결측치 처리
1671715183136:no2_clean <- No2.df%>%filter(!is.na(no2))
1671715183385:table(is.na(no2_clean$no2))
1671715183634:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671715183858:table(is.na(No2.df$no2))
1671715184103:no2_clean <- No2.df%>%filter(!is.na(no2))
1671715184339:table(is.na(no2_clean$no2))
1671715184567:View(No2.df)
1671715185343:#날씨 예측
1671715185343:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671715185886:#partitioning for training and validation
1671715185886:set.seed(1)
1671715186382:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671715187485:train.df <- No2.df[train.index,]
1671715187990:valid.df <- No2.df[-train.index,]
1671715188405:#정규화
1671715188405:train.norm.df <- train.df
1671715188900:valid.norm.df <- valid.df
1671715189197:no2.norm.df <- No2.df
1671715189448:norm.values <- preProcess( train.df[,c(4,5)], method=c("center"))
1671715189742:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671715189965:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671715190577:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671715228152:new.norm.df<- predict(norm.values,new.df)
1671715314419:new.df <- data.frame(District='강남구', Finedust =10)
1671715318422:#new data test
1671715318422:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671715319009:options(scipen=999, digits=3)
1671715319520:new.pred
1671715778695:#정규화
1671715778704:train.norm.df <- train.df
1671715814187:valid.norm.df <- valid.df
1671715814588:no2.norm.df <- No2.df
1671715815106:norm.values <- preProcess( train.df[,c(4,5)], method=c("center"))
1671715816787:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671715817567:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671715818172:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671715819296:new.norm.df<- predict(norm.values,new.df)
1671715866916:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671715867495:train.norm.df[,c(,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671715867874:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671715871560:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671715871865:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671715872165:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671715872613:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671715873484:new.norm.df<- predict(norm.values,new.df)
1671715953099:#다중 선형 회구 모델 with training set
1671715953100:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671715953755:options(scipen=999)
1671715954422:summary(no2.lm)
1671715963310:View(No2.df)
1671715964881:# validation set for accuracy
1671715964881:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671715969897:options(scipen=999, digits=0)
1671715970886:#check the residuals
1671715970887:some.residuals <- valid.norm.df$no2[1:5]
1671715972147:#df for residuals
1671715972147:data.frame("Predicted" = no2.lm.pred[1:5], "Actual"= valid.norm.df$no2[1:5], "Residual" = some.residuals)
1671716260248:new.norm.df<- predict(norm.values,new.df)
1671716285375:#정규화
1671716285376:train.norm.df <- train.df
1671716286097:valid.norm.df <- valid.df
1671716286503:no2.norm.df <- No2.df
1671716287472:new.norm.df<- new.df
1671716288012:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671716288302:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671716288581:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671716288907:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671716289422:new.norm.df<- predict(norm.values,new.df)
1671718320128:new.norm.df<- predict(norm.values,new.df)
1671718390561:#정규화
1671718390562:train.norm.df <- train.df
1671718390829:valid.norm.df <- valid.df
1671718391100:no2.norm.df <- No2.df
1671718391346:new.norm.df<- new.df
1671718391773:norm.values <- preProcess( train.df[,c(3,4,5)], method=c("center","scale"))
1671718392185:train.norm.df[,c(3,4,5)] <- predict( norm.values, train.df[,c(3,4,5)] )
1671718392512:valid.norm.df[,c(3,4,5)] <- predict( norm.values, valid.df[,c(3,4,5)] )
1671718393012:no2.norm.df[,c(3,4,5)] <- predict( norm.values, No2.df[,c(3,4,5)] )
1671718393837:new.norm.df<- predict(norm.values,new.df)
1671718480403:new.norm.df<- predict(norm.values[,c(3,4,5],new.df)
1671718505072:new.norm.df<- predict(norm.values[,c(3,4,5)],new.df)
1671718794575:No2.df <- read.csv("SeoulNo2.csv")
1671718863628:No2.df <- read.csv("SeoulNo2.csv")
1671718866131:No2.df <- rename(No2.df,
1671718866131:no2 = NO2.ppm)
1671718875648:#정규화
1671718875649:train.norm.df <- train.df
1671718876180:valid.norm.df <- valid.df
1671718876513:no2.norm.df <- No2.df
1671718876828:new.norm.df<- new.df
1671718877149:norm.values <- preProcess( train.df[,c(3,4,5)], method=c("center","scale"))
1671718877756:train.norm.df[,c(3,4,5)] <- predict( norm.values, train.df[,c(3,4,5)] )
1671718878056:valid.norm.df[,c(3,4,5)] <- predict( norm.values, valid.df[,c(3,4,5)] )
1671718878367:no2.norm.df[,c(3,4,5)] <- predict( norm.values, No2.df[,c(3,4,5)] )
1671718879470:new.norm.df<- predict(norm.values,new.df)
1671718909679:norm.values <- preProcess( train.df[,c(3:5)], method=c("center","scale"))
1671718910185:train.norm.df[,c(3:5)] <- predict( norm.values, train.df[,c(3:5)] )
1671718910538:valid.norm.df[,c(3:5)] <- predict( norm.values, valid.df[,c(3:5)] )
1671718910935:no2.norm.df[,c(3:5)] <- predict( norm.values, No2.df[,c(3:5)] )
1671718911323:new.norm.df<- predict(norm.values,new.df)
1671718972563:View(No.df)
1671718975154:View(No2.df)
1671719069647:norm.values <- preProcess( train.df[,c(3,5)], method=c("center","scale"))
1671719070082:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671719070244:valid.norm.df[,c(3,5)] <- predict( norm.values, valid.df[,c(3,5)] )
1671719070464:no2.norm.df[,c(3,5)] <- predict( norm.values, No2.df[,c(3,5)] )
1671719071582:new.norm.df<- predict(norm.values,new.df)
1671719127243:install.packages("dplyr")
1671719130222:install.packages("dplyr")
1671719133011:install.pacakges("forecast")
1671719136080:install.packages("caret")
1671719140631:install.packages("ggplot2")
1671719144463:install.packages("extrafont")
1671719148480:library(dplyr)
1671719150455:library(forecast)
1671719152498:library(caret)
1671719153631:library(ggplot2)
1671719154793:library(extrafont)
1671719157049:font_import()
1671719173171:y
1671719201069:dust.df <- read.csv("SeoulFineDust.csv")
1671719201625:No2.df <- read.csv("SeoulNo2.csv")
1671719203546:dust.df <- rename(dust.df,
1671719203546:Finedust =FineDust.PM )
1671719204099:No2.df <- rename(No2.df,
1671719204099:no2 = NO2.ppm)
1671719204961:View(dust.df)
1671719206063:View(No2.df)
1671719206862:str(dust.df)
1671719207272:par(family="AppleGothic")
1671719207735:Finedustcitydate <- dust.df %>%
1671719207735:filter(District=="강남구")%>%
1671719207736:filter(Date=='1')%>%
1671719207736:arrange(desc(Finedust))
1671719208024:View(Finedustcitydate)
1671719209129:Finedust_2020_3 <- dust.df %>%
1671719209130:filter(Month=='3') %>%
1671719209130:filter(Year=='2020') %>%
1671719209130:head(5)
1671719209727:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671719209728:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671719211016:#2020년 3월 중 미세먼지가 심한 날짜
1671719211016:FinedustDate <- dust.df %>%
1671719211017:filter(Month=="3")%>%
1671719211017:filter(Year=='2020')%>%
1671719211017:arrange(desc(Finedust))
1671719212516:View(FinedustDate)
1671719213643:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671719214603:Finedust_2020_3 <- dust.df %>%
1671719214604:filter(Month=='3') %>%
1671719214604:filter(Year=='2020') %>%
1671719214604:head(5)
1671719216237:View(Finedust_2020_3)
1671719218058:table(dust.df$Finedust)
1671719219492:#결측치 확인
1671719219493:table(is.na(dust.df$Finedust))
1671719220577:sum(is.na(dust.df$Finedust))
1671719221115:#결측치 처리
1671719221115:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671719221483:table(is.na(Finedust_clean$Finedust))
1671719221814:#이상치 처리
1671719221815:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671719222204:table(is.na(dust.df$Finedust))
1671719222551:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671719222888:table(is.na(Finedust_clean$Finedust))
1671719223178:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671719223909:new.df <- data.frame(District='강남구', Finedust =10)
1671719224384:#partitioning for training and validation
1671719224384:set.seed(1)
1671719224635:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671719224857:train.df <- dust.df[train.index,]
1671719225260:valid.df <- dust.df[-train.index,]
1671719225466:#정규화
1671719225467:train.norm.df <- train.df
1671719225719:valid.norm.df <- valid.df
1671719225982:dust.norm.df <- dust.df
1671719226199:new.norm.df <- new.df
1671719226417:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671719226417:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671719226671:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671719226919:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671719227166:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671719227429:new.norm.df<- predict(norm.values,new.df)
1671719227767:#다중 선형 회구 모델 with training set
1671719227768:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671719228048:options(scipen=999)
1671719228358:summary(Finedust.lm)
1671719229688:# validation set for accuracy
1671719229689:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671719230294:options(scipen=999, digits=0)
1671719230966:#check the residuals
1671719230966:some.residuals <- valid.norm.df$Finedust[1:5]
1671719231479:Finedust.lm.pred[1:5]
1671719256835:# validation set for accuracy
1671719256836:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671719257229:options(scipen=999, digits=0)
1671719257699:#check the residuals
1671719257700:some.residuals <- valid.norm.df$Finedust[2:5]
1671719258190:Finedust.lm.pred[2:5]
1671719270679:#check the residuals
1671719270680:some.residuals <- valid.norm.df$Finedust[3:5]
1671719271122:Finedust.lm.pred[3:5]
1671719272330:#df for residuals
1671719272330:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719274450:options(scipen =999, digits=3)
1671719275041:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671719276188:#train set for accuaracy
1671719276188:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719276552:options(scipen=999, digits = 0)
1671719276785:# check the residuals
1671719276785:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671719277049:# df for residuals
1671719277050:data.frame("Predicted" = Finedust.lm.pred.train[1:5], "Acutal" = train.norm.df$Finedust[1:5], "Residual" = some.residuals)
1671719278525:options(scipen =999, digits = 3)
1671719278988:# check the accuracy
1671719278989:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671719279646:#  show all residuals with visualization
1671719279646:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671719280243:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671719280723:# 산점도 그래프로 나타내기
1671719280723:plot(Finedust.lm.pred.train)
1671719282023:#new data test
1671719282023:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671719282653:options(scipen=999, digits=3)
1671719283067:new.pred
1671719319792:#train set for accuaracy
1671719319793:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719320221:options(scipen=999, digits = 0)
1671719320692:# check the residuals
1671719320692:some.residuals <- train.norm.df$Finedust - Finedust.lm.pred.train
1671719321206:# df for residuals
1671719321207:data.frame("Predicted" = Finedust.lm.pred.train, "Acutal" = train.norm.df$Finedust, "Residual" = some.residuals)
1671719338859:options(scipen=999, digits=0)
1671719339235:#check the residuals
1671719339235:some.residuals <- valid.norm.df$Finedust[3:5]
1671719339732:Finedust.lm.pred[3:5]
1671719340562:#df for residuals
1671719340562:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719347554:# validation set for accuracy
1671719347554:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671719348062:options(scipen=999, digits=1)
1671719348462:#check the residuals
1671719348462:some.residuals <- valid.norm.df$Finedust[3:5]
1671719350218:Finedust.lm.pred[3:5]
1671719354412:#df for residuals
1671719354412:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719356269:options(scipen =999, digits=3)
1671719357973:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671719359504:#train set for accuaracy
1671719359505:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719360663:options(scipen=999, digits = 0)
1671719361414:# check the residuals
1671719361415:some.residuals <- train.norm.df$Finedust[1:5] - Finedust.lm.pred.train[1:5]
1671719378114:#train set for accuaracy
1671719378115:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719378577:options(scipen=999, digits = 0)
1671719379152:# check the residuals
1671719379153:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671719379710:# df for residuals
1671719379711:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719387900:#train set for accuaracy
1671719387901:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719388159:options(scipen=999, digits = 2)
1671719388428:# check the residuals
1671719388428:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671719388628:# df for residuals
1671719388629:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719388929:options(scipen =999, digits = 3)
1671719391465:# check the accuracy
1671719391465:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671719401126:#train set for accuaracy
1671719401127:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719401379:options(scipen=999, digits = 1)
1671719401653:# check the residuals
1671719401654:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671719401871:# df for residuals
1671719401871:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719402111:options(scipen =999, digits = 5)
1671719403006:# check the accuracy
1671719403006:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671719411134:#train set for accuaracy
1671719411135:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719411441:options(scipen=999, digits = 1)
1671719411625:# check the residuals
1671719411625:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671719411841:# df for residuals
1671719411841:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719412058:options(scipen =999, digits = 0)
1671719412575:# check the accuracy
1671719412576:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671719412887:#  show all residuals with visualization
1671719412888:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671719425723:#train set for accuaracy
1671719425724:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671719426313:options(scipen=999, digits = 3)
1671719426527:# check the residuals
1671719426528:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671719426781:# df for residuals
1671719426781:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671719427046:options(scipen =999, digits = 0)
1671719428237:# check the accuracy
1671719428238:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671719432320:#  show all residuals with visualization
1671719432321:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671719432892:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671719433913:# 산점도 그래프로 나타내기
1671719433913:plot(Finedust.lm.pred.train)
1671719434095:#new data test
1671719434096:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671719435062:options(scipen=999, digits=3)
1671719436251:new.pred
1671719441671:View(No2.df)
1671719517965:#결측치 확인
1671719517967:table(is.na(No2.df$no2))
1671719520597:sum(is.na(No2.df$no2))
1671719544733:#결측치 처리
1671719544734:no2_clean <- No2.df%>%filter(!is.na(no2))
1671719545843:table(is.na(no2_clean$no2))
1671719550222:View(No2.df)
1671719608845:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671719619389:table(is.na(No2.df$no2))
1671719630937:no2_clean <- No2.df%>%filter(!is.na(no2))
1671719658753:table(is.na(no2_clean$no2))
1671719660782:View(No2.df)
1671719668021:#날씨 예측
1671719668021:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671719669605:#partitioning for training and validation
1671719669605:set.seed(1)
1671719670166:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671719670754:train.df <- No2.df[train.index,]
1671719671271:valid.df <- No2.df[-train.index,]
1671719672859:View(No2.df)
1671719676610:#정규화
1671719676611:train.norm.df <- train.df
1671719677096:valid.norm.df <- valid.df
1671719677603:no2.norm.df <- No2.df
1671719689111:norm.values <- preProcess( train.df[,c(3,5)], method=c("center","scale"))
1671719689893:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671719690508:valid.norm.df[,c(3,5)] <- predict( norm.values, valid.df[,c(3,5)] )
1671719691414:no2.norm.df[,c(3,5)] <- predict( norm.values, No2.df[,c(3,5)] )
1671719691952:new.norm.df<- predict(norm.values,new.df)
1671719787500:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671719788164:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671719788515:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671719789071:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671719789722:new.norm.df<- predict(norm.values,new.df)
1671719811924:no2.norm.df[,c(4,5)] <- predict( norm.values, no2.df[,c(4,5)] )
1671719832407:new.norm.df<- predict(norm.values,new.df)
1671719944263:new.df <- data.frame(District='강남구', no2=0.034)
1671719946102:#partitioning for training and validation
1671719946103:set.seed(1)
1671719946455:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671719946871:train.df <- No2.df[train.index,]
1671719947212:valid.df <- No2.df[-train.index,]
1671719947572:View(No2.df)
1671719948853:#정규화
1671719948853:train.norm.df <- train.df
1671719949155:valid.norm.df <- valid.df
1671719949552:no2.norm.df <- No2.df
1671719949935:new.norm.df<- new.df
1671719952185:norm.values <- preProcess( train.df[,c(3,5)], method=c("center","scale"))
1671719953010:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671719958918:valid.norm.df[,c(3,5)] <- predict( norm.values, valid.df[,c(3,5)] )
1671719959588:no2.norm.df[,c(3,5)] <- predict( norm.values, No2.df[,c(3,5)] )
1671719960186:new.norm.df<- predict(norm.values,new.df)
1671719964036:#다중 선형 회구 모델 with training set
1671719964036:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671719964588:options(scipen=999)
1671719964986:summary(no2.lm)
1671719965552:View(No2.df)
1671719967015:# validation set for accuracy
1671719967015:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671719967596:options(scipen=999, digits=0)
1671719968121:#check the residuals
1671719968122:some.residuals <- valid.norm.df$no2[1:5]
1671719968322:#df for residuals
1671719968322:data.frame("Predicted" = no2.lm.pred[1:5], "Actual"= valid.norm.df$no2[1:5], "Residual" = some.residuals)
1671719968556:options(scipen =999, digits=3)
1671719968846:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671719969033:#train set for accuaray
1671719969033:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671719969230:options(scipen=999, digits = 0)
1671719971226:# check the residuals
1671719971226:some.residuals <- train.norm.df$no2[1:5] - no2.lm.pred.train[1:5]
1671719971738:# df for residuals
1671719971739:data.frame("Predicted" = no2.lm.pred.train[1:5], "Acutal" = train.norm.df$no2[1:5], "Residual" = some.residuals)
1671719972065:options(scipen =999, digits = 3)
1671719972543:# check the accuracy
1671719972544:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671719972866:# // show all residuals with visualization
1671719972866:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671719973454:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671719975470:plot(Finedust.lm.pred.train)
1671720001990:plot(no2.lm.pred.train)
1671720013405:new.pred <- predict(no2.lm, new.norm.df=data.frame())
1671720015285:options(scipen=999, digits=3)
1671720015824:new.pred
1671720102218:new.pred.date <- new.pred %>%
1671720102220:filter(Month=='3')%>%
1671720102220:filter(Date=='10')%>%
1671720102220:arrange(desc(no2))
1671720145983:new.pred.date <- new.pred %>%
1671720145984:filter(index==1310)%>%
1671720145985:filter(Date=='10')%>%
1671720145985:arrange(desc(no2))
1671720152787:new.pred.date <- new.pred %>%
1671720152787:filter(index=='1310')%>%
1671720152788:filter(Date=='10')%>%
1671720152788:arrange(desc(no2))
1671720187134:plot(new.pred)
1671720195915:plot(no2.lm.pred.train)
1671720198264:plot(new.pred)
1671723967554:Finedustcitydate <- dust.df %>%
1671723967580:filter(District=="강남구")%>%
1671723967581:filter(Date=='1')%>%
1671723967581:arrange(desc(Finedust))
1671723969170:View(Finedustcitydate)
1671724036316:Finedust_2020_3 <- dust.df %>%
1671724036317:filter(Month=='3') %>%
1671724036317:filter(Year=='2020') %>%
1671724036317:head(5)
1671724384010:#2020년 3월 중 미세먼지가 심한 날짜
1671724384056:FinedustDate <- dust.df %>%
1671724384057:filter(Month=="3")%>%
1671724384057:filter(Year=='2020')%>%
1671724384057:arrange(desc(Finedust))
1671724385604:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671724783786:install.packages("dplyr")
1671724788899:install.packages("dplyr")
1671724795244:install.pacakges("forecast")
1671724797833:install.packages("caret")
1671724802365:install.packages("ggplot2")
1671724808002:install.packages("extrafont")
1671724813233:library(dplyr)
1671724815001:library(forecast)
1671724816285:library(caret)
1671724818563:library(ggplot2)
1671724819446:library(extrafont)
1671724825032:library(dplyr)
1671724826631:library(forecast)
1671724827989:library(caret)
1671724829948:font_import()
1671724833037:dust.df <- read.csv("SeoulFineDust.csv")
1671724834972:No2.df <- read.csv("SeoulNo2.csv")
1671724838764:dust.df <- rename(dust.df,
1671724838765:Finedust =FineDust.PM )
1671724839294:No2.df <- rename(No2.df,
1671724839294:no2 = NO2.ppm)
1671724839864:View(dust.df)
1671724840825:View(No2.df)
1671724841544:str(dust.df)
1671724841908:par(family="AppleGothic")
1671724842372:Finedustcitydate <- dust.df %>%
1671724842373:filter(District=="강남구")%>%
1671724842373:filter(Date=='1')%>%
1671724842374:arrange(desc(Finedust))
1671724842733:View(Finedustcitydate)
1671724843776:Finedust_2020_3 <- dust.df %>%
1671724843776:filter(Month=='3') %>%
1671724843776:filter(Year=='2020') %>%
1671724843776:head(5)
1671724844601:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671724844601:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671724845708:#2020년 3월 중 미세먼지가 심한 날짜
1671724845709:FinedustDate <- dust.df %>%
1671724845709:filter(Month=="3")%>%
1671724845709:filter(Year=='2020')%>%
1671724845709:arrange(desc(Finedust))
1671724845899:View(FinedustDate)
1671724861643:Finedust_2020_3 <- dust.df %>%
1671724861644:filter(Month=='3') %>%
1671724861644:filter(Year=='2020') %>%
1671724861645:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671724861645:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671724867488:Finedust_2020_3 <- dust.df %>%
1671724867490:filter(Month=='3') %>%
1671724867490:filter(Year=='2020')
1671724868592:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671724868593:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671724880724:#2020년 3월 중 미세먼지가 심한 날짜
1671724880725:FinedustDate <- dust.df %>%
1671724880726:filter(Month=="3")%>%
1671724880726:filter(Year=='2020')%>%
1671724880726:arrange(desc(Finedust))
1671724881964:View(FinedustDate)
1671724883687:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671724886613:Finedust_2020_3 <- dust.df %>%
1671724886613:filter(Month=='3') %>%
1671724886614:filter(Year=='2020') %>%
1671724886614:head(5)
1671724887411:View(Finedust_2020_3)
1671724891841:table(dust.df$Finedust)
1671724895688:#결측치 확인
1671724895688:table(is.na(dust.df$Finedust))
1671724896123:sum(is.na(dust.df$Finedust))
1671724897260:#결측치 처리
1671724897261:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671724897708:table(is.na(Finedust_clean$Finedust))
1671724898236:#이상치 처리
1671724898236:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671724898515:table(is.na(dust.df$Finedust))
1671724900199:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671724900687:table(is.na(Finedust_clean$Finedust))
1671724903335:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671724904096:new.df <- data.frame(District='강남구', Finedust =10)
1671724904623:#partitioning for training and validation
1671724904624:set.seed(1)
1671724905475:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671724906101:train.df <- dust.df[train.index,]
1671724907265:valid.df <- dust.df[-train.index,]
1671724908105:#정규화
1671724908105:train.norm.df <- train.df
1671724908587:valid.norm.df <- valid.df
1671724909210:dust.norm.df <- dust.df
1671724909817:new.norm.df <- new.df
1671724910477:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671724910477:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671724911097:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671724911594:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671724912028:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671724912677:new.norm.df<- predict(norm.values,new.df)
1671724913650:#다중 선형 회구 모델 with training set
1671724913650:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671724915008:options(scipen=999)
1671724915563:summary(Finedust.lm)
1671725298437:# validation set for accuracy
1671725298441:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671725299838:options(scipen=999, digits=1)
1671725300304:#check the residuals
1671725300304:some.residuals <- valid.norm.df$Finedust[3:5]
1671725300718:Finedust.lm.pred[3:5]
1671725301194:#df for residuals
1671725301195:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725301893:options(scipen =999, digits=3)
1671725303042:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671725410701:#train set for accuaracy
1671725410702:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671725411333:options(scipen=999, digits = 3)
1671725411783:# check the residuals
1671725411785:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725412222:# df for residuals
1671725412223:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725413722:options(scipen =999, digits = 0)
1671725415179:# check the accuracy
1671725415179:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725425082:#train set for accuaracy
1671725425082:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671725425478:options(scipen=999, digits = 2)
1671725425884:# check the residuals
1671725425884:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725426265:# df for residuals
1671725426265:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725426627:options(scipen =999, digits = 0)
1671725427192:# check the accuracy
1671725427193:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725431535:options(scipen=999, digits = 2)
1671725431798:# check the residuals
1671725431798:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725432212:# df for residuals
1671725432212:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725432498:options(scipen =999, digits = 1)
1671725432977:# check the accuracy
1671725432977:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725466841:#train set for accuaracy
1671725466844:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671725467199:options(scipen=999, digits = 1)
1671725467444:# check the residuals
1671725467444:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725467667:# df for residuals
1671725467667:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725467980:options(scipen =999, digits = 3)
1671725468923:# check the accuracy
1671725468924:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725476807:#train set for accuaracy
1671725476809:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671725476996:options(scipen=999, digits = 1)
1671725477211:# check the residuals
1671725477211:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725477426:# df for residuals
1671725477427:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725477736:options(scipen =999, digits = 0)
1671725478353:# check the accuracy
1671725478354:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725483651:#train set for accuaracy
1671725483651:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671725483937:options(scipen=999, digits = 4)
1671725484129:# check the residuals
1671725484130:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671725484320:# df for residuals
1671725484320:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671725484503:options(scipen =999, digits = 0)
1671725484950:# check the accuracy
1671725484950:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671725541731:#  show all residuals with visualization
1671725541733:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671725542203:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671725554731:# 산점도 그래프로 나타내기
1671725554732:plot(Finedust.lm.pred.train)
1671725596313:#new data test
1671725596314:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671725596960:options(scipen=999, digits=3)
1671725597573:new.pred
1671726290420:#결측치 확인
1671726290422:table(is.na(No2.df$no2))
1671726290746:sum(is.na(No2.df$no2))
1671726291110:#결측치 처리
1671726291110:no2_clean <- No2.df%>%filter(!is.na(no2))
1671726291356:table(is.na(no2_clean$no2))
1671726291589:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671726291860:table(is.na(No2.df$no2))
1671726292062:no2_clean <- No2.df%>%filter(!is.na(no2))
1671726292239:table(is.na(no2_clean$no2))
1671726292429:View(No2.df)
1671726293654:#날씨 예측
1671726293655:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671726294116:#partitioning for training and validation
1671726294116:set.seed(1)
1671726294355:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671726294725:train.df <- No2.df[train.index,]
1671726295016:valid.df <- No2.df[-train.index,]
1671726295300:View(No2.df)
1671726296018:#정규화
1671726296018:train.norm.df <- train.df
1671726296372:valid.norm.df <- valid.df
1671726296688:no2.norm.df <- No2.df
1671726297243:new.norm.df<- new.df
1671726297426:norm.values <- preProcess( train.df[,c(3,5)], method=c("center","scale"))
1671726297631:train.norm.df[,c(3,5)] <- predict( norm.values, train.df[,c(3,5)] )
1671726297847:valid.norm.df[,c(3,5)] <- predict( norm.values, valid.df[,c(3,5)] )
1671726298474:no2.norm.df[,c(3,5)] <- predict( norm.values, No2.df[,c(3,5)] )
1671726298935:new.norm.df<- predict(norm.values,new.df)
1671726300121:#다중 선형 회구 모델 with training set
1671726300122:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671726304893:options(scipen=999)
1671726305304:summary(no2.lm)
1671726310330:View(No2.df)
1671726311638:# validation set for accuracy
1671726311639:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726312698:options(scipen=999, digits=0)
1671726314421:#check the residuals
1671726314421:some.residuals <- valid.norm.df$no2[1:5]
1671726316489:#df for residuals
1671726316490:data.frame("Predicted" = no2.lm.pred[1:5], "Actual"= valid.norm.df$no2[1:5], "Residual" = some.residuals)
1671726318576:options(scipen =999, digits=3)
1671726321637:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671726360135:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671726360570:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671726360886:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671726361305:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671726361615:#다중 선형 회구 모델 with training set
1671726361615:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671726362002:options(scipen=999)
1671726362651:summary(no2.lm)
1671726363167:View(No2.df)
1671726364791:# validation set for accuracy
1671726364791:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726365423:options(scipen=999, digits=0)
1671726365776:#check the residuals
1671726365776:some.residuals <- valid.norm.df$no2[1:5]
1671726366110:#df for residuals
1671726366111:data.frame("Predicted" = no2.lm.pred[1:5], "Actual"= valid.norm.df$no2[1:5], "Residual" = some.residuals)
1671726377101:#df for residuals
1671726377101:data.frame("Predicted" = no2.lm.pred[3:5], "Actual"= valid.norm.df$no2[3:5], "Residual" = some.residuals)
1671726396225:#check the residuals
1671726396227:some.residuals <- valid.norm.df$no2[3:5]
1671726396962:#df for residuals
1671726396962:data.frame("Predicted" = no2.lm.pred[3:5], "Actual"= valid.norm.df$no2[3:5], "Residual" = some.residuals)
1671726411380:#check the residuals
1671726411381:some.residuals <- valid.norm.df$no2[4:5]
1671726412900:#df for residuals
1671726412901:data.frame("Predicted" = no2.lm.pred[4:5], "Actual"= valid.norm.df$no2[4:5], "Residual" = some.residuals)
1671726420275:# validation set for accuracy
1671726420275:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726420690:options(scipen=999, digits=1)
1671726421331:#check the residuals
1671726421331:some.residuals <- valid.norm.df$no2[4:5]
1671726421726:#df for residuals
1671726421726:data.frame("Predicted" = no2.lm.pred[4:5], "Actual"= valid.norm.df$no2[4:5], "Residual" = some.residuals)
1671726428910:# validation set for accuracy
1671726428910:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726429187:options(scipen=999, digits=2)
1671726429473:#check the residuals
1671726429474:some.residuals <- valid.norm.df$no2[4:5]
1671726430076:#df for residuals
1671726430076:data.frame("Predicted" = no2.lm.pred[4:5], "Actual"= valid.norm.df$no2[4:5], "Residual" = some.residuals)
1671726433629:options(scipen =999, digits=3)
1671726434460:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671726444226:#train set for accuaray
1671726444226:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726444845:options(scipen=999, digits = 0)
1671726445404:# check the residuals
1671726445405:some.residuals <- train.norm.df$no2[1:5] - no2.lm.pred.train[1:5]
1671726445885:# df for residuals
1671726445886:data.frame("Predicted" = no2.lm.pred.train[1:5], "Acutal" = train.norm.df$no2[1:5], "Residual" = some.residuals)
1671726482350:#train set for accuaray
1671726482352:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726482832:options(scipen=999, digits = 0)
1671726483154:# check the residuals
1671726483154:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726483605:# df for residuals
1671726483606:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726486842:options(scipen =999, digits = 3)
1671726487267:# check the accuracy
1671726487268:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671726549501:#train set for accuaray
1671726549503:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726549836:options(scipen=999, digits = 2)
1671726550707:# check the residuals
1671726550707:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726551311:# df for residuals
1671726551311:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726559263:#train set for accuaray
1671726559264:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726559587:options(scipen=999, digits = 1)
1671726559930:# check the residuals
1671726559931:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726560431:# df for residuals
1671726560433:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726564512:#train set for accuaray
1671726564513:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726564763:options(scipen=999, digits = 3)
1671726565104:# check the residuals
1671726565105:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726565610:# df for residuals
1671726565611:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726570090:#train set for accuaray
1671726570091:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726570339:options(scipen=999, digits = 4)
1671726570724:# check the residuals
1671726570724:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726571149:# df for residuals
1671726571150:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726574710:#train set for accuaray
1671726574710:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726574959:options(scipen=999, digits = 6)
1671726575245:# check the residuals
1671726575246:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726575639:# df for residuals
1671726575640:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726581013:#train set for accuaray
1671726581013:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726581240:options(scipen=999, digits = 10)
1671726581446:# check the residuals
1671726581447:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726581762:# df for residuals
1671726581762:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726593672:#train set for accuaray
1671726593673:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726594107:options(scipen=999, digits = 100)
1671726594361:# check the residuals
1671726594361:some.residuals <- train.norm.df$no2[4:5] - no2.lm.pred.train[4:5]
1671726597077:# df for residuals
1671726597078:data.frame("Predicted" = no2.lm.pred.train[4:5], "Acutal" = train.norm.df$no2[4:5], "Residual" = some.residuals)
1671726626069:#train set for accuaray
1671726626071:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726626267:options(scipen=999, digits = 10)
1671726626534:# check the residuals
1671726626535:some.residuals <- train.norm.df$no2[3:5] - no2.lm.pred.train[3:5]
1671726627009:# df for residuals
1671726627010:data.frame("Predicted" = no2.lm.pred.train[3:5], "Acutal" = train.norm.df$no2[3:5], "Residual" = some.residuals)
1671726630291:options(scipen =999, digits = 3)
1671726646119:# validation set for accuracy
1671726646120:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726646325:options(scipen=999, digits=2)
1671726646556:#check the residuals
1671726646556:some.residuals <- valid.norm.df$no2[3:5]
1671726646886:#df for residuals
1671726646886:data.frame("Predicted" = no2.lm.pred[3:5], "Actual"= valid.norm.df$no2[3:5], "Residual" = some.residuals)
1671726647768:options(scipen =999, digits=3)
1671726648299:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671726649216:#train set for accuaray
1671726649217:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726649676:options(scipen=999, digits = 10)
1671726650732:# check the residuals
1671726650733:some.residuals <- train.norm.df$no2[3:5] - no2.lm.pred.train[3:5]
1671726651354:# df for residuals
1671726651355:data.frame("Predicted" = no2.lm.pred.train[3:5], "Acutal" = train.norm.df$no2[3:5], "Residual" = some.residuals)
1671726653358:options(scipen =999, digits = 3)
1671726653774:# check the accuracy
1671726653774:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671726662008:# // show all residuals with visualization
1671726662009:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671726662483:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671726663576:plot(no2.lm.pred.train)
1671726664443:new.pred <- predict(no2.lm, new.norm.df=data.frame())
1671726665297:options(scipen=999, digits=3)
1671726666098:new.pred
1671726667771:plot(new.pred)
1671726680516:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671726701004:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671726701353:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671726701637:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671726702216:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671726702614:#다중 선형 회구 모델 with training set
1671726702615:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671726703145:options(scipen=999)
1671726703460:summary(no2.lm)
1671726703777:View(No2.df)
1671726705137:# validation set for accuracy
1671726705138:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726705817:options(scipen=999, digits=2)
1671726706131:#check the residuals
1671726706132:some.residuals <- valid.norm.df$no2[3:5]
1671726706388:#df for residuals
1671726706389:data.frame("Predicted" = no2.lm.pred[3:5], "Actual"= valid.norm.df$no2[3:5], "Residual" = some.residuals)
1671726706617:options(scipen =999, digits=3)
1671726706995:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671726707193:#train set for accuaray
1671726707194:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726707375:options(scipen=999, digits = 10)
1671726707858:# check the residuals
1671726707858:some.residuals <- train.norm.df$no2[3:5] - no2.lm.pred.train[3:5]
1671726708027:# df for residuals
1671726708027:data.frame("Predicted" = no2.lm.pred.train[3:5], "Acutal" = train.norm.df$no2[3:5], "Residual" = some.residuals)
1671726708197:options(scipen =999, digits = 3)
1671726708509:# check the accuracy
1671726708510:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671726708650:# // show all residuals with visualization
1671726708650:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671726708826:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671726709171:plot(no2.lm.pred.train)
1671726709894:new.pred <- predict(no2.lm, new.norm.df=data.frame())
1671726710293:options(scipen=999, digits=3)
1671726710763:new.pred
1671726711040:plot(new.pred)
1671726717566:#결측치 처리
1671726717568:no2_clean <- No2.df%>%filter(!is.na(no2))
1671726717909:table(is.na(no2_clean$no2))
1671726718149:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671726718356:table(is.na(No2.df$no2))
1671726718538:no2_clean <- No2.df%>%filter(!is.na(no2))
1671726718739:table(is.na(no2_clean$no2))
1671726718953:View(No2.df)
1671726719333:#날씨 예측
1671726719333:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671726719927:#partitioning for training and validation
1671726719928:set.seed(1)
1671726720124:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671726720307:train.df <- No2.df[train.index,]
1671726720511:valid.df <- No2.df[-train.index,]
1671726720685:View(No2.df)
1671726721077:#정규화
1671726721077:train.norm.df <- train.df
1671726721643:valid.norm.df <- valid.df
1671726721833:no2.norm.df <- No2.df
1671726721984:new.norm.df<- new.df
1671726722158:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671726722362:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671726722593:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671726722780:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671726722954:#다중 선형 회구 모델 with training set
1671726722955:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671726723159:options(scipen=999)
1671726723482:summary(no2.lm)
1671726723647:View(No2.df)
1671726724150:# validation set for accuracy
1671726724150:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671726724345:options(scipen=999, digits=2)
1671726724493:#check the residuals
1671726724493:some.residuals <- valid.norm.df$no2[3:5]
1671726724652:#df for residuals
1671726724653:data.frame("Predicted" = no2.lm.pred[3:5], "Actual"= valid.norm.df$no2[3:5], "Residual" = some.residuals)
1671726724836:options(scipen =999, digits=3)
1671726725000:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671726725150:#train set for accuaray
1671726725151:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671726725316:options(scipen=999, digits = 10)
1671726725532:# check the residuals
1671726725533:some.residuals <- train.norm.df$no2[3:5] - no2.lm.pred.train[3:5]
1671726725661:# df for residuals
1671726725662:data.frame("Predicted" = no2.lm.pred.train[3:5], "Acutal" = train.norm.df$no2[3:5], "Residual" = some.residuals)
1671726725819:options(scipen =999, digits = 3)
1671726725990:# check the accuracy
1671726725990:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671726726165:# // show all residuals with visualization
1671726726165:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671726726354:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671726726629:plot(no2.lm.pred.train)
1671727137846:# validation set for accuracy
1671727137847:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671727138194:options(scipen=999, digits=2)
1671727138498:#check the residuals
1671727138498:some.residuals <- valid.norm.df$no2[2:5]
1671727138797:#df for residuals
1671727138797:data.frame("Predicted" = no2.lm.pred[2:5], "Actual"= valid.norm.df$no2[2:5], "Residual" = some.residuals)
1671727169736:# check the residuals
1671727169738:some.residuals <- train.norm.df$no2[2:5] - no2.lm.pred.train[2:5]
1671727169819:# df for residuals
1671727169819:data.frame("Predicted" = no2.lm.pred.train[2:5], "Acutal" = train.norm.df$no2[2:5], "Residual" = some.residuals)
1671727214294:# check the accuracy
1671727214297:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671727221630:# validation set for accuracy
1671727221630:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671727221882:options(scipen=999, digits=2)
1671727222111:#check the residuals
1671727222112:some.residuals <- valid.norm.df$no2[2:5]
1671727222303:#df for residuals
1671727222303:data.frame("Predicted" = no2.lm.pred[2:5], "Actual"= valid.norm.df$no2[2:5], "Residual" = some.residuals)
1671727222553:options(scipen =999, digits=3)
1671727223372:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671727247690:#train set for accuaray
1671727247692:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671727247959:options(scipen=999, digits = 10)
1671727248153:# check the residuals
1671727248154:some.residuals <- train.norm.df$no2[2:5] - no2.lm.pred.train[2:5]
1671727248391:# df for residuals
1671727248391:data.frame("Predicted" = no2.lm.pred.train[2:5], "Acutal" = train.norm.df$no2[2:5], "Residual" = some.residuals)
1671727248799:options(scipen =999, digits = 3)
1671727249297:# check the accuracy
1671727249297:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671729083735:install.packages("dplyr")
1671729087107:install.packages("dplyr")
1671729090250:install.pacakges("forecast")
1671729094061:install.packages("caret")
1671729099103:install.packages("ggplot2")
1671729106436:install.packages("extrafont")
1671729111736:library(dplyr)
1671729113348:library(forecast)
1671729114801:library(caret)
1671729115948:library(ggplot2)
1671729115948:library(extrafont)
1671729115983:font_import()
1671729117450:dust.df <- read.csv("SeoulFineDust.csv")
1671729118066:No2.df <- read.csv("SeoulNo2.csv")
1671729118492:View(dust.df)
1671729119886:dust.df <- rename(dust.df,
1671729119886:Finedust =FineDust.PM )
1671729120257:No2.df <- rename(No2.df,
1671729120257:no2 = NO2.ppm)
1671729120610:View(dust.df)
1671729122771:View(No2.df)
1671729123875:str(dust.df)
1671729124767:par(family="AppleGothic")
1671729125189:Finedustcitydate <- dust.df %>%
1671729125190:filter(District=="강남구")%>%
1671729125191:filter(Date=='1')%>%
1671729125191:arrange(desc(Finedust))
1671729125512:View(Finedustcitydate)
1671729126284:Finedust_2020_3 <- dust.df %>%
1671729126284:filter(Month=='3') %>%
1671729126284:filter(Year=='2020')
1671729126701:#그래프로 2020년 3월 미세먼지가 심한 도시 나타내기
1671729126701:ggplot(data = Finedust_2020_3, aes(x=District, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("지역구") + ylab("먼지")
1671729127903:#2020년 3월 중 미세먼지가 심한 날짜
1671729127903:FinedustDate <- dust.df %>%
1671729127903:filter(Month=="3")%>%
1671729127903:filter(Year=='2020')%>%
1671729127903:arrange(desc(Finedust))
1671729127910:View(FinedustDate)
1671729127910:ggplot(data = dust.df, aes(x=Date, y=Finedust)) + geom_col() + scale_y_continuous(labels = scales::comma) + xlab("날짜") + ylab("먼지")
1671729137760:Finedust_2020_3 <- dust.df %>%
1671729137760:filter(Month=='3') %>%
1671729137760:filter(Year=='2020') %>%
1671729137761:head(5)
1671729138643:View(Finedust_2020_3)
1671729140200:table(dust.df$Finedust)
1671729141291:#결측치 확인
1671729141292:table(is.na(dust.df$Finedust))
1671729141801:sum(is.na(dust.df$Finedust))
1671729142210:#결측치 처리
1671729142210:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671729142673:table(is.na(Finedust_clean$Finedust))
1671729143102:#이상치 처리
1671729143102:dust.df$Finedust <- ifelse(dust.df$Finedust<10, NA, dust.df$Finedust)
1671729143384:table(is.na(dust.df$Finedust))
1671729143656:Finedust_clean <- dust.df%>%filter(!is.na(Finedust))
1671729143919:table(is.na(Finedust_clean$Finedust))
1671729144160:new.df <- data.frame(date = 10, year = 2023,District='강남구', Finedust = 35)
1671729144399:new.df <- data.frame(District='강남구', Finedust =10)
1671729144647:#partitioning for training and validation
1671729144647:set.seed(1)
1671729144869:train.index <- sample(c(1:dim(dust.df)[1]), dim(dust.df)[1]*0.6)
1671729145088:train.df <- dust.df[train.index,]
1671729145355:valid.df <- dust.df[-train.index,]
1671729145595:#정규화
1671729145596:train.norm.df <- train.df
1671729145849:valid.norm.df <- valid.df
1671729146106:dust.norm.df <- dust.df
1671729146400:new.norm.df <- new.df
1671729146633:#method에 center를 할당하면 중심을 맞춰주고( 워낮료에 자료의 평균을 빼버림), scale을 할당하면 표준편차로 나누기 때문에 두 방법을 같이 적용하면 표준화를 할 수 있다.
1671729146633:norm.values <- preProcess(train.df[,c(4,5)], method=c("center","scale"))
1671729146882:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671729147299:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671729147565:dust.norm.df[,c(4,5)] <- predict( norm.values, dust.df[,c(4,5)] )
1671729147829:new.norm.df<- predict(norm.values,new.df)
1671729148154:#다중 선형 회구 모델 with training set
1671729148155:Finedust.lm <- lm(Finedust ~ ., data = train.norm.df)
1671729148405:options(scipen=999)
1671729148654:summary(Finedust.lm)
1671729148844:# validation set for accuracy
1671729148844:Finedust.lm.pred <- predict(Finedust.lm, valid.norm.df)
1671729149084:options(scipen=999, digits=1)
1671729149449:#check the residuals
1671729149449:some.residuals <- valid.norm.df$Finedust[3:5]
1671729149677:Finedust.lm.pred[3:5]
1671729149873:#df for residuals
1671729149874:data.frame("Predicted" = Finedust.lm.pred[3:5], "Actual"= valid.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671729150063:options(scipen =999, digits=3)
1671729150255:forecast::accuracy(Finedust.lm.pred, valid.norm.df$Finedust)
1671729150479:#train set for accuaracy
1671729150480:Finedust.lm.pred.train <- predict(Finedust.lm, train.norm.df)
1671729150748:options(scipen=999, digits = 4)
1671729150944:# check the residuals
1671729150945:some.residuals <- train.norm.df$Finedust[3:5] - Finedust.lm.pred.train[3:5]
1671729151134:# df for residuals
1671729151134:data.frame("Predicted" = Finedust.lm.pred.train[3:5], "Acutal" = train.norm.df$Finedust[3:5], "Residual" = some.residuals)
1671729151319:options(scipen =999, digits = 0)
1671729151493:# check the accuracy
1671729151493:forecast::accuracy(Finedust.lm.pred.train, train.norm.df$Finedust)
1671729151669:#  show all residuals with visualization
1671729151670:all.residuals <- valid.norm.df$Finedust - Finedust.lm.pred
1671729151855:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671729152354:# 산점도 그래프로 나타내기
1671729152354:plot(Finedust.lm.pred.train)
1671729152539:#new data test
1671729152539:new.pred <- predict(Finedust.lm, new.norm.df=data.frame())
1671729152543:options(scipen=999, digits=3)
1671729152550:new.pred
1671729152731:View(No2.df)
1671729153567:table(No2.df$no2)
1671729153779:#결측치 확인
1671729153779:table(is.na(No2.df$no2))
1671729153961:sum(is.na(No2.df$no2))
1671729154285:#결측치 처리
1671729154285:no2_clean <- No2.df%>%filter(!is.na(no2))
1671729154403:table(is.na(no2_clean$no2))
1671729154585:No2.df$no2 <- ifelse(No2.df$no2<0.01, NA, No2.df$no2)
1671729154803:table(is.na(No2.df$no2))
1671729155086:no2_clean <- No2.df%>%filter(!is.na(no2))
1671729155306:table(is.na(no2_clean$no2))
1671729155510:View(No2.df)
1671729155969:#날씨 예측
1671729155969:new.df <- data.frame(date = 10, month = 3, no2 = 0.034)
1671729156171:#partitioning for training and validation
1671729156171:set.seed(1)
1671729156398:train.index <- sample(c(1:dim(No2.df)[1]), dim(No2.df)[1]*0.6)
1671729156582:train.df <- No2.df[train.index,]
1671729156790:valid.df <- No2.df[-train.index,]
1671729156991:View(No2.df)
1671729157689:#정규화
1671729157690:train.norm.df <- train.df
1671729157965:valid.norm.df <- valid.df
1671729158202:no2.norm.df <- No2.df
1671729158480:new.norm.df<- new.df
1671729158851:norm.values <- preProcess( train.df[,c(4,5)], method=c("center","scale"))
1671729159208:train.norm.df[,c(4,5)] <- predict( norm.values, train.df[,c(4,5)] )
1671729159501:valid.norm.df[,c(4,5)] <- predict( norm.values, valid.df[,c(4,5)] )
1671729159705:no2.norm.df[,c(4,5)] <- predict( norm.values, No2.df[,c(4,5)] )
1671729159911:#다중 선형 회구 모델 with training set
1671729159911:no2.lm <- lm(no2 ~ ., data = train.norm.df)
1671729160241:options(scipen=999)
1671729160565:summary(no2.lm)
1671729160910:View(No2.df)
1671729161712:# validation set for accuracy
1671729161712:no2.lm.pred <- predict(no2.lm, valid.norm.df)
1671729162033:options(scipen=999, digits=2)
1671729162335:#check the residuals
1671729162336:some.residuals <- valid.norm.df$no2[2:5]
1671729162654:#df for residuals
1671729162654:data.frame("Predicted" = no2.lm.pred[2:5], "Actual"= valid.norm.df$no2[2:5], "Residual" = some.residuals)
1671729163250:options(scipen =999, digits=3)
1671729163809:forecast::accuracy(no2.lm.pred, valid.norm.df$no2)
1671729164035:#train set for accuaray
1671729164035:no2.lm.pred.train <- predict(no2.lm, train.norm.df)
1671729164535:options(scipen=999, digits = 10)
1671729164908:# check the residuals
1671729164909:some.residuals <- train.norm.df$no2[2:5] - no2.lm.pred.train[2:5]
1671729165233:# df for residuals
1671729165233:data.frame("Predicted" = no2.lm.pred.train[2:5], "Acutal" = train.norm.df$no2[2:5], "Residual" = some.residuals)
1671729165434:options(scipen =999, digits = 3)
1671729165679:# check the accuracy
1671729165680:forecast::accuracy(no2.lm.pred.train, train.norm.df$no2)
1671729165964:# // show all residuals with visualization
1671729165965:all.residuals <- valid.norm.df$no2 - no2.lm.pred
1671729166531:hist(all.residuals, breaks = 20, xlab = "Residuals", main = "chart")
1671729166782:plot(no2.lm.pred.train)
1671729167192:new.pred <- predict(no2.lm, new.norm.df=data.frame())
1671729167382:options(scipen=999, digits=3)
1671729167944:new.pred
1671729168353:plot(new.pred)
